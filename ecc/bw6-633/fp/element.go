// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fp

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

import (
	"crypto/rand"
	"encoding/binary"
	"errors"
	"io"
	"math/big"
	"math/bits"
	"reflect"
	"strconv"
	"sync"
)

// Element represents a field element stored on 10 words (uint64)
// Element are assumed to be in Montgomery form in all methods
// field modulus q =
//
// 20494478644167774678813387386538961497669590920908778075528754551012016751717791778743535050360001387419576570244406805463255765034468441182772056330021723098661967429339971741066259394985997
type Element [10]uint64

// Limbs number of 64 bits words needed to represent Element
const Limbs = 10

// Bits number bits needed to represent Element
const Bits = 633

// Bytes number bytes needed to represent Element
const Bytes = Limbs * 8

// field modulus stored as big.Int
var _modulus big.Int

// Modulus returns q as a big.Int
// q =
//
// 20494478644167774678813387386538961497669590920908778075528754551012016751717791778743535050360001387419576570244406805463255765034468441182772056330021723098661967429339971741066259394985997
func Modulus() *big.Int {
	return new(big.Int).Set(&_modulus)
}

// q (modulus)
var qElement = Element{
	15512955586897510413,
	4410884215886313276,
	15543556715411259941,
	9083347379620258823,
	13320134076191308873,
	9318693926755804304,
	5645674015335635503,
	12176845843281334983,
	18165857675053050549,
	82862755739295587,
}

// rSquare
var rSquare = Element{
	7358459907925294924,
	14414180951914241931,
	16619482658146888203,
	760736596725344926,
	12753071240931896792,
	13425190760400245818,
	12591714441439252728,
	15325516497554583360,
	5301152003049442834,
	35368377961363834,
}

var bigIntPool = sync.Pool{
	New: func() interface{} {
		return new(big.Int)
	},
}

func init() {
	_modulus.SetString("20494478644167774678813387386538961497669590920908778075528754551012016751717791778743535050360001387419576570244406805463255765034468441182772056330021723098661967429339971741066259394985997", 10)
}

// NewElement returns a new Element from a uint64 value
//
// it is equivalent to
// 		var v NewElement
// 		v.SetUint64(...)
func NewElement(v uint64) Element {
	z := Element{v}
	z.Mul(&z, &rSquare)
	return z
}

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element) SetUint64(v uint64) *Element {
	*z = Element{v}
	return z.Mul(z, &rSquare) // z.ToMont()
}

// Set z = x
func (z *Element) Set(x *Element) *Element {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	return z
}

// SetInterface converts provided interface into Element
// returns an error if provided type is not supported
// supported types: Element, *Element, uint64, int, string (interpreted as base10 integer),
// *big.Int, big.Int, []byte
func (z *Element) SetInterface(i1 interface{}) (*Element, error) {
	switch c1 := i1.(type) {
	case Element:
		return z.Set(&c1), nil
	case *Element:
		return z.Set(c1), nil
	case uint64:
		return z.SetUint64(c1), nil
	case int:
		return z.SetString(strconv.Itoa(c1)), nil
	case string:
		return z.SetString(c1), nil
	case *big.Int:
		return z.SetBigInt(c1), nil
	case big.Int:
		return z.SetBigInt(&c1), nil
	case []byte:
		return z.SetBytes(c1), nil
	default:
		return nil, errors.New("can't set fp.Element from type " + reflect.TypeOf(i1).String())
	}
}

// SetZero z = 0
func (z *Element) SetZero() *Element {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element) SetOne() *Element {
	z[0] = 5665001492438840506
	z[1] = 16907884053554239805
	z[2] = 17318295036095996852
	z[3] = 12638729832353218866
	z[4] = 12856030952767240260
	z[5] = 15732028589390776959
	z[6] = 1038965607738428109
	z[7] = 8411601626847721258
	z[8] = 7016548280614581879
	z[9] = 51212299585931083
	return z
}

// Div z = x*y^-1 mod q
func (z *Element) Div(x, y *Element) *Element {
	var yInv Element
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Bit returns the i'th bit, with lsb == bit 0.
// It is the responsability of the caller to convert from Montgomery to Regular form if needed
func (z *Element) Bit(i uint64) uint64 {
	j := i / 64
	if j >= 10 {
		return 0
	}
	return uint64(z[j] >> (i % 64) & 1)
}

// Equal returns z == x
func (z *Element) Equal(x *Element) bool {
	return (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element) IsZero() bool {
	return (z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// IsUint64 returns true if z[0] >= 0 and all other words are 0
func (z *Element) IsUint64() bool {
	return (z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1]) == 0
}

// Cmp compares (lexicographic order) z and x and returns:
//
//   -1 if z <  x
//    0 if z == x
//   +1 if z >  x
//
func (z *Element) Cmp(x *Element) int {
	_z := *z
	_x := *x
	_z.FromMont()
	_x.FromMont()
	if _z[9] > _x[9] {
		return 1
	} else if _z[9] < _x[9] {
		return -1
	}
	if _z[8] > _x[8] {
		return 1
	} else if _z[8] < _x[8] {
		return -1
	}
	if _z[7] > _x[7] {
		return 1
	} else if _z[7] < _x[7] {
		return -1
	}
	if _z[6] > _x[6] {
		return 1
	} else if _z[6] < _x[6] {
		return -1
	}
	if _z[5] > _x[5] {
		return 1
	} else if _z[5] < _x[5] {
		return -1
	}
	if _z[4] > _x[4] {
		return 1
	} else if _z[4] < _x[4] {
		return -1
	}
	if _z[3] > _x[3] {
		return 1
	} else if _z[3] < _x[3] {
		return -1
	}
	if _z[2] > _x[2] {
		return 1
	} else if _z[2] < _x[2] {
		return -1
	}
	if _z[1] > _x[1] {
		return 1
	} else if _z[1] < _x[1] {
		return -1
	}
	if _z[0] > _x[0] {
		return 1
	} else if _z[0] < _x[0] {
		return -1
	}
	return 0
}

// LexicographicallyLargest returns true if this element is strictly lexicographically
// larger than its negation, false otherwise
func (z *Element) LexicographicallyLargest() bool {
	// adapted from github.com/zkcrypto/bls12_381
	// we check if the element is larger than (q-1) / 2
	// if z - (((q -1) / 2) + 1) have no underflow, then z > (q-1) / 2

	_z := *z
	_z.FromMont()

	var b uint64
	_, b = bits.Sub64(_z[0], 7756477793448755207, 0)
	_, b = bits.Sub64(_z[1], 11428814144797932446, b)
	_, b = bits.Sub64(_z[2], 16995150394560405778, b)
	_, b = bits.Sub64(_z[3], 13765045726664905219, b)
	_, b = bits.Sub64(_z[4], 6660067038095654436, b)
	_, b = bits.Sub64(_z[5], 13882719000232677960, b)
	_, b = bits.Sub64(_z[6], 12046209044522593559, b)
	_, b = bits.Sub64(_z[7], 15311794958495443299, b)
	_, b = bits.Sub64(_z[8], 18306300874381301082, b)
	_, b = bits.Sub64(_z[9], 41431377869647793, b)

	return b == 0
}

// SetRandom sets z to a random element < q
func (z *Element) SetRandom() (*Element, error) {
	var bytes [80]byte
	if _, err := io.ReadFull(rand.Reader, bytes[:]); err != nil {
		return nil, err
	}
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[9] %= 82862755739295587

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 82862755739295587 || (z[9] == 82862755739295587 && (z[8] < 18165857675053050549 || (z[8] == 18165857675053050549 && (z[7] < 12176845843281334983 || (z[7] == 12176845843281334983 && (z[6] < 5645674015335635503 || (z[6] == 5645674015335635503 && (z[5] < 9318693926755804304 || (z[5] == 9318693926755804304 && (z[4] < 13320134076191308873 || (z[4] == 13320134076191308873 && (z[3] < 9083347379620258823 || (z[3] == 9083347379620258823 && (z[2] < 15543556715411259941 || (z[2] == 15543556715411259941 && (z[1] < 4410884215886313276 || (z[1] == 4410884215886313276 && (z[0] < 15512955586897510413))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15512955586897510413, 0)
		z[1], b = bits.Sub64(z[1], 4410884215886313276, b)
		z[2], b = bits.Sub64(z[2], 15543556715411259941, b)
		z[3], b = bits.Sub64(z[3], 9083347379620258823, b)
		z[4], b = bits.Sub64(z[4], 13320134076191308873, b)
		z[5], b = bits.Sub64(z[5], 9318693926755804304, b)
		z[6], b = bits.Sub64(z[6], 5645674015335635503, b)
		z[7], b = bits.Sub64(z[7], 12176845843281334983, b)
		z[8], b = bits.Sub64(z[8], 18165857675053050549, b)
		z[9], _ = bits.Sub64(z[9], 82862755739295587, b)
	}

	return z, nil
}

// One returns 1 (in montgommery form)
func One() Element {
	var one Element
	one.SetOne()
	return one
}

// Halve sets z to z / 2 (mod p)
func (z *Element) Halve() {
	if z[0]&1 == 1 {
		var carry uint64

		// z = z + q
		z[0], carry = bits.Add64(z[0], 15512955586897510413, 0)
		z[1], carry = bits.Add64(z[1], 4410884215886313276, carry)
		z[2], carry = bits.Add64(z[2], 15543556715411259941, carry)
		z[3], carry = bits.Add64(z[3], 9083347379620258823, carry)
		z[4], carry = bits.Add64(z[4], 13320134076191308873, carry)
		z[5], carry = bits.Add64(z[5], 9318693926755804304, carry)
		z[6], carry = bits.Add64(z[6], 5645674015335635503, carry)
		z[7], carry = bits.Add64(z[7], 12176845843281334983, carry)
		z[8], carry = bits.Add64(z[8], 18165857675053050549, carry)
		z[9], _ = bits.Add64(z[9], 82862755739295587, carry)

	}

	// z = z >> 1

	z[0] = z[0]>>1 | z[1]<<63
	z[1] = z[1]>>1 | z[2]<<63
	z[2] = z[2]>>1 | z[3]<<63
	z[3] = z[3]>>1 | z[4]<<63
	z[4] = z[4]>>1 | z[5]<<63
	z[5] = z[5]>>1 | z[6]<<63
	z[6] = z[6]>>1 | z[7]<<63
	z[7] = z[7]>>1 | z[8]<<63
	z[8] = z[8]>>1 | z[9]<<63
	z[9] >>= 1

}

// API with assembly impl

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element) Mul(x, y *Element) *Element {
	mul(z, x, y)
	return z
}

// Square z = x * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element) Square(x *Element) *Element {
	mul(z, x, x)
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element) FromMont() *Element {
	fromMont(z)
	return z
}

// Add z = x + y mod q
func (z *Element) Add(x, y *Element) *Element {
	add(z, x, y)
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element) Double(x *Element) *Element {
	double(z, x)
	return z
}

// Sub  z = x - y mod q
func (z *Element) Sub(x, y *Element) *Element {
	sub(z, x, y)
	return z
}

// Neg z = q - x
func (z *Element) Neg(x *Element) *Element {
	neg(z, x)
	return z
}

// Generic (no ADX instructions, no AMD64) versions of multiplication and squaring algorithms

func _mulGeneric(z, x, y *Element) {

	var t [10]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		c[2], t[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd1(v, y[3], c[1])
		c[2], t[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd1(v, y[4], c[1])
		c[2], t[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd1(v, y[5], c[1])
		c[2], t[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd1(v, y[6], c[1])
		c[2], t[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd1(v, y[7], c[1])
		c[2], t[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd1(v, y[8], c[1])
		c[2], t[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd1(v, y[9], c[1])
		t[9], t[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		t[9], t[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		t[9], t[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		t[9], t[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		t[9], t[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}
	{
		// round 5
		v := x[5]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		t[9], t[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}
	{
		// round 6
		v := x[6]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		t[9], t[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}
	{
		// round 7
		v := x[7]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		t[9], t[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}
	{
		// round 8
		v := x[8]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		t[9], t[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}
	{
		// round 9
		v := x[9]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 13046692460116554043
		c[2] = madd0(m, 15512955586897510413, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 4410884215886313276, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], z[1] = madd2(m, 15543556715411259941, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], z[2] = madd2(m, 9083347379620258823, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], z[3] = madd2(m, 13320134076191308873, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], z[4] = madd2(m, 9318693926755804304, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], z[5] = madd2(m, 5645674015335635503, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], z[6] = madd2(m, 12176845843281334983, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], z[7] = madd2(m, 18165857675053050549, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		z[9], z[8] = madd3(m, 82862755739295587, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 82862755739295587 || (z[9] == 82862755739295587 && (z[8] < 18165857675053050549 || (z[8] == 18165857675053050549 && (z[7] < 12176845843281334983 || (z[7] == 12176845843281334983 && (z[6] < 5645674015335635503 || (z[6] == 5645674015335635503 && (z[5] < 9318693926755804304 || (z[5] == 9318693926755804304 && (z[4] < 13320134076191308873 || (z[4] == 13320134076191308873 && (z[3] < 9083347379620258823 || (z[3] == 9083347379620258823 && (z[2] < 15543556715411259941 || (z[2] == 15543556715411259941 && (z[1] < 4410884215886313276 || (z[1] == 4410884215886313276 && (z[0] < 15512955586897510413))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15512955586897510413, 0)
		z[1], b = bits.Sub64(z[1], 4410884215886313276, b)
		z[2], b = bits.Sub64(z[2], 15543556715411259941, b)
		z[3], b = bits.Sub64(z[3], 9083347379620258823, b)
		z[4], b = bits.Sub64(z[4], 13320134076191308873, b)
		z[5], b = bits.Sub64(z[5], 9318693926755804304, b)
		z[6], b = bits.Sub64(z[6], 5645674015335635503, b)
		z[7], b = bits.Sub64(z[7], 12176845843281334983, b)
		z[8], b = bits.Sub64(z[8], 18165857675053050549, b)
		z[9], _ = bits.Sub64(z[9], 82862755739295587, b)
	}
}

func _fromMontGeneric(z *Element) {
	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13046692460116554043
		C := madd0(m, 15512955586897510413, z[0])
		C, z[0] = madd2(m, 4410884215886313276, z[1], C)
		C, z[1] = madd2(m, 15543556715411259941, z[2], C)
		C, z[2] = madd2(m, 9083347379620258823, z[3], C)
		C, z[3] = madd2(m, 13320134076191308873, z[4], C)
		C, z[4] = madd2(m, 9318693926755804304, z[5], C)
		C, z[5] = madd2(m, 5645674015335635503, z[6], C)
		C, z[6] = madd2(m, 12176845843281334983, z[7], C)
		C, z[7] = madd2(m, 18165857675053050549, z[8], C)
		C, z[8] = madd2(m, 82862755739295587, z[9], C)
		z[9] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 82862755739295587 || (z[9] == 82862755739295587 && (z[8] < 18165857675053050549 || (z[8] == 18165857675053050549 && (z[7] < 12176845843281334983 || (z[7] == 12176845843281334983 && (z[6] < 5645674015335635503 || (z[6] == 5645674015335635503 && (z[5] < 9318693926755804304 || (z[5] == 9318693926755804304 && (z[4] < 13320134076191308873 || (z[4] == 13320134076191308873 && (z[3] < 9083347379620258823 || (z[3] == 9083347379620258823 && (z[2] < 15543556715411259941 || (z[2] == 15543556715411259941 && (z[1] < 4410884215886313276 || (z[1] == 4410884215886313276 && (z[0] < 15512955586897510413))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15512955586897510413, 0)
		z[1], b = bits.Sub64(z[1], 4410884215886313276, b)
		z[2], b = bits.Sub64(z[2], 15543556715411259941, b)
		z[3], b = bits.Sub64(z[3], 9083347379620258823, b)
		z[4], b = bits.Sub64(z[4], 13320134076191308873, b)
		z[5], b = bits.Sub64(z[5], 9318693926755804304, b)
		z[6], b = bits.Sub64(z[6], 5645674015335635503, b)
		z[7], b = bits.Sub64(z[7], 12176845843281334983, b)
		z[8], b = bits.Sub64(z[8], 18165857675053050549, b)
		z[9], _ = bits.Sub64(z[9], 82862755739295587, b)
	}
}

func _addGeneric(z, x, y *Element) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], _ = bits.Add64(x[9], y[9], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 82862755739295587 || (z[9] == 82862755739295587 && (z[8] < 18165857675053050549 || (z[8] == 18165857675053050549 && (z[7] < 12176845843281334983 || (z[7] == 12176845843281334983 && (z[6] < 5645674015335635503 || (z[6] == 5645674015335635503 && (z[5] < 9318693926755804304 || (z[5] == 9318693926755804304 && (z[4] < 13320134076191308873 || (z[4] == 13320134076191308873 && (z[3] < 9083347379620258823 || (z[3] == 9083347379620258823 && (z[2] < 15543556715411259941 || (z[2] == 15543556715411259941 && (z[1] < 4410884215886313276 || (z[1] == 4410884215886313276 && (z[0] < 15512955586897510413))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15512955586897510413, 0)
		z[1], b = bits.Sub64(z[1], 4410884215886313276, b)
		z[2], b = bits.Sub64(z[2], 15543556715411259941, b)
		z[3], b = bits.Sub64(z[3], 9083347379620258823, b)
		z[4], b = bits.Sub64(z[4], 13320134076191308873, b)
		z[5], b = bits.Sub64(z[5], 9318693926755804304, b)
		z[6], b = bits.Sub64(z[6], 5645674015335635503, b)
		z[7], b = bits.Sub64(z[7], 12176845843281334983, b)
		z[8], b = bits.Sub64(z[8], 18165857675053050549, b)
		z[9], _ = bits.Sub64(z[9], 82862755739295587, b)
	}
}

func _doubleGeneric(z, x *Element) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], _ = bits.Add64(x[9], x[9], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 82862755739295587 || (z[9] == 82862755739295587 && (z[8] < 18165857675053050549 || (z[8] == 18165857675053050549 && (z[7] < 12176845843281334983 || (z[7] == 12176845843281334983 && (z[6] < 5645674015335635503 || (z[6] == 5645674015335635503 && (z[5] < 9318693926755804304 || (z[5] == 9318693926755804304 && (z[4] < 13320134076191308873 || (z[4] == 13320134076191308873 && (z[3] < 9083347379620258823 || (z[3] == 9083347379620258823 && (z[2] < 15543556715411259941 || (z[2] == 15543556715411259941 && (z[1] < 4410884215886313276 || (z[1] == 4410884215886313276 && (z[0] < 15512955586897510413))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15512955586897510413, 0)
		z[1], b = bits.Sub64(z[1], 4410884215886313276, b)
		z[2], b = bits.Sub64(z[2], 15543556715411259941, b)
		z[3], b = bits.Sub64(z[3], 9083347379620258823, b)
		z[4], b = bits.Sub64(z[4], 13320134076191308873, b)
		z[5], b = bits.Sub64(z[5], 9318693926755804304, b)
		z[6], b = bits.Sub64(z[6], 5645674015335635503, b)
		z[7], b = bits.Sub64(z[7], 12176845843281334983, b)
		z[8], b = bits.Sub64(z[8], 18165857675053050549, b)
		z[9], _ = bits.Sub64(z[9], 82862755739295587, b)
	}
}

func _subGeneric(z, x, y *Element) {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 15512955586897510413, 0)
		z[1], c = bits.Add64(z[1], 4410884215886313276, c)
		z[2], c = bits.Add64(z[2], 15543556715411259941, c)
		z[3], c = bits.Add64(z[3], 9083347379620258823, c)
		z[4], c = bits.Add64(z[4], 13320134076191308873, c)
		z[5], c = bits.Add64(z[5], 9318693926755804304, c)
		z[6], c = bits.Add64(z[6], 5645674015335635503, c)
		z[7], c = bits.Add64(z[7], 12176845843281334983, c)
		z[8], c = bits.Add64(z[8], 18165857675053050549, c)
		z[9], _ = bits.Add64(z[9], 82862755739295587, c)
	}
}

func _negGeneric(z, x *Element) {
	if x.IsZero() {
		z.SetZero()
		return
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(15512955586897510413, x[0], 0)
	z[1], borrow = bits.Sub64(4410884215886313276, x[1], borrow)
	z[2], borrow = bits.Sub64(15543556715411259941, x[2], borrow)
	z[3], borrow = bits.Sub64(9083347379620258823, x[3], borrow)
	z[4], borrow = bits.Sub64(13320134076191308873, x[4], borrow)
	z[5], borrow = bits.Sub64(9318693926755804304, x[5], borrow)
	z[6], borrow = bits.Sub64(5645674015335635503, x[6], borrow)
	z[7], borrow = bits.Sub64(12176845843281334983, x[7], borrow)
	z[8], borrow = bits.Sub64(18165857675053050549, x[8], borrow)
	z[9], _ = bits.Sub64(82862755739295587, x[9], borrow)
}

func _reduceGeneric(z *Element) {

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 82862755739295587 || (z[9] == 82862755739295587 && (z[8] < 18165857675053050549 || (z[8] == 18165857675053050549 && (z[7] < 12176845843281334983 || (z[7] == 12176845843281334983 && (z[6] < 5645674015335635503 || (z[6] == 5645674015335635503 && (z[5] < 9318693926755804304 || (z[5] == 9318693926755804304 && (z[4] < 13320134076191308873 || (z[4] == 13320134076191308873 && (z[3] < 9083347379620258823 || (z[3] == 9083347379620258823 && (z[2] < 15543556715411259941 || (z[2] == 15543556715411259941 && (z[1] < 4410884215886313276 || (z[1] == 4410884215886313276 && (z[0] < 15512955586897510413))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 15512955586897510413, 0)
		z[1], b = bits.Sub64(z[1], 4410884215886313276, b)
		z[2], b = bits.Sub64(z[2], 15543556715411259941, b)
		z[3], b = bits.Sub64(z[3], 9083347379620258823, b)
		z[4], b = bits.Sub64(z[4], 13320134076191308873, b)
		z[5], b = bits.Sub64(z[5], 9318693926755804304, b)
		z[6], b = bits.Sub64(z[6], 5645674015335635503, b)
		z[7], b = bits.Sub64(z[7], 12176845843281334983, b)
		z[8], b = bits.Sub64(z[8], 18165857675053050549, b)
		z[9], _ = bits.Sub64(z[9], 82862755739295587, b)
	}
}

func mulByConstant(z *Element, c uint8) {
	switch c {
	case 0:
		z.SetZero()
		return
	case 1:
		return
	case 2:
		z.Double(z)
		return
	case 3:
		_z := *z
		z.Double(z).Add(z, &_z)
	case 5:
		_z := *z
		z.Double(z).Double(z).Add(z, &_z)
	default:
		var y Element
		y.SetUint64(uint64(c))
		z.Mul(z, &y)
	}
}

// BatchInvert returns a new slice with every element inverted.
// Uses Montgomery batch inversion trick
func BatchInvert(a []Element) []Element {
	res := make([]Element, len(a))
	if len(a) == 0 {
		return res
	}

	zeroes := make([]bool, len(a))
	accumulator := One()

	for i := 0; i < len(a); i++ {
		if a[i].IsZero() {
			zeroes[i] = true
			continue
		}
		res[i] = accumulator
		accumulator.Mul(&accumulator, &a[i])
	}

	accumulator.Inverse(&accumulator)

	for i := len(a) - 1; i >= 0; i-- {
		if zeroes[i] {
			continue
		}
		res[i].Mul(&res[i], &accumulator)
		accumulator.Mul(&accumulator, &a[i])
	}

	return res
}

func _butterflyGeneric(a, b *Element) {
	t := *a
	a.Add(a, b)
	b.Sub(&t, b)
}

// BitLen returns the minimum number of bits needed to represent z
// returns 0 if z == 0
func (z *Element) BitLen() int {
	if z[9] != 0 {
		return 576 + bits.Len64(z[9])
	}
	if z[8] != 0 {
		return 512 + bits.Len64(z[8])
	}
	if z[7] != 0 {
		return 448 + bits.Len64(z[7])
	}
	if z[6] != 0 {
		return 384 + bits.Len64(z[6])
	}
	if z[5] != 0 {
		return 320 + bits.Len64(z[5])
	}
	if z[4] != 0 {
		return 256 + bits.Len64(z[4])
	}
	if z[3] != 0 {
		return 192 + bits.Len64(z[3])
	}
	if z[2] != 0 {
		return 128 + bits.Len64(z[2])
	}
	if z[1] != 0 {
		return 64 + bits.Len64(z[1])
	}
	return bits.Len64(z[0])
}

// generated by github.com/mmcloughlin/addchain

func (z *Element) expBySqrtExp(x *Element) *Element {
	// the addition chain:
	//
	//	_10       = 2*1
	//	_11       = 1 + _10
	//	_101      = _10 + _11
	//	_111      = _10 + _101
	//	_1001     = _10 + _111
	//	_1011     = _10 + _1001
	//	_1101     = _10 + _1011
	//	_1111     = _10 + _1101
	//	_10001    = _10 + _1111
	//	_10011    = _10 + _10001
	//	_10101    = _10 + _10011
	//	_10111    = _10 + _10101
	//	_11001    = _10 + _10111
	//	_11011    = _10 + _11001
	//	_11101    = _10 + _11011
	//	_11111    = _10 + _11101
	//	_111110   = 2*_11111
	//	_111111   = 1 + _111110
	//	_1111110  = 2*_111111
	//	_1111111  = 1 + _1111110
	//	_10010000 = _10001 + _1111111
	//	i36       = ((_10010000 << 3 + _11001) << 5 + _10001) << 5
	//	i45       = 2*((_10011 + i36) << 5 + _11001) + 1
	//	i69       = ((i45 << 10 + _1111) << 6 + _1101) << 6
	//	i85       = ((_11111 + i69) << 3 + _11) << 10 + _1111111
	//	i106      = ((2*i85 + 1) << 9 + _1101) << 9
	//	i117      = ((_10111 + i106) << 6 + _10011) << 2 + _11
	//	i142      = ((i117 << 12 + _11101) << 4 + _111) << 7
	//	i155      = ((_10101 + i142) << 5 + _1011) << 5 + _1011
	//	i177      = ((i155 << 4 + _101) << 9 + _111111) << 7
	//	i193      = ((_11011 + i177) << 5 + _11) << 8 + _11101
	//	i213      = ((i193 << 6 + _11101) << 5 + _1111) << 7
	//	i230      = ((_11101 + i213) << 6 + _1011) << 8 + _11101
	//	i250      = ((i230 << 5 + _111) << 6 + _1011) << 7
	//	i264      = ((_10111 + i250) << 5 + _1101) << 6 + _1101
	//	i284      = ((i264 << 6 + _11011) << 7 + _11011) << 5
	//	i297      = ((_10111 + i284) << 4 + _1011) << 6 + _10001
	//	i323      = ((i297 << 6 + _11111) << 11 + _10101) << 7
	//	i344      = ((_10101 + i323) << 7 + _11011) << 11 + _11111
	//	i360      = ((i344 << 5 + _1011) << 5 + _1111) << 4
	//	i372      = ((_101 + i360) << 6 + _1001) << 3 + 1
	//	i395      = ((i372 << 9 + _10111) << 8 + _11011) << 4
	//	i411      = ((_101 + i395) << 7 + _11111) << 6 + _10111
	//	i433      = ((i411 << 3 + _101) << 11 + _111111) << 6
	//	i447      = ((_10101 + i433) << 4 + _1111) << 7 + _1001
	//	i469      = ((i447 << 3 + 1) << 7 + _111111) << 10
	//	i483      = ((_11101 + i469) << 4 + 1) << 7 + _101
	//	i503      = ((i483 << 9 + _11101) << 4 + _1011) << 5
	//	i514      = ((_1111 + i503) << 5 + _1101) << 3 + 1
	//	i538      = ((i514 << 12 + _11111) << 6 + _10111) << 4
	//	i552      = ((_1011 + i538) << 6 + _10111) << 5 + _111
	//	i568      = ((i552 << 6 + _1111) << 6 + _10101) << 2
	//	i584      = ((_11 + i568) << 8 + _111) << 5 + _111
	//	i606      = ((i584 << 9 + _10001) << 5 + _101) << 6
	//	i620      = ((_1111 + i606) << 6 + _10011) << 5 + _1101
	//	i637      = ((i620 << 7 + _11011) << 4 + _1101) << 4
	//	i650      = ((_11 + i637) << 8 + _10001) << 2 + 1
	//	i672      = ((i650 << 10 + _1111111) << 4 + _111) << 6
	//	i687      = ((_1111 + i672) << 6 + _1101) << 6 + _11101
	//	i708      = ((i687 << 6 + _1001) << 7 + _1011) << 6
	//	i724      = ((_11101 + i708) << 5 + _1001) << 8 + _10101
	//	return      (i724 << 2 + _11) << 17 + 1
	//
	// Operations: 625 squares 120 multiplies
	//
	// Generated by github.com/mmcloughlin/addchain v0.4.0.

	// Allocate Temporaries.
	var t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16 Element
	// Step 1: t7 = x^0x2
	t7.Square(x)

	// Step 2: z = x^0x3
	z.Mul(x, &t7)

	// Step 3: t11 = x^0x5
	t11.Mul(&t7, z)

	// Step 4: t6 = x^0x7
	t6.Mul(&t7, &t11)

	// Step 5: t1 = x^0x9
	t1.Mul(&t7, &t6)

	// Step 6: t3 = x^0xb
	t3.Mul(&t7, &t1)

	// Step 7: t4 = x^0xd
	t4.Mul(&t7, &t3)

	// Step 8: t5 = x^0xf
	t5.Mul(&t7, &t4)

	// Step 9: t8 = x^0x11
	t8.Mul(&t7, &t5)

	// Step 10: t10 = x^0x13
	t10.Mul(&t7, &t8)

	// Step 11: t0 = x^0x15
	t0.Mul(&t7, &t10)

	// Step 12: t12 = x^0x17
	t12.Mul(&t7, &t0)

	// Step 13: t15 = x^0x19
	t15.Mul(&t7, &t12)

	// Step 14: t9 = x^0x1b
	t9.Mul(&t7, &t15)

	// Step 15: t2 = x^0x1d
	t2.Mul(&t7, &t9)

	// Step 16: t13 = x^0x1f
	t13.Mul(&t7, &t2)

	// Step 17: t7 = x^0x3e
	t7.Square(&t13)

	// Step 18: t14 = x^0x3f
	t14.Mul(x, &t7)

	// Step 19: t7 = x^0x7e
	t7.Square(&t14)

	// Step 20: t7 = x^0x7f
	t7.Mul(x, &t7)

	// Step 21: t16 = x^0x90
	t16.Mul(&t8, &t7)

	// Step 24: t16 = x^0x480
	for s := 0; s < 3; s++ {
		t16.Square(&t16)
	}

	// Step 25: t16 = x^0x499
	t16.Mul(&t15, &t16)

	// Step 30: t16 = x^0x9320
	for s := 0; s < 5; s++ {
		t16.Square(&t16)
	}

	// Step 31: t16 = x^0x9331
	t16.Mul(&t8, &t16)

	// Step 36: t16 = x^0x126620
	for s := 0; s < 5; s++ {
		t16.Square(&t16)
	}

	// Step 37: t16 = x^0x126633
	t16.Mul(&t10, &t16)

	// Step 42: t16 = x^0x24cc660
	for s := 0; s < 5; s++ {
		t16.Square(&t16)
	}

	// Step 43: t15 = x^0x24cc679
	t15.Mul(&t15, &t16)

	// Step 44: t15 = x^0x4998cf2
	t15.Square(&t15)

	// Step 45: t15 = x^0x4998cf3
	t15.Mul(x, &t15)

	// Step 55: t15 = x^0x126633cc00
	for s := 0; s < 10; s++ {
		t15.Square(&t15)
	}

	// Step 56: t15 = x^0x126633cc0f
	t15.Mul(&t5, &t15)

	// Step 62: t15 = x^0x4998cf303c0
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 63: t15 = x^0x4998cf303cd
	t15.Mul(&t4, &t15)

	// Step 69: t15 = x^0x126633cc0f340
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 70: t15 = x^0x126633cc0f35f
	t15.Mul(&t13, &t15)

	// Step 73: t15 = x^0x93319e6079af8
	for s := 0; s < 3; s++ {
		t15.Square(&t15)
	}

	// Step 74: t15 = x^0x93319e6079afb
	t15.Mul(z, &t15)

	// Step 84: t15 = x^0x24cc67981e6bec00
	for s := 0; s < 10; s++ {
		t15.Square(&t15)
	}

	// Step 85: t15 = x^0x24cc67981e6bec7f
	t15.Mul(&t7, &t15)

	// Step 86: t15 = x^0x4998cf303cd7d8fe
	t15.Square(&t15)

	// Step 87: t15 = x^0x4998cf303cd7d8ff
	t15.Mul(x, &t15)

	// Step 96: t15 = x^0x93319e6079afb1fe00
	for s := 0; s < 9; s++ {
		t15.Square(&t15)
	}

	// Step 97: t15 = x^0x93319e6079afb1fe0d
	t15.Mul(&t4, &t15)

	// Step 106: t15 = x^0x126633cc0f35f63fc1a00
	for s := 0; s < 9; s++ {
		t15.Square(&t15)
	}

	// Step 107: t15 = x^0x126633cc0f35f63fc1a17
	t15.Mul(&t12, &t15)

	// Step 113: t15 = x^0x4998cf303cd7d8ff0685c0
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 114: t15 = x^0x4998cf303cd7d8ff0685d3
	t15.Mul(&t10, &t15)

	// Step 116: t15 = x^0x126633cc0f35f63fc1a174c
	for s := 0; s < 2; s++ {
		t15.Square(&t15)
	}

	// Step 117: t15 = x^0x126633cc0f35f63fc1a174f
	t15.Mul(z, &t15)

	// Step 129: t15 = x^0x126633cc0f35f63fc1a174f000
	for s := 0; s < 12; s++ {
		t15.Square(&t15)
	}

	// Step 130: t15 = x^0x126633cc0f35f63fc1a174f01d
	t15.Mul(&t2, &t15)

	// Step 134: t15 = x^0x126633cc0f35f63fc1a174f01d0
	for s := 0; s < 4; s++ {
		t15.Square(&t15)
	}

	// Step 135: t15 = x^0x126633cc0f35f63fc1a174f01d7
	t15.Mul(&t6, &t15)

	// Step 142: t15 = x^0x93319e6079afb1fe0d0ba780eb80
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 143: t15 = x^0x93319e6079afb1fe0d0ba780eb95
	t15.Mul(&t0, &t15)

	// Step 148: t15 = x^0x126633cc0f35f63fc1a174f01d72a0
	for s := 0; s < 5; s++ {
		t15.Square(&t15)
	}

	// Step 149: t15 = x^0x126633cc0f35f63fc1a174f01d72ab
	t15.Mul(&t3, &t15)

	// Step 154: t15 = x^0x24cc67981e6bec7f8342e9e03ae5560
	for s := 0; s < 5; s++ {
		t15.Square(&t15)
	}

	// Step 155: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b
	t15.Mul(&t3, &t15)

	// Step 159: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b0
	for s := 0; s < 4; s++ {
		t15.Square(&t15)
	}

	// Step 160: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b5
	t15.Mul(&t11, &t15)

	// Step 169: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a00
	for s := 0; s < 9; s++ {
		t15.Square(&t15)
	}

	// Step 170: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f
	t15.Mul(&t14, &t15)

	// Step 177: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f80
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 178: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b
	t15.Mul(&t9, &t15)

	// Step 183: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f360
	for s := 0; s < 5; s++ {
		t15.Square(&t15)
	}

	// Step 184: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f363
	t15.Mul(z, &t15)

	// Step 192: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f36300
	for s := 0; s < 8; s++ {
		t15.Square(&t15)
	}

	// Step 193: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d
	t15.Mul(&t2, &t15)

	// Step 199: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c740
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 200: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d
	t15.Mul(&t2, &t15)

	// Step 205: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18eba0
	for s := 0; s < 5; s++ {
		t15.Square(&t15)
	}

	// Step 206: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf
	t15.Mul(&t5, &t15)

	// Step 213: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d780
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 214: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d
	t15.Mul(&t2, &t15)

	// Step 220: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e740
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 221: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b
	t15.Mul(&t3, &t15)

	// Step 229: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b00
	for s := 0; s < 8; s++ {
		t15.Square(&t15)
	}

	// Step 230: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d
	t15.Mul(&t2, &t15)

	// Step 235: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a0
	for s := 0; s < 5; s++ {
		t15.Square(&t15)
	}

	// Step 236: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a7
	t15.Mul(&t6, &t15)

	// Step 242: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9c0
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 243: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb
	t15.Mul(&t3, &t15)

	// Step 250: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e580
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 251: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e597
	t15.Mul(&t12, &t15)

	// Step 256: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2e0
	for s := 0; s < 5; s++ {
		t15.Square(&t15)
	}

	// Step 257: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed
	t15.Mul(&t4, &t15)

	// Step 263: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb40
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 264: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d
	t15.Mul(&t4, &t15)

	// Step 270: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed340
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 271: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b
	t15.Mul(&t9, &t15)

	// Step 278: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad80
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 279: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9b
	t15.Mul(&t9, &t15)

	// Step 284: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b360
	for s := 0; s < 5; s++ {
		t15.Square(&t15)
	}

	// Step 285: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377
	t15.Mul(&t12, &t15)

	// Step 289: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b3770
	for s := 0; s < 4; s++ {
		t15.Square(&t15)
	}

	// Step 290: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b
	t15.Mul(&t3, &t15)

	// Step 296: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cddec0
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 297: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded1
	t15.Mul(&t8, &t15)

	// Step 303: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b440
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 304: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f
	t15.Mul(&t13, &t15)

	// Step 315: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f800
	for s := 0; s < 11; s++ {
		t15.Square(&t15)
	}

	// Step 316: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f815
	t15.Mul(&t0, &t15)

	// Step 323: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a80
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 324: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a95
	t15.Mul(&t0, &t15)

	// Step 331: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a80
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 332: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b
	t15.Mul(&t9, &t15)

	// Step 343: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d800
	for s := 0; s < 11; s++ {
		t15.Square(&t15)
	}

	// Step 344: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f
	t15.Mul(&t13, &t15)

	// Step 349: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03e0
	for s := 0; s < 5; s++ {
		t15.Square(&t15)
	}

	// Step 350: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb
	t15.Mul(&t3, &t15)

	// Step 355: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d60
	for s := 0; s < 5; s++ {
		t15.Square(&t15)
	}

	// Step 356: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f
	t15.Mul(&t5, &t15)

	// Step 360: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f0
	for s := 0; s < 4; s++ {
		t15.Square(&t15)
	}

	// Step 361: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f5
	t15.Mul(&t11, &t15)

	// Step 367: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd40
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 368: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd49
	t15.Mul(&t1, &t15)

	// Step 371: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea48
	for s := 0; s < 3; s++ {
		t15.Square(&t15)
	}

	// Step 372: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea49
	t15.Mul(x, &t15)

	// Step 381: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd49200
	for s := 0; s < 9; s++ {
		t15.Square(&t15)
	}

	// Step 382: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd49217
	t15.Mul(&t12, &t15)

	// Step 390: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd4921700
	for s := 0; s < 8; s++ {
		t15.Square(&t15)
	}

	// Step 391: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b
	t15.Mul(&t9, &t15)

	// Step 395: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b0
	for s := 0; s < 4; s++ {
		t15.Square(&t15)
	}

	// Step 396: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b5
	t15.Mul(&t11, &t15)

	// Step 403: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da80
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 404: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f
	t15.Mul(&t13, &t15)

	// Step 410: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7c0
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 411: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7
	t15.Mul(&t12, &t15)

	// Step 414: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53eb8
	for s := 0; s < 3; s++ {
		t15.Square(&t15)
	}

	// Step 415: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd
	t15.Mul(&t11, &t15)

	// Step 426: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e800
	for s := 0; s < 11; s++ {
		t15.Square(&t15)
	}

	// Step 427: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f
	t15.Mul(&t14, &t15)

	// Step 433: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fc0
	for s := 0; s < 6; s++ {
		t15.Square(&t15)
	}

	// Step 434: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5
	t15.Mul(&t0, &t15)

	// Step 438: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd50
	for s := 0; s < 4; s++ {
		t15.Square(&t15)
	}

	// Step 439: t15 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f
	t15.Mul(&t5, &t15)

	// Step 446: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf80
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 447: t15 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf89
	t15.Mul(&t1, &t15)

	// Step 450: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c48
	for s := 0; s < 3; s++ {
		t15.Square(&t15)
	}

	// Step 451: t15 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c49
	t15.Mul(x, &t15)

	// Step 458: t15 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe2480
	for s := 0; s < 7; s++ {
		t15.Square(&t15)
	}

	// Step 459: t14 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf
	t14.Mul(&t14, &t15)

	// Step 469: t14 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc00
	for s := 0; s < 10; s++ {
		t14.Square(&t14)
	}

	// Step 470: t14 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d
	t14.Mul(&t2, &t14)

	// Step 474: t14 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d0
	for s := 0; s < 4; s++ {
		t14.Square(&t14)
	}

	// Step 475: t14 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d1
	t14.Mul(x, &t14)

	// Step 482: t14 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e880
	for s := 0; s < 7; s++ {
		t14.Square(&t14)
	}

	// Step 483: t14 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e885
	t14.Mul(&t11, &t14)

	// Step 492: t14 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a00
	for s := 0; s < 9; s++ {
		t14.Square(&t14)
	}

	// Step 493: t14 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1d
	t14.Mul(&t2, &t14)

	// Step 497: t14 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1d0
	for s := 0; s < 4; s++ {
		t14.Square(&t14)
	}

	// Step 498: t14 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db
	t14.Mul(&t3, &t14)

	// Step 503: t14 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b60
	for s := 0; s < 5; s++ {
		t14.Square(&t14)
	}

	// Step 504: t14 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f
	t14.Mul(&t5, &t14)

	// Step 509: t14 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876de0
	for s := 0; s < 5; s++ {
		t14.Square(&t14)
	}

	// Step 510: t14 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded
	t14.Mul(&t4, &t14)

	// Step 513: t14 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f68
	for s := 0; s < 3; s++ {
		t14.Square(&t14)
	}

	// Step 514: t14 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f69
	t14.Mul(x, &t14)

	// Step 526: t14 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f69000
	for s := 0; s < 12; s++ {
		t14.Square(&t14)
	}

	// Step 527: t13 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f
	t13.Mul(&t13, &t14)

	// Step 533: t13 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407c0
	for s := 0; s < 6; s++ {
		t13.Square(&t13)
	}

	// Step 534: t13 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7
	t13.Mul(&t12, &t13)

	// Step 538: t13 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d70
	for s := 0; s < 4; s++ {
		t13.Square(&t13)
	}

	// Step 539: t13 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b
	t13.Mul(&t3, &t13)

	// Step 545: t13 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ec0
	for s := 0; s < 6; s++ {
		t13.Square(&t13)
	}

	// Step 546: t12 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed7
	t12.Mul(&t12, &t13)

	// Step 551: t12 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded203ebdae0
	for s := 0; s < 5; s++ {
		t12.Square(&t12)
	}

	// Step 552: t12 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded203ebdae7
	t12.Mul(&t6, &t12)

	// Step 558: t12 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9c0
	for s := 0; s < 6; s++ {
		t12.Square(&t12)
	}

	// Step 559: t12 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf
	t12.Mul(&t5, &t12)

	// Step 565: t12 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded203ebdae73c0
	for s := 0; s < 6; s++ {
		t12.Square(&t12)
	}

	// Step 566: t12 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded203ebdae73d5
	t12.Mul(&t0, &t12)

	// Step 568: t12 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf54
	for s := 0; s < 2; s++ {
		t12.Square(&t12)
	}

	// Step 569: t12 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf57
	t12.Mul(z, &t12)

	// Step 577: t12 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf5700
	for s := 0; s < 8; s++ {
		t12.Square(&t12)
	}

	// Step 578: t12 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf5707
	t12.Mul(&t6, &t12)

	// Step 583: t12 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e0
	for s := 0; s < 5; s++ {
		t12.Square(&t12)
	}

	// Step 584: t12 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e7
	t12.Mul(&t6, &t12)

	// Step 593: t12 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded203ebdae73d5c1ce00
	for s := 0; s < 9; s++ {
		t12.Square(&t12)
	}

	// Step 594: t12 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded203ebdae73d5c1ce11
	t12.Mul(&t8, &t12)

	// Step 599: t12 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c220
	for s := 0; s < 5; s++ {
		t12.Square(&t12)
	}

	// Step 600: t11 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c225
	t11.Mul(&t11, &t12)

	// Step 606: t11 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e708940
	for s := 0; s < 6; s++ {
		t11.Square(&t11)
	}

	// Step 607: t11 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f
	t11.Mul(&t5, &t11)

	// Step 613: t11 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253c0
	for s := 0; s < 6; s++ {
		t11.Square(&t11)
	}

	// Step 614: t10 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d3
	t10.Mul(&t10, &t11)

	// Step 619: t10 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf57073844a7a60
	for s := 0; s < 5; s++ {
		t10.Square(&t10)
	}

	// Step 620: t10 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf57073844a7a6d
	t10.Mul(&t4, &t10)

	// Step 627: t10 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d3680
	for s := 0; s < 7; s++ {
		t10.Square(&t10)
	}

	// Step 628: t9 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369b
	t9.Mul(&t9, &t10)

	// Step 632: t9 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369b0
	for s := 0; s < 4; s++ {
		t9.Square(&t9)
	}

	// Step 633: t9 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd
	t9.Mul(&t4, &t9)

	// Step 637: t9 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd0
	for s := 0; s < 4; s++ {
		t9.Square(&t9)
	}

	// Step 638: t9 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd3
	t9.Mul(z, &t9)

	// Step 646: t9 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd300
	for s := 0; s < 8; s++ {
		t9.Square(&t9)
	}

	// Step 647: t8 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd311
	t8.Mul(&t8, &t9)

	// Step 649: t8 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c44
	for s := 0; s < 2; s++ {
		t8.Square(&t8)
	}

	// Step 650: t8 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c45
	t8.Mul(x, &t8)

	// Step 660: t8 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd311400
	for s := 0; s < 10; s++ {
		t8.Square(&t8)
	}

	// Step 661: t7 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd31147f
	t7.Mul(&t7, &t8)

	// Step 665: t7 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd31147f0
	for s := 0; s < 4; s++ {
		t7.Square(&t7)
	}

	// Step 666: t6 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd31147f7
	t6.Mul(&t6, &t7)

	// Step 672: t6 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c451fdc0
	for s := 0; s < 6; s++ {
		t6.Square(&t6)
	}

	// Step 673: t5 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c451fdcf
	t5.Mul(&t5, &t6)

	// Step 679: t5 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd31147f73c0
	for s := 0; s < 6; s++ {
		t5.Square(&t5)
	}

	// Step 680: t4 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd31147f73cd
	t4.Mul(&t4, &t5)

	// Step 686: t4 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c451fdcf340
	for s := 0; s < 6; s++ {
		t4.Square(&t4)
	}

	// Step 687: t4 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c451fdcf35d
	t4.Mul(&t2, &t4)

	// Step 693: t4 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd31147f73cd740
	for s := 0; s < 6; s++ {
		t4.Square(&t4)
	}

	// Step 694: t4 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd31147f73cd749
	t4.Mul(&t1, &t4)

	// Step 701: t4 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded203ebdae73d5c1ce1129e9b4de988a3fb9e6ba480
	for s := 0; s < 7; s++ {
		t4.Square(&t4)
	}

	// Step 702: t3 = x^0x93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded203ebdae73d5c1ce1129e9b4de988a3fb9e6ba48b
	t3.Mul(&t3, &t4)

	// Step 708: t3 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf57073844a7a6d37a6228fee79ae922c0
	for s := 0; s < 6; s++ {
		t3.Square(&t3)
	}

	// Step 709: t2 = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf57073844a7a6d37a6228fee79ae922dd
	t2.Mul(&t2, &t3)

	// Step 714: t2 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c451fdcf35d245ba0
	for s := 0; s < 5; s++ {
		t2.Square(&t2)
	}

	// Step 715: t1 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c451fdcf35d245ba9
	t1.Mul(&t1, &t2)

	// Step 723: t1 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c451fdcf35d245ba900
	for s := 0; s < 8; s++ {
		t1.Square(&t1)
	}

	// Step 724: t0 = x^0x4998cf303cd7d8ff0685d3c075caad6a3f3631d75e74b1d3965da6b66ef68be054a9b03eb7a9242e36a7d7a0fd5f125f83a2143b6f6901f5ed739eae0e70894f4da6f4c451fdcf35d245ba915
	t0.Mul(&t0, &t1)

	// Step 726: t0 = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd31147f73cd74916ea454
	for s := 0; s < 2; s++ {
		t0.Square(&t0)
	}

	// Step 727: z = x^0x126633cc0f35f63fc1a174f01d72ab5a8fcd8c75d79d2c74e59769ad9bbda2f8152a6c0fadea490b8da9f5e83f57c497e0e8850edbda407d7b5ce7ab839c2253d369bd31147f73cd74916ea457
	z.Mul(z, &t0)

	// Step 744: z = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf57073844a7a6d37a6228fee79ae922dd48ae0000
	for s := 0; s < 17; s++ {
		z.Square(z)
	}

	// Step 745: z = x^0x24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf57073844a7a6d37a6228fee79ae922dd48ae0001
	z.Mul(x, z)

	return z
}

// Exp z = x^exponent mod q
func (z *Element) Exp(x Element, exponent *big.Int) *Element {
	var bZero big.Int
	if exponent.Cmp(&bZero) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	for i := exponent.BitLen() - 2; i >= 0; i-- {
		z.Square(z)
		if exponent.Bit(i) == 1 {
			z.Mul(z, &x)
		}
	}

	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element) ToMont() *Element {
	return z.Mul(z, &rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element) ToRegular() Element {
	return *z.FromMont()
}

// String returns the string form of an Element in Montgomery form
func (z *Element) String() string {
	zz := *z
	zz.FromMont()
	if zz.IsUint64() {
		return strconv.FormatUint(zz[0], 10)
	} else {
		var zzNeg Element
		zzNeg.Neg(z)
		zzNeg.FromMont()
		if zzNeg.IsUint64() {
			return "-" + strconv.FormatUint(zzNeg[0], 10)
		}
	}
	vv := bigIntPool.Get().(*big.Int)
	defer bigIntPool.Put(vv)
	return zz.ToBigInt(vv).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element) ToBigInt(res *big.Int) *big.Int {
	var b [Limbs * 8]byte
	binary.BigEndian.PutUint64(b[72:80], z[0])
	binary.BigEndian.PutUint64(b[64:72], z[1])
	binary.BigEndian.PutUint64(b[56:64], z[2])
	binary.BigEndian.PutUint64(b[48:56], z[3])
	binary.BigEndian.PutUint64(b[40:48], z[4])
	binary.BigEndian.PutUint64(b[32:40], z[5])
	binary.BigEndian.PutUint64(b[24:32], z[6])
	binary.BigEndian.PutUint64(b[16:24], z[7])
	binary.BigEndian.PutUint64(b[8:16], z[8])
	binary.BigEndian.PutUint64(b[0:8], z[9])

	return res.SetBytes(b[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	return z.ToBigInt(res)
}

// Bytes returns the regular (non montgomery) value
// of z as a big-endian byte array.
func (z *Element) Bytes() (res [Limbs * 8]byte) {
	_z := z.ToRegular()
	binary.BigEndian.PutUint64(res[72:80], _z[0])
	binary.BigEndian.PutUint64(res[64:72], _z[1])
	binary.BigEndian.PutUint64(res[56:64], _z[2])
	binary.BigEndian.PutUint64(res[48:56], _z[3])
	binary.BigEndian.PutUint64(res[40:48], _z[4])
	binary.BigEndian.PutUint64(res[32:40], _z[5])
	binary.BigEndian.PutUint64(res[24:32], _z[6])
	binary.BigEndian.PutUint64(res[16:24], _z[7])
	binary.BigEndian.PutUint64(res[8:16], _z[8])
	binary.BigEndian.PutUint64(res[0:8], _z[9])

	return
}

// Marshal returns the regular (non montgomery) value
// of z as a big-endian byte slice.
func (z *Element) Marshal() []byte {
	b := z.Bytes()
	return b[:]
}

// SetBytes interprets e as the bytes of a big-endian unsigned integer,
// sets z to that value (in Montgomery form), and returns z.
func (z *Element) SetBytes(e []byte) *Element {
	// get a big int from our pool
	vv := bigIntPool.Get().(*big.Int)
	vv.SetBytes(e)

	// set big int
	z.SetBigInt(vv)

	// put temporary object back in pool
	bigIntPool.Put(vv)

	return z
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element) SetBigInt(v *big.Int) *Element {
	z.SetZero()

	var zero big.Int

	// fast path
	c := v.Cmp(&_modulus)
	if c == 0 {
		// v == 0
		return z
	} else if c != 1 && v.Cmp(&zero) != -1 {
		// 0 < v < q
		return z.setBigInt(v)
	}

	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	// copy input + modular reduction
	vv.Set(v)
	vv.Mod(v, &_modulus)

	// set big int byte value
	z.setBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)
	return z
}

// setBigInt assumes 0 <= v < q
func (z *Element) setBigInt(v *big.Int) *Element {
	vBits := v.Bits()

	if bits.UintSize == 64 {
		for i := 0; i < len(vBits); i++ {
			z[i] = uint64(vBits[i])
		}
	} else {
		for i := 0; i < len(vBits); i++ {
			if i%2 == 0 {
				z[i/2] = uint64(vBits[i])
			} else {
				z[i/2] |= uint64(vBits[i]) << 32
			}
		}
	}

	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element) SetString(s string) *Element {
	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	if _, ok := vv.SetString(s, 10); !ok {
		panic("Element.SetString failed -> can't parse number in base10 into a big.Int")
	}
	z.SetBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)

	return z
}

var (
	_bLegendreExponentElement *big.Int
	_bSqrtExponentElement     *big.Int
)

func init() {
	_bLegendreExponentElement, _ = new(big.Int).SetString("93319e6079afb1fe0d0ba780eb955ad47e6c63aebce963a72cbb4d6cdded17c0a953607d6f52485c6d4faf41fabe24bf07442876ded203ebdae73d5c1ce1129e9b4de988a3fb9e6ba48b7522b80006", 16)
	const sqrtExponentElement = "24cc67981e6bec7f8342e9e03ae556b51f9b18ebaf3a58e9cb2ed35b377b45f02a54d81f5bd492171b53ebd07eaf892fc1d10a1db7b480faf6b9cf57073844a7a6d37a6228fee79ae922dd48ae0001"
	_bSqrtExponentElement, _ = new(big.Int).SetString(sqrtExponentElement, 16)
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *Element) Legendre() int {
	var l Element
	// z^((q-1)/2)
	l.Exp(*z, _bLegendreExponentElement)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[9] == 51212299585931083) && (l[8] == 7016548280614581879) && (l[7] == 8411601626847721258) && (l[6] == 1038965607738428109) && (l[5] == 15732028589390776959) && (l[4] == 12856030952767240260) && (l[3] == 12638729832353218866) && (l[2] == 17318295036095996852) && (l[1] == 16907884053554239805) && (l[0] == 5665001492438840506) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element) Sqrt(x *Element) *Element {
	// q ≡ 5 (mod 8)
	// see modSqrt5Mod8Prime in math/big/int.go
	var one, alpha, beta, tx, square Element
	one.SetOne()
	tx.Double(x)
	alpha.expBySqrtExp(&tx)
	// alpha.Exp(tx, _bSqrtExponentElement)
	beta.Square(&alpha).
		Mul(&beta, &tx).
		Sub(&beta, &one).
		Mul(&beta, x).
		Mul(&beta, &alpha)

	// as we didn't compute the legendre symbol, ensure we found beta such that beta * beta = x
	square.Square(&beta)
	if square.Equal(x) {
		return z.Set(&beta)
	}
	return nil
}

// Inverse z = x^-1 mod q
// Algorithm 16 in "Efficient Software-Implementation of Finite Fields with Applications to Cryptography"
// if x == 0, sets and returns z = x
func (z *Element) Inverse(x *Element) *Element {
	if x.IsZero() {
		z.SetZero()
		return z
	}

	// initialize u = q
	var u = Element{
		15512955586897510413,
		4410884215886313276,
		15543556715411259941,
		9083347379620258823,
		13320134076191308873,
		9318693926755804304,
		5645674015335635503,
		12176845843281334983,
		18165857675053050549,
		82862755739295587,
	}

	// initialize s = r^2
	var s = Element{
		7358459907925294924,
		14414180951914241931,
		16619482658146888203,
		760736596725344926,
		12753071240931896792,
		13425190760400245818,
		12591714441439252728,
		15325516497554583360,
		5301152003049442834,
		35368377961363834,
	}

	// r = 0
	r := Element{}

	v := *x

	var carry, borrow uint64
	var bigger bool

	for {
		for v[0]&1 == 0 {

			// v = v >> 1

			v[0] = v[0]>>1 | v[1]<<63
			v[1] = v[1]>>1 | v[2]<<63
			v[2] = v[2]>>1 | v[3]<<63
			v[3] = v[3]>>1 | v[4]<<63
			v[4] = v[4]>>1 | v[5]<<63
			v[5] = v[5]>>1 | v[6]<<63
			v[6] = v[6]>>1 | v[7]<<63
			v[7] = v[7]>>1 | v[8]<<63
			v[8] = v[8]>>1 | v[9]<<63
			v[9] >>= 1

			if s[0]&1 == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 15512955586897510413, 0)
				s[1], carry = bits.Add64(s[1], 4410884215886313276, carry)
				s[2], carry = bits.Add64(s[2], 15543556715411259941, carry)
				s[3], carry = bits.Add64(s[3], 9083347379620258823, carry)
				s[4], carry = bits.Add64(s[4], 13320134076191308873, carry)
				s[5], carry = bits.Add64(s[5], 9318693926755804304, carry)
				s[6], carry = bits.Add64(s[6], 5645674015335635503, carry)
				s[7], carry = bits.Add64(s[7], 12176845843281334983, carry)
				s[8], carry = bits.Add64(s[8], 18165857675053050549, carry)
				s[9], _ = bits.Add64(s[9], 82862755739295587, carry)

			}

			// s = s >> 1

			s[0] = s[0]>>1 | s[1]<<63
			s[1] = s[1]>>1 | s[2]<<63
			s[2] = s[2]>>1 | s[3]<<63
			s[3] = s[3]>>1 | s[4]<<63
			s[4] = s[4]>>1 | s[5]<<63
			s[5] = s[5]>>1 | s[6]<<63
			s[6] = s[6]>>1 | s[7]<<63
			s[7] = s[7]>>1 | s[8]<<63
			s[8] = s[8]>>1 | s[9]<<63
			s[9] >>= 1

		}
		for u[0]&1 == 0 {

			// u = u >> 1

			u[0] = u[0]>>1 | u[1]<<63
			u[1] = u[1]>>1 | u[2]<<63
			u[2] = u[2]>>1 | u[3]<<63
			u[3] = u[3]>>1 | u[4]<<63
			u[4] = u[4]>>1 | u[5]<<63
			u[5] = u[5]>>1 | u[6]<<63
			u[6] = u[6]>>1 | u[7]<<63
			u[7] = u[7]>>1 | u[8]<<63
			u[8] = u[8]>>1 | u[9]<<63
			u[9] >>= 1

			if r[0]&1 == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 15512955586897510413, 0)
				r[1], carry = bits.Add64(r[1], 4410884215886313276, carry)
				r[2], carry = bits.Add64(r[2], 15543556715411259941, carry)
				r[3], carry = bits.Add64(r[3], 9083347379620258823, carry)
				r[4], carry = bits.Add64(r[4], 13320134076191308873, carry)
				r[5], carry = bits.Add64(r[5], 9318693926755804304, carry)
				r[6], carry = bits.Add64(r[6], 5645674015335635503, carry)
				r[7], carry = bits.Add64(r[7], 12176845843281334983, carry)
				r[8], carry = bits.Add64(r[8], 18165857675053050549, carry)
				r[9], _ = bits.Add64(r[9], 82862755739295587, carry)

			}

			// r = r >> 1

			r[0] = r[0]>>1 | r[1]<<63
			r[1] = r[1]>>1 | r[2]<<63
			r[2] = r[2]>>1 | r[3]<<63
			r[3] = r[3]>>1 | r[4]<<63
			r[4] = r[4]>>1 | r[5]<<63
			r[5] = r[5]>>1 | r[6]<<63
			r[6] = r[6]>>1 | r[7]<<63
			r[7] = r[7]>>1 | r[8]<<63
			r[8] = r[8]>>1 | r[9]<<63
			r[9] >>= 1

		}

		// v >= u
		bigger = !(v[9] < u[9] || (v[9] == u[9] && (v[8] < u[8] || (v[8] == u[8] && (v[7] < u[7] || (v[7] == u[7] && (v[6] < u[6] || (v[6] == u[6] && (v[5] < u[5] || (v[5] == u[5] && (v[4] < u[4] || (v[4] == u[4] && (v[3] < u[3] || (v[3] == u[3] && (v[2] < u[2] || (v[2] == u[2] && (v[1] < u[1] || (v[1] == u[1] && (v[0] < u[0])))))))))))))))))))

		if bigger {

			// v = v - u
			v[0], borrow = bits.Sub64(v[0], u[0], 0)
			v[1], borrow = bits.Sub64(v[1], u[1], borrow)
			v[2], borrow = bits.Sub64(v[2], u[2], borrow)
			v[3], borrow = bits.Sub64(v[3], u[3], borrow)
			v[4], borrow = bits.Sub64(v[4], u[4], borrow)
			v[5], borrow = bits.Sub64(v[5], u[5], borrow)
			v[6], borrow = bits.Sub64(v[6], u[6], borrow)
			v[7], borrow = bits.Sub64(v[7], u[7], borrow)
			v[8], borrow = bits.Sub64(v[8], u[8], borrow)
			v[9], _ = bits.Sub64(v[9], u[9], borrow)

			// s = s - r
			s[0], borrow = bits.Sub64(s[0], r[0], 0)
			s[1], borrow = bits.Sub64(s[1], r[1], borrow)
			s[2], borrow = bits.Sub64(s[2], r[2], borrow)
			s[3], borrow = bits.Sub64(s[3], r[3], borrow)
			s[4], borrow = bits.Sub64(s[4], r[4], borrow)
			s[5], borrow = bits.Sub64(s[5], r[5], borrow)
			s[6], borrow = bits.Sub64(s[6], r[6], borrow)
			s[7], borrow = bits.Sub64(s[7], r[7], borrow)
			s[8], borrow = bits.Sub64(s[8], r[8], borrow)
			s[9], borrow = bits.Sub64(s[9], r[9], borrow)

			if borrow == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 15512955586897510413, 0)
				s[1], carry = bits.Add64(s[1], 4410884215886313276, carry)
				s[2], carry = bits.Add64(s[2], 15543556715411259941, carry)
				s[3], carry = bits.Add64(s[3], 9083347379620258823, carry)
				s[4], carry = bits.Add64(s[4], 13320134076191308873, carry)
				s[5], carry = bits.Add64(s[5], 9318693926755804304, carry)
				s[6], carry = bits.Add64(s[6], 5645674015335635503, carry)
				s[7], carry = bits.Add64(s[7], 12176845843281334983, carry)
				s[8], carry = bits.Add64(s[8], 18165857675053050549, carry)
				s[9], _ = bits.Add64(s[9], 82862755739295587, carry)

			}
		} else {

			// u = u - v
			u[0], borrow = bits.Sub64(u[0], v[0], 0)
			u[1], borrow = bits.Sub64(u[1], v[1], borrow)
			u[2], borrow = bits.Sub64(u[2], v[2], borrow)
			u[3], borrow = bits.Sub64(u[3], v[3], borrow)
			u[4], borrow = bits.Sub64(u[4], v[4], borrow)
			u[5], borrow = bits.Sub64(u[5], v[5], borrow)
			u[6], borrow = bits.Sub64(u[6], v[6], borrow)
			u[7], borrow = bits.Sub64(u[7], v[7], borrow)
			u[8], borrow = bits.Sub64(u[8], v[8], borrow)
			u[9], _ = bits.Sub64(u[9], v[9], borrow)

			// r = r - s
			r[0], borrow = bits.Sub64(r[0], s[0], 0)
			r[1], borrow = bits.Sub64(r[1], s[1], borrow)
			r[2], borrow = bits.Sub64(r[2], s[2], borrow)
			r[3], borrow = bits.Sub64(r[3], s[3], borrow)
			r[4], borrow = bits.Sub64(r[4], s[4], borrow)
			r[5], borrow = bits.Sub64(r[5], s[5], borrow)
			r[6], borrow = bits.Sub64(r[6], s[6], borrow)
			r[7], borrow = bits.Sub64(r[7], s[7], borrow)
			r[8], borrow = bits.Sub64(r[8], s[8], borrow)
			r[9], borrow = bits.Sub64(r[9], s[9], borrow)

			if borrow == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 15512955586897510413, 0)
				r[1], carry = bits.Add64(r[1], 4410884215886313276, carry)
				r[2], carry = bits.Add64(r[2], 15543556715411259941, carry)
				r[3], carry = bits.Add64(r[3], 9083347379620258823, carry)
				r[4], carry = bits.Add64(r[4], 13320134076191308873, carry)
				r[5], carry = bits.Add64(r[5], 9318693926755804304, carry)
				r[6], carry = bits.Add64(r[6], 5645674015335635503, carry)
				r[7], carry = bits.Add64(r[7], 12176845843281334983, carry)
				r[8], carry = bits.Add64(r[8], 18165857675053050549, carry)
				r[9], _ = bits.Add64(r[9], 82862755739295587, carry)

			}
		}
		if (u[0] == 1) && (u[9]|u[8]|u[7]|u[6]|u[5]|u[4]|u[3]|u[2]|u[1]) == 0 {
			z.Set(&r)
			return z
		}
		if (v[0] == 1) && (v[9]|v[8]|v[7]|v[6]|v[5]|v[4]|v[3]|v[2]|v[1]) == 0 {
			z.Set(&s)
			return z
		}
	}

}
