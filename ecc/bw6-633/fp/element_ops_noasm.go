//go:build !amd64
// +build !amd64

// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fp

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

// MulBy3 x *= 3
func MulBy3(x *Element) {
	mulByConstant(x, 3)
}

// MulBy5 x *= 5
func MulBy5(x *Element) {
	mulByConstant(x, 5)
}

// MulBy13 x *= 13
func MulBy13(x *Element) {
	mulByConstant(x, 13)
}

// Butterfly sets
// a = a + b
// b = a - b
func Butterfly(a, b *Element) {
	_butterflyGeneric(a, b)
}

func mul(z, x, y *Element) {
	_mulGeneric(z, x, y)
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func fromMont(z *Element) {
	_fromMontGeneric(z)
}

func add(z, x, y *Element) {
	_addGeneric(z, x, y)
}

func double(z, x *Element) {
	_doubleGeneric(z, x)
}

func sub(z, x, y *Element) {
	_subGeneric(z, x, y)
}

func neg(z, x *Element) {
	_negGeneric(z, x)
}

func reduce(z *Element) {
	_reduceGeneric(z)
}

// Select is a constant-time conditional move.
// If c=0, z = x0. Else z = x1
func (z *Element) Select(c int64, x0 *Element, x1 *Element) {
	cC := uint64((c | -c) >> 63) // "canonicized" into: 0 if c=0, -1 otherwise
	z[0] = x0[0] ^ cC&(x0[0]^x1[0])
	z[1] = x0[1] ^ cC&(x0[1]^x1[1])
	z[2] = x0[2] ^ cC&(x0[2]^x1[2])
	z[3] = x0[3] ^ cC&(x0[3]^x1[3])
	z[4] = x0[4] ^ cC&(x0[4]^x1[4])
	z[5] = x0[5] ^ cC&(x0[5]^x1[5])
	z[6] = x0[6] ^ cC&(x0[6]^x1[6])
	z[7] = x0[7] ^ cC&(x0[7]^x1[7])
	z[8] = x0[8] ^ cC&(x0[8]^x1[8])
	z[9] = x0[9] ^ cC&(x0[9]^x1[9])
}
