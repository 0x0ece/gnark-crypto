// +build gofuzz

// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package bls12377

import (
	"github.com/consensys/gnark-crypto/ecc/bls12-377/fp"
	"github.com/consensys/gnark-crypto/ecc/bls12-377/fr"
)

const (
	fuzzInteresting = 1
	fuzzNormal      = 0
	fuzzDiscard     = -1
)

func Fuzz(data []byte) int {
	// wip, to test continuous fuzzing infra, we compare the result of field element multiplicaiton
	// in assembly and generic impl
	middle := len(data) / 2
	// fr.Element
	{
		var a, b, c fr.Element
		var _a, _b, _c fr.Element
		a.SetBytes(data[:middle])
		_a.SetBytes(data[:middle])
		b.SetBytes(data[middle:])
		_b.SetBytes(data[middle:])

		c.Mul(&a, &b)
		fr.MulGeneric(&_c, &_a, &_b)

		if !c.Equal(&_c) {
			panic("mul asm != mul generic on bls12-377/fr")
		}
	}

	// fp.Element
	{
		var a, b, c fp.Element
		var _a, _b, _c fp.Element
		a.SetBytes(data[:middle])
		_a.SetBytes(data[:middle])
		b.SetBytes(data[middle:])
		_b.SetBytes(data[middle:])

		c.Mul(&a, &b)
		fp.MulGeneric(&_c, &_a, &_b)

		if !c.Equal(&_c) {
			panic("mul asm != mul generic on bls12-377/fp")
		}
	}

	return fuzzNormal

}
