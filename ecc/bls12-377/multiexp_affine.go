// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package bls12377

import (
	// "log"
	"time"
	"errors"
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark-crypto/ecc/bls12-377/fp"
	"github.com/consensys/gnark-crypto/ecc/bls12-377/fr"
	"math"
	"runtime"
)

// MultiExp implements section 4 of https://eprint.iacr.org/2012/549.pdf
//
// This call return an error if len(scalars) != len(points) or if provided config is invalid.
func (p *G1Affine) MultiExpBatchAffine(points []G1Affine, scalars []fr.Element, config ecc.MultiExpConfig) (*G1Affine, error) {
	var _p G1Jac
	if _, err := _p.MultiExpBatchAffine(points, scalars, config); err != nil {
		return nil, err
	}
	p.FromJacobian(&_p)
	return p, nil
}

// MultiExp implements section 4 of https://eprint.iacr.org/2012/549.pdf
//
// This call return an error if len(scalars) != len(points) or if provided config is invalid.
func (p *G1Jac) MultiExpBatchAffine(points []G1Affine, scalars []fr.Element, config ecc.MultiExpConfig) (*G1Jac, error) {
	// note:
	// each of the batchAffineMsmCX method is the same, except for the c constant it declares
	// duplicating (through template generation) these methods allows to declare the buckets on the stack
	// the choice of c needs to be improved:
	// there is a theoritical value that gives optimal asymptotics
	// but in practice, other factors come into play, including:
	// * if c doesn't divide 64, the word size, then we're bound to select bits over 2 words of our scalars, instead of 1
	// * number of CPUs
	// * cache friendliness (which depends on the host, G1 or G2... )
	//	--> for example, on BN254, a G1 point fits into one cache line of 64bytes, but a G2 point don't.

	// for each batchAffineMsmCX
	// step 1
	// we compute, for each scalars over c-bit wide windows, nbChunk digits
	// if the digit is larger than 2^{c-1}, then, we borrow 2^c from the next window and substract
	// 2^{c} to the current digit, making it negative.
	// negative digits will be processed in the next step as adding -G into the bucket instead of G
	// (computing -G is cheap, and this saves us half of the buckets)
	// step 2
	// buckets are declared on the stack
	// notice that we have 2^{c-1} buckets instead of 2^{c} (see step1)
	// we use jacobian extended formulas here as they are faster than mixed addition
	// msmProcessChunk places points into buckets base on their selector and return the weighted bucket sum in given channel
	// step 3
	// reduce the buckets weigthed sums into our result (msmReduceChunk)

	// ensure len(points) == len(scalars)
	nbPoints := len(points)
	if nbPoints != len(scalars) {
		return nil, errors.New("len(points) != len(scalars)")
	}

	// if nbTasks is not set, use all available CPUs
	if config.NbTasks <= 0 {
		config.NbTasks = runtime.NumCPU()
	} else if config.NbTasks > 1024 {
		return nil, errors.New("invalid config: config.NbTasks > 1024")
	}

	// here, we compute the best C for nbPoints
	// we split recursively until nbChunks(c) >= nbTasks,
	bestC := func(nbPoints int) uint64 {
		// implemented batchAffineMsmC methods (the c we use must be in this slice)
		implementedCs := []uint64{16, 20}
		var C uint64
		// approximate cost (in group operations)
		// cost = bits/c * (nbPoints + 2^{c})
		// this needs to be verified empirically.
		// for example, on a MBP 2016, for G2 MultiExp > 8M points, hand picking c gives better results
		min := math.MaxFloat64
		for _, c := range implementedCs {
			cc := fr.Limbs * 64 * (nbPoints + (1 << (c)))
			cost := float64(cc) / float64(c)
			if cost < min {
				min = cost
				C = c
			}
		}
		// empirical, needs to be tuned.
		// if C > 16 && nbPoints < 1 << 23 {
		// 	C = 16
		// }
		return C
	}

	var C uint64
	nbSplits := 1
	nbChunks := 0
	for nbChunks < config.NbTasks {
		C = bestC(nbPoints)
		nbChunks = int(fr.Limbs * 64 / C) // number of c-bit radixes in a scalar
		if (fr.Limbs*64)%C != 0 {
			nbChunks++
		}
		nbChunks *= nbSplits
		if nbChunks < config.NbTasks {
			nbSplits <<= 1
			nbPoints >>= 1
		}
	}

	// partition the scalars
	// note: we do that before the actual chunk processing, as for each c-bit window (starting from LSW)
	// if it's larger than 2^{c-1}, we have a carry we need to propagate up to the higher window
	var smallValues int
	scalars, smallValues = partitionScalars(scalars, C, config.ScalarsMont, config.NbTasks)

	// if we have more than 10% of small values, we split the processing of the first chunk in 2
	// we may want to do that in msmInnerG1JacBatchAffine , but that would incur a cost of looping through all scalars one more time
	splitFirstChunk := (float64(smallValues) / float64(len(scalars))) >= 0.1

	// we have nbSplits intermediate results that we must sum together.
	_p := make([]G1Jac, nbSplits-1)
	chDone := make(chan int, nbSplits-1)
	for i := 0; i < nbSplits-1; i++ {
		start := i * nbPoints
		end := start + nbPoints
		go func(start, end, i int) {
			msmInnerG1JacBatchAffine(&_p[i], int(C), points[start:end], scalars[start:end], splitFirstChunk)
			chDone <- i
		}(start, end, i)
	}

	msmInnerG1JacBatchAffine(p, int(C), points[(nbSplits-1)*nbPoints:], scalars[(nbSplits-1)*nbPoints:], splitFirstChunk)
	for i := 0; i < nbSplits-1; i++ {
		done := <-chDone
		p.AddAssign(&_p[done])
	}
	close(chDone)
	return p, nil
}

func msmInnerG1JacBatchAffine(p *G1Jac, c int, points []G1Affine, scalars []fr.Element, splitFirstChunk bool) {

	switch c {

	case 16:
		p.batchAffineMsmC16(points, scalars, splitFirstChunk)

	case 20:
		p.batchAffineMsmC20(points, scalars, splitFirstChunk)

	default:
		panic("not implemented")
	}
}

// msmReduceChunkG1AffineBatchAffine reduces the weighted sum of the buckets into the result of the multiExp
func msmReduceChunkG1AffineBatchAffine(p *G1Jac, c int, chChunks []chan g1JacExtended) *G1Jac {
	var _p g1JacExtended
	totalj := <-chChunks[len(chChunks)-1]
	_p.Set(&totalj)
	for j := len(chChunks) - 2; j >= 0; j-- {
		for l := 0; l < c; l++ {
			_p.double(&_p)
		}
		totalj := <-chChunks[j]
		_p.add(&totalj)
	}

	return p.unsafeFromJacExtended(&_p)
}

// batch inversion
// similar to fp.BatchInvert, ignores edge cases
func BatchInvert(res *[BATCH_SIZE]fp.Element, a [BATCH_SIZE]fp.Element, n int) {

	// zeroes := make([]bool, n)
	accumulator := fp.One()

	for i := 0; i < n; i++ {
		// if a[i].IsZero() {
		// 	zeroes[i] = true
		// 	continue
		// }
		res[i] = accumulator
		accumulator.Mul(&accumulator, &a[i])
	}

	accumulator.Inverse(&accumulator)

	for i := n - 1; i >= 0; i-- {
		// if zeroes[i] {
		// 	continue
		// }
		res[i].Mul(&res[i], &accumulator)
		accumulator.Mul(&accumulator, &a[i])
	}
}

// batch add/dbl in affine coordinates
// using batch inversion
// cost add: 5*batchSize M + 1I, dbl: +1M
func BatchAdd(R []*G1Affine, P []*G1Affine, batchSize int) {
	if batchSize == 0 {
		return
	}
	var isDbl [BATCH_SIZE]bool
	var lambda [BATCH_SIZE]fp.Element
	var lambdain [BATCH_SIZE]fp.Element
	var d fp.Element
	var rr G1Affine

	for j := 0; j < batchSize; j++ {
		// detect dbl vs add
		if P[j].X.Equal(&R[j].X) {
			if P[j].Y.Equal(&R[j].Y) {
				isDbl[j] = true
			}
		}
		// compute denominator
		if isDbl[j] {
			lambdain[j].Double(&P[j].Y)
		} else {
			lambdain[j].Sub(&P[j].X, &R[j].X)
		}
	}

	// invert denominator
	BatchInvert(&lambda, lambdain, batchSize)

	for j := 0; j < batchSize; j++ {
		// computa lambda, distinguishing dbl / add
		if isDbl[j] {
			d.Square(&P[j].X)
			lambda[j].Mul(&lambda[j], &d)
			d.Double(&lambda[j])
			lambda[j].Add(&lambda[j], &d)
		} else {
			d.Sub(&P[j].Y, &R[j].Y)
			lambda[j].Mul(&lambda[j], &d)
		}

		// compute X, Y
		rr.X.Square(&lambda[j])
		rr.X.Sub(&rr.X, &R[j].X)
		rr.X.Sub(&rr.X, &P[j].X)
		d.Sub(&R[j].X, &rr.X)
		rr.Y.Mul(&lambda[j], &d)
		rr.Y.Sub(&rr.Y, &R[j].Y)
		R[j].Set(&rr)
	}
}


type queuedItem struct {
	pointId uint32
	scalar uint32
}
func (item *queuedItem) sgn() bool {
    return (item.scalar & 0x1) == 0x1
}
func (item *queuedItem) bucketId() uint32 {
    return item.scalar >> 1
}
func (item *queuedItem) setScalar(bucketId uint32, sgn bool) {
    item.scalar = bucketId << 1
	if sgn {
		item.scalar++
	}
}


type PointIdType uint32
type schedItem struct {
	pointId PointIdType
	packedScalar uint32
}

type batchSchedItem struct {
	buckets []*G1Affine
	points []*G1Affine
	len int
}

const BATCH_SIZE = 100;
func newBatchScheduler(
	buckets []G1Affine,
	points []G1Affine,
	scalars []fr.Element,
	s selector,
	c uint64,
	chunk uint64) func() *batchSchedItem {

	queue := make([]*schedItem, 0, 4096) // queue for conflicting points
	BatchSize := BATCH_SIZE // actual max batch size
	if c <= 16 {
		BatchSize = 40
	}

	msbWindow := uint64(1 << (c - 1))
	i := -1 // idx to iterate over points
	q := -1 // idx to iterate over queue, after points
	fetchFromInput := true // whether to get iterate from points or queue

	type Stats struct {
		enqueue int
		// dequeue int
		maxQueueLen int
		numQueuePasses int
		// endQueueLen int
		// minBatchWhilePoints int
		// minBatch int
		// endBatchNum int
		batchNum int
		// fullBatches int
		avgBatchSize float64
		elapsed time.Duration
	}
	stats := Stats{}
	start := time.Now()

	// iterator on points/scalars
	var nextPoint = func() *schedItem {
		for i++; i < len(scalars); i++ {
			// extract the bits
			bits := (scalars[i][s.index] & s.mask) >> s.shift
			if s.multiWordSelect {
				bits += (scalars[i][s.index+1] & s.maskHigh) << s.shiftHigh
			}

			if bits == 0 {
				continue
			}

			if bits & msbWindow == 0 {
				// add
				bucketId := uint32(bits-1)
				if buckets[bucketId].IsInfinity() {
					buckets[bucketId].Set(&points[i])
					continue	
				}
				return &schedItem{
					pointId: PointIdType(i),
					packedScalar: (bucketId << 1) + 1,
				}
			} else {
				// sub
				bucketId := uint32(bits & ^msbWindow)
				if buckets[bucketId].IsInfinity() {
					buckets[bucketId].Neg(&points[i])
					continue	
				}
				return &schedItem{
					pointId: PointIdType(i),
					packedScalar: bucketId << 1,
				}
			}
		}
		return nil
	}

	// batch handler
	// it deals with trivial cases
	var batchBuckets, batchPoints [BATCH_SIZE]*G1Affine
	var negPoints [BATCH_SIZE]G1Affine
	var bucketIds [BATCH_SIZE]uint32

	var addToCurrentBatch = func(pos int, item *schedItem) (bool, bool) {
		bucketId := item.packedScalar >> 1
		bucket := &buckets[bucketId]
		point := &points[item.pointId]

		// collision detection
		for i := 0; i < pos; i++ {
			if bucketId == bucketIds[i] {
				return false, true
			}
		}

		if (item.packedScalar % 2) == 1 {
			// bucket = 0 => bucket := P
			if bucket.IsInfinity() {
				bucket.Set(point)
				return false, false
			}
			// bucket = -P => bucket := 0
			if bucket.X.Equal(&point.X) && !(bucket.Y.Equal(&point.Y)) {
				bucket.X.SetZero()
				bucket.Y.SetZero()
				return false, false
			}
			// else, add P to the batch
			batchPoints[pos] = point
		} else {
			// bucket = 0 => bucket := -P
			if bucket.IsInfinity() {
				bucket.Neg(point)
				return false, false
			}
			// bucket = P => bucket := 0
			if bucket.Equal(point) {
				bucket.X.SetZero()
				bucket.Y.SetZero()
				return false, false
			}
			// else, add -P to the batch
			negPoints[pos].Neg(point)
			batchPoints[pos] = &negPoints[pos]
		}
		batchBuckets[pos] = bucket
		bucketIds[pos] = uint32(bucketId)
		return true, false
	}

	// queue manager
	var nextQueue = func() *schedItem {
		for q++; q < len(queue); q++ {
			return queue[q]
		}
		stats.numQueuePasses++
		q--
		return nil
	}

	// scheduler
	curBatch := 0
	var preBatch [BATCH_SIZE]*schedItem
	var item *schedItem

	return func() *batchSchedItem {
		curBatch++

		// fetch BatchSize points, possibly with conflicts
		batchIdx := 0
		for batchIdx = 0; batchIdx < BatchSize; batchIdx++ {
			if fetchFromInput {
				// fetch from input points/scalars
				item = nextPoint()
			} else {
				// fetch from queue
				item = nextQueue()
			}
			// when there's no more points, close the batch
			// note: below we may enqueue more points
			if item == nil {
				// switch from input to queue
				fetchFromInput = false
				break
			}
			preBatch[batchIdx] = item
		}

		// if the batch is empty, we're done
		if batchIdx == 0 {
			stats.avgBatchSize /= float64(curBatch)
			stats.maxQueueLen = len(queue)
			stats.batchNum = curBatch
			stats.elapsed = time.Since(start)
			// log.Println(c, chunk, stats)
			return nil
		}

		// prepare final batch, removing conflicts and trivial cases
		count := 0
		for j := 0; j < batchIdx; j++ {
			isAdded, isConflict := addToCurrentBatch(count, preBatch[j])
			if isConflict {
				// enqueue
				queue = append(queue, preBatch[j])
				stats.enqueue++
			}
			if isAdded {
				// count the actual number of points in the batch
				count++
			}
		}

		// return the batch
		stats.avgBatchSize += float64(count)
		return &batchSchedItem{
			buckets: batchBuckets[:],
			points: batchPoints[:],
			len: count,
		}
	}
}


func msmProcessChunkG1AffineBatchAffine(chunk uint64,
	chRes chan<- g1JacExtended,
	buckets []G1Affine,
	c uint64,
	points []G1Affine,
	scalars []fr.Element) {

	mask := uint64((1 << c) - 1) // low c bits are 1

	jc := uint64(chunk * c)
	s := selector{}
	s.index = jc / 64
	s.shift = jc - (s.index * 64)
	s.mask = mask << s.shift
	s.multiWordSelect = (64%c) != 0 && s.shift > (64-c) && s.index < (fr.Limbs-1)
	if s.multiWordSelect {
		nbBitsHigh := s.shift - uint64(64-c)
		s.maskHigh = (1 << nbBitsHigh) - 1
		s.shiftHigh = (c - nbBitsHigh)
	}

	sched := newBatchScheduler(buckets, points, scalars, s, c, chunk)
	for batch := sched(); batch != nil; batch = sched() {
		// if chunk == 0 {
		// 	log.Println(batch)
		// }
		BatchAdd(batch.buckets, batch.points, batch.len)
		// for i := 0; i < batch.len; i++ {
		// 	batch.buckets[i].Add(batch.buckets[i], batch.points[i])
		// }
	}

	// reduce buckets into total
	// total =  bucket[0] + 2*bucket[1] + 3*bucket[2] ... + n*bucket[n-1]

	var runningSum, total g1JacExtended
	runningSum.setInfinity()
	total.setInfinity()
	for k := len(buckets) - 1; k >= 0; k-- {
		if !buckets[k].IsInfinity() {
			runningSum.addMixed(&buckets[k])
		}
		total.add(&runningSum)
	}

	chRes <- total
}

type schedItemNaive struct {
	sgn bool
	pointId int
	bucketId uint64
}

func newNaiveScheduler(scalars []fr.Element, s selector, c uint64) func() *schedItemNaive {
	i := -1
	msbWindow := uint64(1 << (c - 1))

	return func() *schedItemNaive {
		for i++; i < len(scalars); i++ {
			bits := (scalars[i][s.index] & s.mask) >> s.shift
			if s.multiWordSelect {
				bits += (scalars[i][s.index+1] & s.maskHigh) << s.shiftHigh
			}

			if bits == 0 {
				continue 
			}

			if bits&msbWindow == 0 {
				// add
				return &schedItemNaive{
					sgn: true,
					pointId: i,
					bucketId: bits-1,
				}
			} else {
				// sub
				return &schedItemNaive{
					sgn: false,
					pointId: i,
					bucketId: bits & ^msbWindow,
				}
			}
		}
		return nil
	}
}

func msmProcessChunkG1AffineWithScheduler(chunk uint64,
	chRes chan<- g1JacExtended,
	buckets []G1Affine,
	c uint64,
	points []G1Affine,
	scalars []fr.Element) {

	mask := uint64((1 << c) - 1) // low c bits are 1

	jc := uint64(chunk * c)
	s := selector{}
	s.index = jc / 64
	s.shift = jc - (s.index * 64)
	s.mask = mask << s.shift
	s.multiWordSelect = (64%c) != 0 && s.shift > (64-c) && s.index < (fr.Limbs-1)
	if s.multiWordSelect {
		nbBitsHigh := s.shift - uint64(64-c)
		s.maskHigh = (1 << nbBitsHigh) - 1
		s.shiftHigh = (c - nbBitsHigh)
	}

	// for each scalars, get the digit corresponding to the chunk we're processing.
	sched := newNaiveScheduler(scalars, s, c)
	for item := sched(); item != nil; item = sched() {
		if item.sgn {
			buckets[item.bucketId].Add(&buckets[item.bucketId], &points[item.pointId])
		} else {
			buckets[item.bucketId].Sub(&buckets[item.bucketId], &points[item.pointId])
		}
	}

	// reduce buckets into total
	// total =  bucket[0] + 2*bucket[1] + 3*bucket[2] ... + n*bucket[n-1]

	var runningSum, total g1JacExtended
	runningSum.setInfinity()
	total.setInfinity()
	for k := len(buckets) - 1; k >= 0; k-- {
		if !buckets[k].IsInfinity() {
			runningSum.addMixed(&buckets[k])
		}
		total.add(&runningSum)
	}

	chRes <- total
}

func (p *G1Jac) batchAffineMsmC16(points []G1Affine, scalars []fr.Element, splitFirstChunk bool) *G1Jac {
	const (
		c        = 16                  // scalars partitioned into c-bit radixes
		nbChunks = (fr.Limbs * 64 / c) // number of c-bit radixes in a scalar
	)

	// for each chunk, spawn one go routine that'll loop through all the scalars in the
	// corresponding bit-window
	// note that buckets is an array allocated on the stack (for most sizes of c) and this is
	// critical for performance

	// each go routine sends its result in chChunks[i] channel
	var chChunks [nbChunks]chan g1JacExtended
	for i := 0; i < len(chChunks); i++ {
		chChunks[i] = make(chan g1JacExtended, 1)
	}

	processChunk := func(j int, points []G1Affine, scalars []fr.Element, chChunk chan g1JacExtended) {
		var buckets [1 << (c - 1)]G1Affine
		msmProcessChunkG1AffineBatchAffine(uint64(j), chChunk, buckets[:], c, points, scalars)
	}

	for j := int(nbChunks - 1); j > 0; j-- {
		go processChunk(j, points, scalars, chChunks[j])
	}

	if !splitFirstChunk {
		go processChunk(0, points, scalars, chChunks[0])
	} else {
		chSplit := make(chan g1JacExtended, 2)
		split := len(points) / 2
		go processChunk(0, points[:split], scalars[:split], chSplit)
		go processChunk(0, points[split:], scalars[split:], chSplit)
		go func() {
			s1 := <-chSplit
			s2 := <-chSplit
			close(chSplit)
			s1.add(&s2)
			chChunks[0] <- s1
		}()
	}

	return msmReduceChunkG1AffineBatchAffine(p, c, chChunks[:])
}

func (p *G1Jac) batchAffineMsmC20(points []G1Affine, scalars []fr.Element, splitFirstChunk bool) *G1Jac {
	const (
		c        = 20                  // scalars partitioned into c-bit radixes
		nbChunks = (fr.Limbs * 64 / c) // number of c-bit radixes in a scalar
	)

	// for each chunk, spawn one go routine that'll loop through all the scalars in the
	// corresponding bit-window
	// note that buckets is an array allocated on the stack (for most sizes of c) and this is
	// critical for performance

	// each go routine sends its result in chChunks[i] channel
	var chChunks [nbChunks + 1]chan g1JacExtended
	for i := 0; i < len(chChunks); i++ {
		chChunks[i] = make(chan g1JacExtended, 1)
	}

	// c doesn't divide 256, last window is smaller we can allocate less buckets
	const lastC = (fr.Limbs * 64) - (c * (fr.Limbs * 64 / c))
	go func(j uint64, points []G1Affine, scalars []fr.Element) {
		var buckets [1 << (lastC - 1)]G1Affine
		msmProcessChunkG1AffineBatchAffine(j, chChunks[j], buckets[:], lastC, points, scalars)
	}(uint64(nbChunks), points, scalars)

	processChunk := func(j int, points []G1Affine, scalars []fr.Element, chChunk chan g1JacExtended) {
		var buckets [1 << (c - 1)]G1Affine
		msmProcessChunkG1AffineBatchAffine(uint64(j), chChunk, buckets[:], c, points, scalars)
	}

	for j := int(nbChunks - 1); j > 0; j-- {
		go processChunk(j, points, scalars, chChunks[j])
	}

	if !splitFirstChunk {
		go processChunk(0, points, scalars, chChunks[0])
	} else {
		chSplit := make(chan g1JacExtended, 2)
		split := len(points) / 2
		go processChunk(0, points[:split], scalars[:split], chSplit)
		go processChunk(0, points[split:], scalars[split:], chSplit)
		go func() {
			s1 := <-chSplit
			s2 := <-chSplit
			close(chSplit)
			s1.add(&s2)
			chChunks[0] <- s1
		}()
	}

	return msmReduceChunkG1AffineBatchAffine(p, c, chChunks[:])
}
