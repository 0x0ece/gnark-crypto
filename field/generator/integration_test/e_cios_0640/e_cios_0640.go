// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package integration

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

import (
	"crypto/rand"
	"encoding/binary"
	"errors"
	"io"
	"math/big"
	"math/bits"
	"reflect"
	"strconv"
	"sync"
)

// e_cios_0640 represents a field element stored on 10 words (uint64)
// e_cios_0640 are assumed to be in Montgomery form in all methods
// field modulus q =
//
// 4329619858706557839543669775087120067850925184531364385800501021076225412731270113725642446554999539209302406496702242097277456271663802797759309974306520764833361620696288243659333605712923833
type e_cios_0640 [10]uint64

// Limbs number of 64 bits words needed to represent e_cios_0640
const Limbs = 10

// Bits number bits needed to represent e_cios_0640
const Bits = 640

// Bytes number bytes needed to represent e_cios_0640
const Bytes = Limbs * 8

// field modulus stored as big.Int
var _modulus big.Int

// Modulus returns q as a big.Int
// q =
//
// 4329619858706557839543669775087120067850925184531364385800501021076225412731270113725642446554999539209302406496702242097277456271663802797759309974306520764833361620696288243659333605712923833
func Modulus() *big.Int {
	return new(big.Int).Set(&_modulus)
}

// q (modulus)
var qe_cios_0640 = e_cios_0640{
	2079110225317268665,
	16154779454735111627,
	10168543766142768429,
	7204508108994786691,
	17359680726713688658,
	4403005955245659540,
	4030693491484495352,
	18210705511180458043,
	2823418929722774645,
	17505409092126403933,
}

// rSquare
var rSquare = e_cios_0640{
	12957957768346294627,
	7701145010578911412,
	12764652011610368834,
	15568212526156393580,
	3781865473384501913,
	15703895073545971783,
	7163354369232203406,
	1832699535246571984,
	16889164205916379181,
	240526428144082229,
}

var bigIntPool = sync.Pool{
	New: func() interface{} {
		return new(big.Int)
	},
}

func init() {
	_modulus.SetString("4329619858706557839543669775087120067850925184531364385800501021076225412731270113725642446554999539209302406496702242097277456271663802797759309974306520764833361620696288243659333605712923833", 10)
}

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *e_cios_0640) SetUint64(v uint64) *e_cios_0640 {
	*z = e_cios_0640{v}
	return z.Mul(z, &rSquare) // z.ToMont()
}

// Set z = x
func (z *e_cios_0640) Set(x *e_cios_0640) *e_cios_0640 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	return z
}

// SetInterface converts provided interface into e_cios_0640
// returns an error if provided type is not supported
// supported types: e_cios_0640, *e_cios_0640, uint64, int, string (interpreted as base10 integer),
// *big.Int, big.Int, []byte
func (z *e_cios_0640) SetInterface(i1 interface{}) (*e_cios_0640, error) {
	switch c1 := i1.(type) {
	case e_cios_0640:
		return z.Set(&c1), nil
	case *e_cios_0640:
		return z.Set(c1), nil
	case uint64:
		return z.SetUint64(c1), nil
	case int:
		return z.SetString(strconv.Itoa(c1)), nil
	case string:
		return z.SetString(c1), nil
	case *big.Int:
		return z.SetBigInt(c1), nil
	case big.Int:
		return z.SetBigInt(&c1), nil
	case []byte:
		return z.SetBytes(c1), nil
	default:
		return nil, errors.New("can't set integration.e_cios_0640 from type " + reflect.TypeOf(i1).String())
	}
}

// SetZero z = 0
func (z *e_cios_0640) SetZero() *e_cios_0640 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *e_cios_0640) SetOne() *e_cios_0640 {
	z[0] = 16367633848392282951
	z[1] = 2291964618974439988
	z[2] = 8278200307566783186
	z[3] = 11242235964714764924
	z[4] = 1087063346995862957
	z[5] = 14043738118463892075
	z[6] = 14416050582225056263
	z[7] = 236038562529093572
	z[8] = 15623325143986776970
	z[9] = 941334981583147682
	return z
}

// Div z = x*y^-1 mod q
func (z *e_cios_0640) Div(x, y *e_cios_0640) *e_cios_0640 {
	var yInv e_cios_0640
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Bit returns the i'th bit, with lsb == bit 0.
// It is the responsability of the caller to convert from Montgomery to Regular form if needed
func (z *e_cios_0640) Bit(i uint64) uint64 {
	j := i / 64
	if j >= 10 {
		return 0
	}
	return uint64(z[j] >> (i % 64) & 1)
}

// Equal returns z == x
func (z *e_cios_0640) Equal(x *e_cios_0640) bool {
	return (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *e_cios_0640) IsZero() bool {
	return (z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// IsUint64 returns true if z[0] >= 0 and all other words are 0
func (z *e_cios_0640) IsUint64() bool {
	return (z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1]) == 0
}

// Cmp compares (lexicographic order) z and x and returns:
//
//   -1 if z <  x
//    0 if z == x
//   +1 if z >  x
//
func (z *e_cios_0640) Cmp(x *e_cios_0640) int {
	_z := *z
	_x := *x
	_z.FromMont()
	_x.FromMont()
	if _z[9] > _x[9] {
		return 1
	} else if _z[9] < _x[9] {
		return -1
	}
	if _z[8] > _x[8] {
		return 1
	} else if _z[8] < _x[8] {
		return -1
	}
	if _z[7] > _x[7] {
		return 1
	} else if _z[7] < _x[7] {
		return -1
	}
	if _z[6] > _x[6] {
		return 1
	} else if _z[6] < _x[6] {
		return -1
	}
	if _z[5] > _x[5] {
		return 1
	} else if _z[5] < _x[5] {
		return -1
	}
	if _z[4] > _x[4] {
		return 1
	} else if _z[4] < _x[4] {
		return -1
	}
	if _z[3] > _x[3] {
		return 1
	} else if _z[3] < _x[3] {
		return -1
	}
	if _z[2] > _x[2] {
		return 1
	} else if _z[2] < _x[2] {
		return -1
	}
	if _z[1] > _x[1] {
		return 1
	} else if _z[1] < _x[1] {
		return -1
	}
	if _z[0] > _x[0] {
		return 1
	} else if _z[0] < _x[0] {
		return -1
	}
	return 0
}

// LexicographicallyLargest returns true if this element is strictly lexicographically
// larger than its negation, false otherwise
func (z *e_cios_0640) LexicographicallyLargest() bool {
	// adapted from github.com/zkcrypto/bls12_381
	// we check if the element is larger than (q-1) / 2
	// if z - (((q -1) / 2) + 1) have no underflow, then z > (q-1) / 2

	_z := *z
	_z.FromMont()

	var b uint64
	_, b = bits.Sub64(_z[0], 10262927149513410141, 0)
	_, b = bits.Sub64(_z[1], 17300761764222331621, b)
	_, b = bits.Sub64(_z[2], 14307643919926160022, b)
	_, b = bits.Sub64(_z[3], 3602254054497393345, b)
	_, b = bits.Sub64(_z[4], 8679840363356844329, b)
	_, b = bits.Sub64(_z[5], 2201502977622829770, b)
	_, b = bits.Sub64(_z[6], 11238718782597023484, b)
	_, b = bits.Sub64(_z[7], 18328724792445004829, b)
	_, b = bits.Sub64(_z[8], 10635081501716163130, b)
	_, b = bits.Sub64(_z[9], 8752704546063201966, b)

	return b == 0
}

// SetRandom sets z to a random element < q
func (z *e_cios_0640) SetRandom() (*e_cios_0640, error) {
	var bytes [80]byte
	if _, err := io.ReadFull(rand.Reader, bytes[:]); err != nil {
		return nil, err
	}
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[9] %= 17505409092126403933

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 17505409092126403933 || (z[9] == 17505409092126403933 && (z[8] < 2823418929722774645 || (z[8] == 2823418929722774645 && (z[7] < 18210705511180458043 || (z[7] == 18210705511180458043 && (z[6] < 4030693491484495352 || (z[6] == 4030693491484495352 && (z[5] < 4403005955245659540 || (z[5] == 4403005955245659540 && (z[4] < 17359680726713688658 || (z[4] == 17359680726713688658 && (z[3] < 7204508108994786691 || (z[3] == 7204508108994786691 && (z[2] < 10168543766142768429 || (z[2] == 10168543766142768429 && (z[1] < 16154779454735111627 || (z[1] == 16154779454735111627 && (z[0] < 2079110225317268665))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 2079110225317268665, 0)
		z[1], b = bits.Sub64(z[1], 16154779454735111627, b)
		z[2], b = bits.Sub64(z[2], 10168543766142768429, b)
		z[3], b = bits.Sub64(z[3], 7204508108994786691, b)
		z[4], b = bits.Sub64(z[4], 17359680726713688658, b)
		z[5], b = bits.Sub64(z[5], 4403005955245659540, b)
		z[6], b = bits.Sub64(z[6], 4030693491484495352, b)
		z[7], b = bits.Sub64(z[7], 18210705511180458043, b)
		z[8], b = bits.Sub64(z[8], 2823418929722774645, b)
		z[9], _ = bits.Sub64(z[9], 17505409092126403933, b)
	}

	return z, nil
}

// One returns 1 (in montgommery form)
func One() e_cios_0640 {
	var one e_cios_0640
	one.SetOne()
	return one
}

// Halve sets z to z / 2 (mod p)
func (z *e_cios_0640) Halve() {
	var twoInv e_cios_0640
	twoInv.SetOne().Double(&twoInv).Inverse(&twoInv)
	z.Mul(z, &twoInv)

}

// API with assembly impl

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *e_cios_0640) Mul(x, y *e_cios_0640) *e_cios_0640 {
	mul(z, x, y)
	return z
}

// Square z = x * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *e_cios_0640) Square(x *e_cios_0640) *e_cios_0640 {
	mul(z, x, x)
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *e_cios_0640) FromMont() *e_cios_0640 {
	fromMont(z)
	return z
}

// Add z = x + y mod q
func (z *e_cios_0640) Add(x, y *e_cios_0640) *e_cios_0640 {
	add(z, x, y)
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *e_cios_0640) Double(x *e_cios_0640) *e_cios_0640 {
	double(z, x)
	return z
}

// Sub  z = x - y mod q
func (z *e_cios_0640) Sub(x, y *e_cios_0640) *e_cios_0640 {
	sub(z, x, y)
	return z
}

// Neg z = q - x
func (z *e_cios_0640) Neg(x *e_cios_0640) *e_cios_0640 {
	neg(z, x)
	return z
}

// Generic (no ADX instructions, no AMD64) versions of multiplication and squaring algorithms

func _mulGeneric(z, x, y *e_cios_0640) {

	var t [11]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)
	C, t[4] = madd1(y[0], x[4], C)
	C, t[5] = madd1(y[0], x[5], C)
	C, t[6] = madd1(y[0], x[6], C)
	C, t[7] = madd1(y[0], x[7], C)
	C, t[8] = madd1(y[0], x[8], C)
	C, t[9] = madd1(y[0], x[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)
	C, t[4] = madd2(y[1], x[4], t[4], C)
	C, t[5] = madd2(y[1], x[5], t[5], C)
	C, t[6] = madd2(y[1], x[6], t[6], C)
	C, t[7] = madd2(y[1], x[7], t[7], C)
	C, t[8] = madd2(y[1], x[8], t[8], C)
	C, t[9] = madd2(y[1], x[9], t[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)
	C, t[4] = madd2(y[2], x[4], t[4], C)
	C, t[5] = madd2(y[2], x[5], t[5], C)
	C, t[6] = madd2(y[2], x[6], t[6], C)
	C, t[7] = madd2(y[2], x[7], t[7], C)
	C, t[8] = madd2(y[2], x[8], t[8], C)
	C, t[9] = madd2(y[2], x[9], t[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)
	C, t[4] = madd2(y[3], x[4], t[4], C)
	C, t[5] = madd2(y[3], x[5], t[5], C)
	C, t[6] = madd2(y[3], x[6], t[6], C)
	C, t[7] = madd2(y[3], x[7], t[7], C)
	C, t[8] = madd2(y[3], x[8], t[8], C)
	C, t[9] = madd2(y[3], x[9], t[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[4], x[0], t[0])
	C, t[1] = madd2(y[4], x[1], t[1], C)
	C, t[2] = madd2(y[4], x[2], t[2], C)
	C, t[3] = madd2(y[4], x[3], t[3], C)
	C, t[4] = madd2(y[4], x[4], t[4], C)
	C, t[5] = madd2(y[4], x[5], t[5], C)
	C, t[6] = madd2(y[4], x[6], t[6], C)
	C, t[7] = madd2(y[4], x[7], t[7], C)
	C, t[8] = madd2(y[4], x[8], t[8], C)
	C, t[9] = madd2(y[4], x[9], t[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[5], x[0], t[0])
	C, t[1] = madd2(y[5], x[1], t[1], C)
	C, t[2] = madd2(y[5], x[2], t[2], C)
	C, t[3] = madd2(y[5], x[3], t[3], C)
	C, t[4] = madd2(y[5], x[4], t[4], C)
	C, t[5] = madd2(y[5], x[5], t[5], C)
	C, t[6] = madd2(y[5], x[6], t[6], C)
	C, t[7] = madd2(y[5], x[7], t[7], C)
	C, t[8] = madd2(y[5], x[8], t[8], C)
	C, t[9] = madd2(y[5], x[9], t[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[6], x[0], t[0])
	C, t[1] = madd2(y[6], x[1], t[1], C)
	C, t[2] = madd2(y[6], x[2], t[2], C)
	C, t[3] = madd2(y[6], x[3], t[3], C)
	C, t[4] = madd2(y[6], x[4], t[4], C)
	C, t[5] = madd2(y[6], x[5], t[5], C)
	C, t[6] = madd2(y[6], x[6], t[6], C)
	C, t[7] = madd2(y[6], x[7], t[7], C)
	C, t[8] = madd2(y[6], x[8], t[8], C)
	C, t[9] = madd2(y[6], x[9], t[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[7], x[0], t[0])
	C, t[1] = madd2(y[7], x[1], t[1], C)
	C, t[2] = madd2(y[7], x[2], t[2], C)
	C, t[3] = madd2(y[7], x[3], t[3], C)
	C, t[4] = madd2(y[7], x[4], t[4], C)
	C, t[5] = madd2(y[7], x[5], t[5], C)
	C, t[6] = madd2(y[7], x[6], t[6], C)
	C, t[7] = madd2(y[7], x[7], t[7], C)
	C, t[8] = madd2(y[7], x[8], t[8], C)
	C, t[9] = madd2(y[7], x[9], t[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[8], x[0], t[0])
	C, t[1] = madd2(y[8], x[1], t[1], C)
	C, t[2] = madd2(y[8], x[2], t[2], C)
	C, t[3] = madd2(y[8], x[3], t[3], C)
	C, t[4] = madd2(y[8], x[4], t[4], C)
	C, t[5] = madd2(y[8], x[5], t[5], C)
	C, t[6] = madd2(y[8], x[6], t[6], C)
	C, t[7] = madd2(y[8], x[7], t[7], C)
	C, t[8] = madd2(y[8], x[8], t[8], C)
	C, t[9] = madd2(y[8], x[9], t[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[9], x[0], t[0])
	C, t[1] = madd2(y[9], x[1], t[1], C)
	C, t[2] = madd2(y[9], x[2], t[2], C)
	C, t[3] = madd2(y[9], x[3], t[3], C)
	C, t[4] = madd2(y[9], x[4], t[4], C)
	C, t[5] = madd2(y[9], x[5], t[5], C)
	C, t[6] = madd2(y[9], x[6], t[6], C)
	C, t[7] = madd2(y[9], x[7], t[7], C)
	C, t[8] = madd2(y[9], x[8], t[8], C)
	C, t[9] = madd2(y[9], x[9], t[9], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 1930386629241259639

	// -----------------------------------
	// Second loop
	C = madd0(m, 2079110225317268665, t[0])

	C, t[0] = madd2(m, 16154779454735111627, t[1], C)

	C, t[1] = madd2(m, 10168543766142768429, t[2], C)

	C, t[2] = madd2(m, 7204508108994786691, t[3], C)

	C, t[3] = madd2(m, 17359680726713688658, t[4], C)

	C, t[4] = madd2(m, 4403005955245659540, t[5], C)

	C, t[5] = madd2(m, 4030693491484495352, t[6], C)

	C, t[6] = madd2(m, 18210705511180458043, t[7], C)

	C, t[7] = madd2(m, 2823418929722774645, t[8], C)

	C, t[8] = madd3(m, 17505409092126403933, t[9], C, t[10])

	t[9], t[10] = bits.Add64(D, C, 0)

	if t[10] != 0 {
		// we need to reduce, we have a result on 11 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 2079110225317268665, 0)
		z[1], b = bits.Sub64(t[1], 16154779454735111627, b)
		z[2], b = bits.Sub64(t[2], 10168543766142768429, b)
		z[3], b = bits.Sub64(t[3], 7204508108994786691, b)
		z[4], b = bits.Sub64(t[4], 17359680726713688658, b)
		z[5], b = bits.Sub64(t[5], 4403005955245659540, b)
		z[6], b = bits.Sub64(t[6], 4030693491484495352, b)
		z[7], b = bits.Sub64(t[7], 18210705511180458043, b)
		z[8], b = bits.Sub64(t[8], 2823418929722774645, b)
		z[9], _ = bits.Sub64(t[9], 17505409092126403933, b)

		return

	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]
	z[4] = t[4]
	z[5] = t[5]
	z[6] = t[6]
	z[7] = t[7]
	z[8] = t[8]
	z[9] = t[9]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 17505409092126403933 || (z[9] == 17505409092126403933 && (z[8] < 2823418929722774645 || (z[8] == 2823418929722774645 && (z[7] < 18210705511180458043 || (z[7] == 18210705511180458043 && (z[6] < 4030693491484495352 || (z[6] == 4030693491484495352 && (z[5] < 4403005955245659540 || (z[5] == 4403005955245659540 && (z[4] < 17359680726713688658 || (z[4] == 17359680726713688658 && (z[3] < 7204508108994786691 || (z[3] == 7204508108994786691 && (z[2] < 10168543766142768429 || (z[2] == 10168543766142768429 && (z[1] < 16154779454735111627 || (z[1] == 16154779454735111627 && (z[0] < 2079110225317268665))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 2079110225317268665, 0)
		z[1], b = bits.Sub64(z[1], 16154779454735111627, b)
		z[2], b = bits.Sub64(z[2], 10168543766142768429, b)
		z[3], b = bits.Sub64(z[3], 7204508108994786691, b)
		z[4], b = bits.Sub64(z[4], 17359680726713688658, b)
		z[5], b = bits.Sub64(z[5], 4403005955245659540, b)
		z[6], b = bits.Sub64(z[6], 4030693491484495352, b)
		z[7], b = bits.Sub64(z[7], 18210705511180458043, b)
		z[8], b = bits.Sub64(z[8], 2823418929722774645, b)
		z[9], _ = bits.Sub64(z[9], 17505409092126403933, b)
	}
}

func _mulWGeneric(z, x *e_cios_0640, y uint64) {

	var t [10]uint64
	{
		// round 0
		c1, c0 := bits.Mul64(y, x[0])
		m := c0 * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, c0)
		c1, c0 = madd1(y, x[1], c1)
		c2, t[0] = madd2(m, 16154779454735111627, c2, c0)
		c1, c0 = madd1(y, x[2], c1)
		c2, t[1] = madd2(m, 10168543766142768429, c2, c0)
		c1, c0 = madd1(y, x[3], c1)
		c2, t[2] = madd2(m, 7204508108994786691, c2, c0)
		c1, c0 = madd1(y, x[4], c1)
		c2, t[3] = madd2(m, 17359680726713688658, c2, c0)
		c1, c0 = madd1(y, x[5], c1)
		c2, t[4] = madd2(m, 4403005955245659540, c2, c0)
		c1, c0 = madd1(y, x[6], c1)
		c2, t[5] = madd2(m, 4030693491484495352, c2, c0)
		c1, c0 = madd1(y, x[7], c1)
		c2, t[6] = madd2(m, 18210705511180458043, c2, c0)
		c1, c0 = madd1(y, x[8], c1)
		c2, t[7] = madd2(m, 2823418929722774645, c2, c0)
		c1, c0 = madd1(y, x[9], c1)
		t[9], t[8] = madd3(m, 17505409092126403933, c0, c2, c1)
	}
	{
		// round 1
		m := t[0] * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, t[0])
		c2, t[0] = madd2(m, 16154779454735111627, c2, t[1])
		c2, t[1] = madd2(m, 10168543766142768429, c2, t[2])
		c2, t[2] = madd2(m, 7204508108994786691, c2, t[3])
		c2, t[3] = madd2(m, 17359680726713688658, c2, t[4])
		c2, t[4] = madd2(m, 4403005955245659540, c2, t[5])
		c2, t[5] = madd2(m, 4030693491484495352, c2, t[6])
		c2, t[6] = madd2(m, 18210705511180458043, c2, t[7])
		c2, t[7] = madd2(m, 2823418929722774645, c2, t[8])
		t[9], t[8] = madd2(m, 17505409092126403933, t[9], c2)
	}
	{
		// round 2
		m := t[0] * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, t[0])
		c2, t[0] = madd2(m, 16154779454735111627, c2, t[1])
		c2, t[1] = madd2(m, 10168543766142768429, c2, t[2])
		c2, t[2] = madd2(m, 7204508108994786691, c2, t[3])
		c2, t[3] = madd2(m, 17359680726713688658, c2, t[4])
		c2, t[4] = madd2(m, 4403005955245659540, c2, t[5])
		c2, t[5] = madd2(m, 4030693491484495352, c2, t[6])
		c2, t[6] = madd2(m, 18210705511180458043, c2, t[7])
		c2, t[7] = madd2(m, 2823418929722774645, c2, t[8])
		t[9], t[8] = madd2(m, 17505409092126403933, t[9], c2)
	}
	{
		// round 3
		m := t[0] * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, t[0])
		c2, t[0] = madd2(m, 16154779454735111627, c2, t[1])
		c2, t[1] = madd2(m, 10168543766142768429, c2, t[2])
		c2, t[2] = madd2(m, 7204508108994786691, c2, t[3])
		c2, t[3] = madd2(m, 17359680726713688658, c2, t[4])
		c2, t[4] = madd2(m, 4403005955245659540, c2, t[5])
		c2, t[5] = madd2(m, 4030693491484495352, c2, t[6])
		c2, t[6] = madd2(m, 18210705511180458043, c2, t[7])
		c2, t[7] = madd2(m, 2823418929722774645, c2, t[8])
		t[9], t[8] = madd2(m, 17505409092126403933, t[9], c2)
	}
	{
		// round 4
		m := t[0] * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, t[0])
		c2, t[0] = madd2(m, 16154779454735111627, c2, t[1])
		c2, t[1] = madd2(m, 10168543766142768429, c2, t[2])
		c2, t[2] = madd2(m, 7204508108994786691, c2, t[3])
		c2, t[3] = madd2(m, 17359680726713688658, c2, t[4])
		c2, t[4] = madd2(m, 4403005955245659540, c2, t[5])
		c2, t[5] = madd2(m, 4030693491484495352, c2, t[6])
		c2, t[6] = madd2(m, 18210705511180458043, c2, t[7])
		c2, t[7] = madd2(m, 2823418929722774645, c2, t[8])
		t[9], t[8] = madd2(m, 17505409092126403933, t[9], c2)
	}
	{
		// round 5
		m := t[0] * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, t[0])
		c2, t[0] = madd2(m, 16154779454735111627, c2, t[1])
		c2, t[1] = madd2(m, 10168543766142768429, c2, t[2])
		c2, t[2] = madd2(m, 7204508108994786691, c2, t[3])
		c2, t[3] = madd2(m, 17359680726713688658, c2, t[4])
		c2, t[4] = madd2(m, 4403005955245659540, c2, t[5])
		c2, t[5] = madd2(m, 4030693491484495352, c2, t[6])
		c2, t[6] = madd2(m, 18210705511180458043, c2, t[7])
		c2, t[7] = madd2(m, 2823418929722774645, c2, t[8])
		t[9], t[8] = madd2(m, 17505409092126403933, t[9], c2)
	}
	{
		// round 6
		m := t[0] * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, t[0])
		c2, t[0] = madd2(m, 16154779454735111627, c2, t[1])
		c2, t[1] = madd2(m, 10168543766142768429, c2, t[2])
		c2, t[2] = madd2(m, 7204508108994786691, c2, t[3])
		c2, t[3] = madd2(m, 17359680726713688658, c2, t[4])
		c2, t[4] = madd2(m, 4403005955245659540, c2, t[5])
		c2, t[5] = madd2(m, 4030693491484495352, c2, t[6])
		c2, t[6] = madd2(m, 18210705511180458043, c2, t[7])
		c2, t[7] = madd2(m, 2823418929722774645, c2, t[8])
		t[9], t[8] = madd2(m, 17505409092126403933, t[9], c2)
	}
	{
		// round 7
		m := t[0] * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, t[0])
		c2, t[0] = madd2(m, 16154779454735111627, c2, t[1])
		c2, t[1] = madd2(m, 10168543766142768429, c2, t[2])
		c2, t[2] = madd2(m, 7204508108994786691, c2, t[3])
		c2, t[3] = madd2(m, 17359680726713688658, c2, t[4])
		c2, t[4] = madd2(m, 4403005955245659540, c2, t[5])
		c2, t[5] = madd2(m, 4030693491484495352, c2, t[6])
		c2, t[6] = madd2(m, 18210705511180458043, c2, t[7])
		c2, t[7] = madd2(m, 2823418929722774645, c2, t[8])
		t[9], t[8] = madd2(m, 17505409092126403933, t[9], c2)
	}
	{
		// round 8
		m := t[0] * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, t[0])
		c2, t[0] = madd2(m, 16154779454735111627, c2, t[1])
		c2, t[1] = madd2(m, 10168543766142768429, c2, t[2])
		c2, t[2] = madd2(m, 7204508108994786691, c2, t[3])
		c2, t[3] = madd2(m, 17359680726713688658, c2, t[4])
		c2, t[4] = madd2(m, 4403005955245659540, c2, t[5])
		c2, t[5] = madd2(m, 4030693491484495352, c2, t[6])
		c2, t[6] = madd2(m, 18210705511180458043, c2, t[7])
		c2, t[7] = madd2(m, 2823418929722774645, c2, t[8])
		t[9], t[8] = madd2(m, 17505409092126403933, t[9], c2)
	}
	{
		// round 9
		m := t[0] * 1930386629241259639
		c2 := madd0(m, 2079110225317268665, t[0])
		c2, z[0] = madd2(m, 16154779454735111627, c2, t[1])
		c2, z[1] = madd2(m, 10168543766142768429, c2, t[2])
		c2, z[2] = madd2(m, 7204508108994786691, c2, t[3])
		c2, z[3] = madd2(m, 17359680726713688658, c2, t[4])
		c2, z[4] = madd2(m, 4403005955245659540, c2, t[5])
		c2, z[5] = madd2(m, 4030693491484495352, c2, t[6])
		c2, z[6] = madd2(m, 18210705511180458043, c2, t[7])
		c2, z[7] = madd2(m, 2823418929722774645, c2, t[8])
		z[9], z[8] = madd2(m, 17505409092126403933, t[9], c2)
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 17505409092126403933 || (z[9] == 17505409092126403933 && (z[8] < 2823418929722774645 || (z[8] == 2823418929722774645 && (z[7] < 18210705511180458043 || (z[7] == 18210705511180458043 && (z[6] < 4030693491484495352 || (z[6] == 4030693491484495352 && (z[5] < 4403005955245659540 || (z[5] == 4403005955245659540 && (z[4] < 17359680726713688658 || (z[4] == 17359680726713688658 && (z[3] < 7204508108994786691 || (z[3] == 7204508108994786691 && (z[2] < 10168543766142768429 || (z[2] == 10168543766142768429 && (z[1] < 16154779454735111627 || (z[1] == 16154779454735111627 && (z[0] < 2079110225317268665))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 2079110225317268665, 0)
		z[1], b = bits.Sub64(z[1], 16154779454735111627, b)
		z[2], b = bits.Sub64(z[2], 10168543766142768429, b)
		z[3], b = bits.Sub64(z[3], 7204508108994786691, b)
		z[4], b = bits.Sub64(z[4], 17359680726713688658, b)
		z[5], b = bits.Sub64(z[5], 4403005955245659540, b)
		z[6], b = bits.Sub64(z[6], 4030693491484495352, b)
		z[7], b = bits.Sub64(z[7], 18210705511180458043, b)
		z[8], b = bits.Sub64(z[8], 2823418929722774645, b)
		z[9], _ = bits.Sub64(z[9], 17505409092126403933, b)
	}
}

func _fromMontGeneric(z *e_cios_0640) {
	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 1930386629241259639
		C := madd0(m, 2079110225317268665, z[0])
		C, z[0] = madd2(m, 16154779454735111627, z[1], C)
		C, z[1] = madd2(m, 10168543766142768429, z[2], C)
		C, z[2] = madd2(m, 7204508108994786691, z[3], C)
		C, z[3] = madd2(m, 17359680726713688658, z[4], C)
		C, z[4] = madd2(m, 4403005955245659540, z[5], C)
		C, z[5] = madd2(m, 4030693491484495352, z[6], C)
		C, z[6] = madd2(m, 18210705511180458043, z[7], C)
		C, z[7] = madd2(m, 2823418929722774645, z[8], C)
		C, z[8] = madd2(m, 17505409092126403933, z[9], C)
		z[9] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 17505409092126403933 || (z[9] == 17505409092126403933 && (z[8] < 2823418929722774645 || (z[8] == 2823418929722774645 && (z[7] < 18210705511180458043 || (z[7] == 18210705511180458043 && (z[6] < 4030693491484495352 || (z[6] == 4030693491484495352 && (z[5] < 4403005955245659540 || (z[5] == 4403005955245659540 && (z[4] < 17359680726713688658 || (z[4] == 17359680726713688658 && (z[3] < 7204508108994786691 || (z[3] == 7204508108994786691 && (z[2] < 10168543766142768429 || (z[2] == 10168543766142768429 && (z[1] < 16154779454735111627 || (z[1] == 16154779454735111627 && (z[0] < 2079110225317268665))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 2079110225317268665, 0)
		z[1], b = bits.Sub64(z[1], 16154779454735111627, b)
		z[2], b = bits.Sub64(z[2], 10168543766142768429, b)
		z[3], b = bits.Sub64(z[3], 7204508108994786691, b)
		z[4], b = bits.Sub64(z[4], 17359680726713688658, b)
		z[5], b = bits.Sub64(z[5], 4403005955245659540, b)
		z[6], b = bits.Sub64(z[6], 4030693491484495352, b)
		z[7], b = bits.Sub64(z[7], 18210705511180458043, b)
		z[8], b = bits.Sub64(z[8], 2823418929722774645, b)
		z[9], _ = bits.Sub64(z[9], 17505409092126403933, b)
	}
}

func _addGeneric(z, x, y *e_cios_0640) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 2079110225317268665, 0)
		z[1], carry = bits.Sub64(z[1], 16154779454735111627, carry)
		z[2], carry = bits.Sub64(z[2], 10168543766142768429, carry)
		z[3], carry = bits.Sub64(z[3], 7204508108994786691, carry)
		z[4], carry = bits.Sub64(z[4], 17359680726713688658, carry)
		z[5], carry = bits.Sub64(z[5], 4403005955245659540, carry)
		z[6], carry = bits.Sub64(z[6], 4030693491484495352, carry)
		z[7], carry = bits.Sub64(z[7], 18210705511180458043, carry)
		z[8], carry = bits.Sub64(z[8], 2823418929722774645, carry)
		z[9], carry = bits.Sub64(z[9], 17505409092126403933, carry)
		return
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 17505409092126403933 || (z[9] == 17505409092126403933 && (z[8] < 2823418929722774645 || (z[8] == 2823418929722774645 && (z[7] < 18210705511180458043 || (z[7] == 18210705511180458043 && (z[6] < 4030693491484495352 || (z[6] == 4030693491484495352 && (z[5] < 4403005955245659540 || (z[5] == 4403005955245659540 && (z[4] < 17359680726713688658 || (z[4] == 17359680726713688658 && (z[3] < 7204508108994786691 || (z[3] == 7204508108994786691 && (z[2] < 10168543766142768429 || (z[2] == 10168543766142768429 && (z[1] < 16154779454735111627 || (z[1] == 16154779454735111627 && (z[0] < 2079110225317268665))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 2079110225317268665, 0)
		z[1], b = bits.Sub64(z[1], 16154779454735111627, b)
		z[2], b = bits.Sub64(z[2], 10168543766142768429, b)
		z[3], b = bits.Sub64(z[3], 7204508108994786691, b)
		z[4], b = bits.Sub64(z[4], 17359680726713688658, b)
		z[5], b = bits.Sub64(z[5], 4403005955245659540, b)
		z[6], b = bits.Sub64(z[6], 4030693491484495352, b)
		z[7], b = bits.Sub64(z[7], 18210705511180458043, b)
		z[8], b = bits.Sub64(z[8], 2823418929722774645, b)
		z[9], _ = bits.Sub64(z[9], 17505409092126403933, b)
	}
}

func _doubleGeneric(z, x *e_cios_0640) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 2079110225317268665, 0)
		z[1], carry = bits.Sub64(z[1], 16154779454735111627, carry)
		z[2], carry = bits.Sub64(z[2], 10168543766142768429, carry)
		z[3], carry = bits.Sub64(z[3], 7204508108994786691, carry)
		z[4], carry = bits.Sub64(z[4], 17359680726713688658, carry)
		z[5], carry = bits.Sub64(z[5], 4403005955245659540, carry)
		z[6], carry = bits.Sub64(z[6], 4030693491484495352, carry)
		z[7], carry = bits.Sub64(z[7], 18210705511180458043, carry)
		z[8], carry = bits.Sub64(z[8], 2823418929722774645, carry)
		z[9], carry = bits.Sub64(z[9], 17505409092126403933, carry)
		return
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 17505409092126403933 || (z[9] == 17505409092126403933 && (z[8] < 2823418929722774645 || (z[8] == 2823418929722774645 && (z[7] < 18210705511180458043 || (z[7] == 18210705511180458043 && (z[6] < 4030693491484495352 || (z[6] == 4030693491484495352 && (z[5] < 4403005955245659540 || (z[5] == 4403005955245659540 && (z[4] < 17359680726713688658 || (z[4] == 17359680726713688658 && (z[3] < 7204508108994786691 || (z[3] == 7204508108994786691 && (z[2] < 10168543766142768429 || (z[2] == 10168543766142768429 && (z[1] < 16154779454735111627 || (z[1] == 16154779454735111627 && (z[0] < 2079110225317268665))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 2079110225317268665, 0)
		z[1], b = bits.Sub64(z[1], 16154779454735111627, b)
		z[2], b = bits.Sub64(z[2], 10168543766142768429, b)
		z[3], b = bits.Sub64(z[3], 7204508108994786691, b)
		z[4], b = bits.Sub64(z[4], 17359680726713688658, b)
		z[5], b = bits.Sub64(z[5], 4403005955245659540, b)
		z[6], b = bits.Sub64(z[6], 4030693491484495352, b)
		z[7], b = bits.Sub64(z[7], 18210705511180458043, b)
		z[8], b = bits.Sub64(z[8], 2823418929722774645, b)
		z[9], _ = bits.Sub64(z[9], 17505409092126403933, b)
	}
}

func _subGeneric(z, x, y *e_cios_0640) {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 2079110225317268665, 0)
		z[1], c = bits.Add64(z[1], 16154779454735111627, c)
		z[2], c = bits.Add64(z[2], 10168543766142768429, c)
		z[3], c = bits.Add64(z[3], 7204508108994786691, c)
		z[4], c = bits.Add64(z[4], 17359680726713688658, c)
		z[5], c = bits.Add64(z[5], 4403005955245659540, c)
		z[6], c = bits.Add64(z[6], 4030693491484495352, c)
		z[7], c = bits.Add64(z[7], 18210705511180458043, c)
		z[8], c = bits.Add64(z[8], 2823418929722774645, c)
		z[9], _ = bits.Add64(z[9], 17505409092126403933, c)
	}
}

func _negGeneric(z, x *e_cios_0640) {
	if x.IsZero() {
		z.SetZero()
		return
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(2079110225317268665, x[0], 0)
	z[1], borrow = bits.Sub64(16154779454735111627, x[1], borrow)
	z[2], borrow = bits.Sub64(10168543766142768429, x[2], borrow)
	z[3], borrow = bits.Sub64(7204508108994786691, x[3], borrow)
	z[4], borrow = bits.Sub64(17359680726713688658, x[4], borrow)
	z[5], borrow = bits.Sub64(4403005955245659540, x[5], borrow)
	z[6], borrow = bits.Sub64(4030693491484495352, x[6], borrow)
	z[7], borrow = bits.Sub64(18210705511180458043, x[7], borrow)
	z[8], borrow = bits.Sub64(2823418929722774645, x[8], borrow)
	z[9], _ = bits.Sub64(17505409092126403933, x[9], borrow)
}

func _reduceGeneric(z *e_cios_0640) {

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[9] < 17505409092126403933 || (z[9] == 17505409092126403933 && (z[8] < 2823418929722774645 || (z[8] == 2823418929722774645 && (z[7] < 18210705511180458043 || (z[7] == 18210705511180458043 && (z[6] < 4030693491484495352 || (z[6] == 4030693491484495352 && (z[5] < 4403005955245659540 || (z[5] == 4403005955245659540 && (z[4] < 17359680726713688658 || (z[4] == 17359680726713688658 && (z[3] < 7204508108994786691 || (z[3] == 7204508108994786691 && (z[2] < 10168543766142768429 || (z[2] == 10168543766142768429 && (z[1] < 16154779454735111627 || (z[1] == 16154779454735111627 && (z[0] < 2079110225317268665))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 2079110225317268665, 0)
		z[1], b = bits.Sub64(z[1], 16154779454735111627, b)
		z[2], b = bits.Sub64(z[2], 10168543766142768429, b)
		z[3], b = bits.Sub64(z[3], 7204508108994786691, b)
		z[4], b = bits.Sub64(z[4], 17359680726713688658, b)
		z[5], b = bits.Sub64(z[5], 4403005955245659540, b)
		z[6], b = bits.Sub64(z[6], 4030693491484495352, b)
		z[7], b = bits.Sub64(z[7], 18210705511180458043, b)
		z[8], b = bits.Sub64(z[8], 2823418929722774645, b)
		z[9], _ = bits.Sub64(z[9], 17505409092126403933, b)
	}
}

func mulByConstant(z *e_cios_0640, c uint8) {
	switch c {
	case 0:
		z.SetZero()
		return
	case 1:
		return
	case 2:
		z.Double(z)
		return
	case 3:
		_z := *z
		z.Double(z).Add(z, &_z)
	case 5:
		_z := *z
		z.Double(z).Double(z).Add(z, &_z)
	default:
		var y e_cios_0640
		y.SetUint64(uint64(c))
		z.Mul(z, &y)
	}
}

// BatchInvert returns a new slice with every element inverted.
// Uses Montgomery batch inversion trick
func BatchInvert(a []e_cios_0640) []e_cios_0640 {
	res := make([]e_cios_0640, len(a))
	if len(a) == 0 {
		return res
	}

	zeroes := make([]bool, len(a))
	accumulator := One()

	for i := 0; i < len(a); i++ {
		if a[i].IsZero() {
			zeroes[i] = true
			continue
		}
		res[i] = accumulator
		accumulator.Mul(&accumulator, &a[i])
	}

	accumulator.Inverse(&accumulator)

	for i := len(a) - 1; i >= 0; i-- {
		if zeroes[i] {
			continue
		}
		res[i].Mul(&res[i], &accumulator)
		accumulator.Mul(&accumulator, &a[i])
	}

	return res
}

func _butterflyGeneric(a, b *e_cios_0640) {
	t := *a
	a.Add(a, b)
	b.Sub(&t, b)
}

// BitLen returns the minimum number of bits needed to represent z
// returns 0 if z == 0
func (z *e_cios_0640) BitLen() int {
	if z[9] != 0 {
		return 576 + bits.Len64(z[9])
	}
	if z[8] != 0 {
		return 512 + bits.Len64(z[8])
	}
	if z[7] != 0 {
		return 448 + bits.Len64(z[7])
	}
	if z[6] != 0 {
		return 384 + bits.Len64(z[6])
	}
	if z[5] != 0 {
		return 320 + bits.Len64(z[5])
	}
	if z[4] != 0 {
		return 256 + bits.Len64(z[4])
	}
	if z[3] != 0 {
		return 192 + bits.Len64(z[3])
	}
	if z[2] != 0 {
		return 128 + bits.Len64(z[2])
	}
	if z[1] != 0 {
		return 64 + bits.Len64(z[1])
	}
	return bits.Len64(z[0])
}

// Exp z = x^exponent mod q
func (z *e_cios_0640) Exp(x e_cios_0640, exponent *big.Int) *e_cios_0640 {
	var bZero big.Int
	if exponent.Cmp(&bZero) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	for i := exponent.BitLen() - 2; i >= 0; i-- {
		z.Square(z)
		if exponent.Bit(i) == 1 {
			z.Mul(z, &x)
		}
	}

	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *e_cios_0640) ToMont() *e_cios_0640 {
	return z.Mul(z, &rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z e_cios_0640) ToRegular() e_cios_0640 {
	return *z.FromMont()
}

// String returns the string form of an e_cios_0640 in Montgomery form
func (z *e_cios_0640) String() string {
	zz := *z
	zz.FromMont()
	if zz.IsUint64() {
		return strconv.FormatUint(zz[0], 10)
	} else {
		var zzNeg e_cios_0640
		zzNeg.Neg(z)
		zzNeg.FromMont()
		if zzNeg.IsUint64() {
			return "-" + strconv.FormatUint(zzNeg[0], 10)
		}
	}
	vv := bigIntPool.Get().(*big.Int)
	defer bigIntPool.Put(vv)
	return zz.ToBigInt(vv).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *e_cios_0640) ToBigInt(res *big.Int) *big.Int {
	var b [Limbs * 8]byte
	binary.BigEndian.PutUint64(b[72:80], z[0])
	binary.BigEndian.PutUint64(b[64:72], z[1])
	binary.BigEndian.PutUint64(b[56:64], z[2])
	binary.BigEndian.PutUint64(b[48:56], z[3])
	binary.BigEndian.PutUint64(b[40:48], z[4])
	binary.BigEndian.PutUint64(b[32:40], z[5])
	binary.BigEndian.PutUint64(b[24:32], z[6])
	binary.BigEndian.PutUint64(b[16:24], z[7])
	binary.BigEndian.PutUint64(b[8:16], z[8])
	binary.BigEndian.PutUint64(b[0:8], z[9])

	return res.SetBytes(b[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z e_cios_0640) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	return z.ToBigInt(res)
}

// Bytes returns the regular (non montgomery) value
// of z as a big-endian byte array.
func (z *e_cios_0640) Bytes() (res [Limbs * 8]byte) {
	_z := z.ToRegular()
	binary.BigEndian.PutUint64(res[72:80], _z[0])
	binary.BigEndian.PutUint64(res[64:72], _z[1])
	binary.BigEndian.PutUint64(res[56:64], _z[2])
	binary.BigEndian.PutUint64(res[48:56], _z[3])
	binary.BigEndian.PutUint64(res[40:48], _z[4])
	binary.BigEndian.PutUint64(res[32:40], _z[5])
	binary.BigEndian.PutUint64(res[24:32], _z[6])
	binary.BigEndian.PutUint64(res[16:24], _z[7])
	binary.BigEndian.PutUint64(res[8:16], _z[8])
	binary.BigEndian.PutUint64(res[0:8], _z[9])

	return
}

// Marshal returns the regular (non montgomery) value
// of z as a big-endian byte slice.
func (z *e_cios_0640) Marshal() []byte {
	b := z.Bytes()
	return b[:]
}

// SetBytes interprets e as the bytes of a big-endian unsigned integer,
// sets z to that value (in Montgomery form), and returns z.
func (z *e_cios_0640) SetBytes(e []byte) *e_cios_0640 {
	// get a big int from our pool
	vv := bigIntPool.Get().(*big.Int)
	vv.SetBytes(e)

	// set big int
	z.SetBigInt(vv)

	// put temporary object back in pool
	bigIntPool.Put(vv)

	return z
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *e_cios_0640) SetBigInt(v *big.Int) *e_cios_0640 {
	z.SetZero()

	var zero big.Int

	// fast path
	c := v.Cmp(&_modulus)
	if c == 0 {
		// v == 0
		return z
	} else if c != 1 && v.Cmp(&zero) != -1 {
		// 0 < v < q
		return z.setBigInt(v)
	}

	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	// copy input + modular reduction
	vv.Set(v)
	vv.Mod(v, &_modulus)

	// set big int byte value
	z.setBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)
	return z
}

// setBigInt assumes 0 <= v < q
func (z *e_cios_0640) setBigInt(v *big.Int) *e_cios_0640 {
	vBits := v.Bits()

	if bits.UintSize == 64 {
		for i := 0; i < len(vBits); i++ {
			z[i] = uint64(vBits[i])
		}
	} else {
		for i := 0; i < len(vBits); i++ {
			if i%2 == 0 {
				z[i/2] = uint64(vBits[i])
			} else {
				z[i/2] |= uint64(vBits[i]) << 32
			}
		}
	}

	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *e_cios_0640) SetString(s string) *e_cios_0640 {
	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	if _, ok := vv.SetString(s, 10); !ok {
		panic("e_cios_0640.SetString failed -> can't parse number in base10 into a big.Int")
	}
	z.SetBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)

	return z
}

var (
	_bLegendreExponente_cios_0640 *big.Int
	_bSqrtExponente_cios_0640     *big.Int
)

func init() {
	_bLegendreExponente_cios_0640, _ = new(big.Int).SetString("7977da692c0b36ae939766475b1eaa3afe5cb616c7946c1d9bf7f32fff34c6fc1e8d4f4b492c6aca7874fcd29cfb712931fdc6fa1d071ac1c68ef6570bf9ea96f018a7294421eae58e6d3dddfe75865c", 16)
	const sqrtExponente_cios_0640 = "f2efb4d258166d5d272ecc8eb63d5475fcb96c2d8f28d83b37efe65ffe698df83d1a9e969258d594f0e9f9a539f6e25263fb8df43a0e35838d1decae17f3d52de0314e528843d5cb1cda7bbbfceb0cb"
	_bSqrtExponente_cios_0640, _ = new(big.Int).SetString(sqrtExponente_cios_0640, 16)
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *e_cios_0640) Legendre() int {
	var l e_cios_0640
	// z^((q-1)/2)
	l.Exp(*z, _bLegendreExponente_cios_0640)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[9] == 941334981583147682) && (l[8] == 15623325143986776970) && (l[7] == 236038562529093572) && (l[6] == 14416050582225056263) && (l[5] == 14043738118463892075) && (l[4] == 1087063346995862957) && (l[3] == 11242235964714764924) && (l[2] == 8278200307566783186) && (l[1] == 2291964618974439988) && (l[0] == 16367633848392282951) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *e_cios_0640) Sqrt(x *e_cios_0640) *e_cios_0640 {
	// q ≡ 1 (mod 4)
	// see modSqrtTonelliShanks in math/big/int.go
	// using https://www.maa.org/sites/default/files/pdf/upload_library/22/Polya/07468342.di020786.02p0470a.pdf

	var y, b, t, w e_cios_0640
	// w = x^((s-1)/2))
	w.Exp(*x, _bSqrtExponente_cios_0640)

	// y = x^((s+1)/2)) = w * x
	y.Mul(x, &w)

	// b = x^s = w * w * x = y * x
	b.Mul(&w, &y)

	// g = nonResidue ^ s
	var g = e_cios_0640{
		3012868164893844398,
		7368286084515132214,
		15187786060868154076,
		390508853407076919,
		11352427459697901587,
		10727270080140555677,
		1141762680071870423,
		2632668650719259819,
		2008232798969838004,
		3050997261464877091,
	}
	r := uint64(3)

	// compute legendre symbol
	// t = x^((q-1)/2) = r-1 squaring of x^s
	t = b
	for i := uint64(0); i < r-1; i++ {
		t.Square(&t)
	}
	if t.IsZero() {
		return z.SetZero()
	}
	if !((t[9] == 941334981583147682) && (t[8] == 15623325143986776970) && (t[7] == 236038562529093572) && (t[6] == 14416050582225056263) && (t[5] == 14043738118463892075) && (t[4] == 1087063346995862957) && (t[3] == 11242235964714764924) && (t[2] == 8278200307566783186) && (t[1] == 2291964618974439988) && (t[0] == 16367633848392282951)) {
		// t != 1, we don't have a square root
		return nil
	}
	for {
		var m uint64
		t = b

		// for t != 1
		for !((t[9] == 941334981583147682) && (t[8] == 15623325143986776970) && (t[7] == 236038562529093572) && (t[6] == 14416050582225056263) && (t[5] == 14043738118463892075) && (t[4] == 1087063346995862957) && (t[3] == 11242235964714764924) && (t[2] == 8278200307566783186) && (t[1] == 2291964618974439988) && (t[0] == 16367633848392282951)) {
			t.Square(&t)
			m++
		}

		if m == 0 {
			return z.Set(&y)
		}
		// t = g^(2^(r-m-1)) mod q
		ge := int(r - m - 1)
		t = g
		for ge > 0 {
			t.Square(&t)
			ge--
		}

		g.Square(&t)
		y.Mul(&y, &t)
		b.Mul(&b, &g)
		r = m
	}
}

//Fake InverseOld just for the tests to work
func (z *e_cios_0640) InverseOld(x *e_cios_0640) *e_cios_0640 {
	return z.Inverse(x)
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *e_cios_0640) Inverse(x *e_cios_0640) *e_cios_0640 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, Modulus())
	z.SetBigInt(&_xNonMont)
	return z
}
