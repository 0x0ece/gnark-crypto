// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package integration

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

import (
	"crypto/rand"
	"encoding/binary"
	"errors"
	"io"
	"math/big"
	"math/bits"
	"reflect"
	"strconv"
	"sync"
)

// e_nocarry_0681 represents a field element stored on 11 words (uint64)
// e_nocarry_0681 are assumed to be in Montgomery form in all methods
// field modulus q =
//
// 9915104556102905207041093719072556471749209248925158771930847661456003053358888103375015258871996311743242762339783786139819326212923717044690387747415399066339585132330216754881318158889249309736605855431
type e_nocarry_0681 [11]uint64

// Limbs number of 64 bits words needed to represent e_nocarry_0681
const Limbs = 11

// Bits number bits needed to represent e_nocarry_0681
const Bits = 681

// Bytes number bytes needed to represent e_nocarry_0681
const Bytes = Limbs * 8

// field modulus stored as big.Int
var _modulus big.Int

// Modulus returns q as a big.Int
// q =
//
// 9915104556102905207041093719072556471749209248925158771930847661456003053358888103375015258871996311743242762339783786139819326212923717044690387747415399066339585132330216754881318158889249309736605855431
func Modulus() *big.Int {
	return new(big.Int).Set(&_modulus)
}

// q (modulus)
var qe_nocarry_0681 = e_nocarry_0681{
	17931193701631274695,
	7126299503041834561,
	2469166506653162575,
	5598390390885236727,
	10478029348464258423,
	2742491024744349264,
	16135112756024780363,
	7025931262690089526,
	16201635012499224705,
	3983863241188942101,
	2173201886246,
}

// rSquare
var rSquare = e_nocarry_0681{
	18160023512380379849,
	13367128496227533720,
	3690859096059015214,
	5712877570559960755,
	10051251796866247457,
	1667343680933041170,
	7033592504193253042,
	12903877289495641271,
	5555954591159865766,
	8925793126023348755,
	146037798105,
}

var bigIntPool = sync.Pool{
	New: func() interface{} {
		return new(big.Int)
	},
}

func init() {
	_modulus.SetString("9915104556102905207041093719072556471749209248925158771930847661456003053358888103375015258871996311743242762339783786139819326212923717044690387747415399066339585132330216754881318158889249309736605855431", 10)
}

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *e_nocarry_0681) SetUint64(v uint64) *e_nocarry_0681 {
	*z = e_nocarry_0681{v}
	return z.Mul(z, &rSquare) // z.ToMont()
}

// Set z = x
func (z *e_nocarry_0681) Set(x *e_nocarry_0681) *e_nocarry_0681 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	return z
}

// SetInterface converts provided interface into e_nocarry_0681
// returns an error if provided type is not supported
// supported types: e_nocarry_0681, *e_nocarry_0681, uint64, int, string (interpreted as base10 integer),
// *big.Int, big.Int, []byte
func (z *e_nocarry_0681) SetInterface(i1 interface{}) (*e_nocarry_0681, error) {
	switch c1 := i1.(type) {
	case e_nocarry_0681:
		return z.Set(&c1), nil
	case *e_nocarry_0681:
		return z.Set(c1), nil
	case uint64:
		return z.SetUint64(c1), nil
	case int:
		return z.SetString(strconv.Itoa(c1)), nil
	case string:
		return z.SetString(c1), nil
	case *big.Int:
		return z.SetBigInt(c1), nil
	case big.Int:
		return z.SetBigInt(&c1), nil
	case []byte:
		return z.SetBytes(c1), nil
	default:
		return nil, errors.New("can't set integration.e_nocarry_0681 from type " + reflect.TypeOf(i1).String())
	}
}

// SetZero z = 0
func (z *e_nocarry_0681) SetZero() *e_nocarry_0681 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *e_nocarry_0681) SetOne() *e_nocarry_0681 {
	z[0] = 14300148107414845279
	z[1] = 9791549783648328768
	z[2] = 13496436581568793828
	z[3] = 13159762450725673426
	z[4] = 5115859618514447016
	z[5] = 5731488491816677617
	z[6] = 6791929269810545660
	z[7] = 543350178001715041
	z[8] = 2155360879238672975
	z[9] = 4271754622427174662
	z[10] = 139925407805
	return z
}

// Div z = x*y^-1 mod q
func (z *e_nocarry_0681) Div(x, y *e_nocarry_0681) *e_nocarry_0681 {
	var yInv e_nocarry_0681
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Bit returns the i'th bit, with lsb == bit 0.
// It is the responsability of the caller to convert from Montgomery to Regular form if needed
func (z *e_nocarry_0681) Bit(i uint64) uint64 {
	j := i / 64
	if j >= 11 {
		return 0
	}
	return uint64(z[j] >> (i % 64) & 1)
}

// Equal returns z == x
func (z *e_nocarry_0681) Equal(x *e_nocarry_0681) bool {
	return (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *e_nocarry_0681) IsZero() bool {
	return (z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// IsUint64 returns true if z[0] >= 0 and all other words are 0
func (z *e_nocarry_0681) IsUint64() bool {
	return (z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1]) == 0
}

// Cmp compares (lexicographic order) z and x and returns:
//
//   -1 if z <  x
//    0 if z == x
//   +1 if z >  x
//
func (z *e_nocarry_0681) Cmp(x *e_nocarry_0681) int {
	_z := *z
	_x := *x
	_z.FromMont()
	_x.FromMont()
	if _z[10] > _x[10] {
		return 1
	} else if _z[10] < _x[10] {
		return -1
	}
	if _z[9] > _x[9] {
		return 1
	} else if _z[9] < _x[9] {
		return -1
	}
	if _z[8] > _x[8] {
		return 1
	} else if _z[8] < _x[8] {
		return -1
	}
	if _z[7] > _x[7] {
		return 1
	} else if _z[7] < _x[7] {
		return -1
	}
	if _z[6] > _x[6] {
		return 1
	} else if _z[6] < _x[6] {
		return -1
	}
	if _z[5] > _x[5] {
		return 1
	} else if _z[5] < _x[5] {
		return -1
	}
	if _z[4] > _x[4] {
		return 1
	} else if _z[4] < _x[4] {
		return -1
	}
	if _z[3] > _x[3] {
		return 1
	} else if _z[3] < _x[3] {
		return -1
	}
	if _z[2] > _x[2] {
		return 1
	} else if _z[2] < _x[2] {
		return -1
	}
	if _z[1] > _x[1] {
		return 1
	} else if _z[1] < _x[1] {
		return -1
	}
	if _z[0] > _x[0] {
		return 1
	} else if _z[0] < _x[0] {
		return -1
	}
	return 0
}

// LexicographicallyLargest returns true if this element is strictly lexicographically
// larger than its negation, false otherwise
func (z *e_nocarry_0681) LexicographicallyLargest() bool {
	// adapted from github.com/zkcrypto/bls12_381
	// we check if the element is larger than (q-1) / 2
	// if z - (((q -1) / 2) + 1) have no underflow, then z > (q-1) / 2

	_z := *z
	_z.FromMont()

	var b uint64
	_, b = bits.Sub64(_z[0], 18188968887670413156, 0)
	_, b = bits.Sub64(_z[1], 12786521788375693088, b)
	_, b = bits.Sub64(_z[2], 10457955290181357095, b)
	_, b = bits.Sub64(_z[3], 12022567232297394171, b)
	_, b = bits.Sub64(_z[4], 5239014674232129211, b)
	_, b = bits.Sub64(_z[5], 10594617549226950440, b)
	_, b = bits.Sub64(_z[6], 8067556378012390181, b)
	_, b = bits.Sub64(_z[7], 12736337668199820571, b)
	_, b = bits.Sub64(_z[8], 17324189543104388160, b)
	_, b = bits.Sub64(_z[9], 1991931620594471050, b)
	_, b = bits.Sub64(_z[10], 1086600943123, b)

	return b == 0
}

// SetRandom sets z to a random element < q
func (z *e_nocarry_0681) SetRandom() (*e_nocarry_0681, error) {
	var bytes [88]byte
	if _, err := io.ReadFull(rand.Reader, bytes[:]); err != nil {
		return nil, err
	}
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[10] %= 2173201886246

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[10] < 2173201886246 || (z[10] == 2173201886246 && (z[9] < 3983863241188942101 || (z[9] == 3983863241188942101 && (z[8] < 16201635012499224705 || (z[8] == 16201635012499224705 && (z[7] < 7025931262690089526 || (z[7] == 7025931262690089526 && (z[6] < 16135112756024780363 || (z[6] == 16135112756024780363 && (z[5] < 2742491024744349264 || (z[5] == 2742491024744349264 && (z[4] < 10478029348464258423 || (z[4] == 10478029348464258423 && (z[3] < 5598390390885236727 || (z[3] == 5598390390885236727 && (z[2] < 2469166506653162575 || (z[2] == 2469166506653162575 && (z[1] < 7126299503041834561 || (z[1] == 7126299503041834561 && (z[0] < 17931193701631274695))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17931193701631274695, 0)
		z[1], b = bits.Sub64(z[1], 7126299503041834561, b)
		z[2], b = bits.Sub64(z[2], 2469166506653162575, b)
		z[3], b = bits.Sub64(z[3], 5598390390885236727, b)
		z[4], b = bits.Sub64(z[4], 10478029348464258423, b)
		z[5], b = bits.Sub64(z[5], 2742491024744349264, b)
		z[6], b = bits.Sub64(z[6], 16135112756024780363, b)
		z[7], b = bits.Sub64(z[7], 7025931262690089526, b)
		z[8], b = bits.Sub64(z[8], 16201635012499224705, b)
		z[9], b = bits.Sub64(z[9], 3983863241188942101, b)
		z[10], _ = bits.Sub64(z[10], 2173201886246, b)
	}

	return z, nil
}

// One returns 1 (in montgommery form)
func One() e_nocarry_0681 {
	var one e_nocarry_0681
	one.SetOne()
	return one
}

// Halve sets z to z / 2 (mod p)
func (z *e_nocarry_0681) Halve() {
	if z[0]&1 == 1 {
		var carry uint64

		// z = z + q
		z[0], carry = bits.Add64(z[0], 17931193701631274695, 0)
		z[1], carry = bits.Add64(z[1], 7126299503041834561, carry)
		z[2], carry = bits.Add64(z[2], 2469166506653162575, carry)
		z[3], carry = bits.Add64(z[3], 5598390390885236727, carry)
		z[4], carry = bits.Add64(z[4], 10478029348464258423, carry)
		z[5], carry = bits.Add64(z[5], 2742491024744349264, carry)
		z[6], carry = bits.Add64(z[6], 16135112756024780363, carry)
		z[7], carry = bits.Add64(z[7], 7025931262690089526, carry)
		z[8], carry = bits.Add64(z[8], 16201635012499224705, carry)
		z[9], carry = bits.Add64(z[9], 3983863241188942101, carry)
		z[10], _ = bits.Add64(z[10], 2173201886246, carry)

	}

	// z = z >> 1

	z[0] = z[0]>>1 | z[1]<<63
	z[1] = z[1]>>1 | z[2]<<63
	z[2] = z[2]>>1 | z[3]<<63
	z[3] = z[3]>>1 | z[4]<<63
	z[4] = z[4]>>1 | z[5]<<63
	z[5] = z[5]>>1 | z[6]<<63
	z[6] = z[6]>>1 | z[7]<<63
	z[7] = z[7]>>1 | z[8]<<63
	z[8] = z[8]>>1 | z[9]<<63
	z[9] = z[9]>>1 | z[10]<<63
	z[10] >>= 1

}

// API with assembly impl

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *e_nocarry_0681) Mul(x, y *e_nocarry_0681) *e_nocarry_0681 {
	mul(z, x, y)
	return z
}

// Square z = x * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *e_nocarry_0681) Square(x *e_nocarry_0681) *e_nocarry_0681 {
	mul(z, x, x)
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *e_nocarry_0681) FromMont() *e_nocarry_0681 {
	fromMont(z)
	return z
}

// Add z = x + y mod q
func (z *e_nocarry_0681) Add(x, y *e_nocarry_0681) *e_nocarry_0681 {
	add(z, x, y)
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *e_nocarry_0681) Double(x *e_nocarry_0681) *e_nocarry_0681 {
	double(z, x)
	return z
}

// Sub  z = x - y mod q
func (z *e_nocarry_0681) Sub(x, y *e_nocarry_0681) *e_nocarry_0681 {
	sub(z, x, y)
	return z
}

// Neg z = q - x
func (z *e_nocarry_0681) Neg(x *e_nocarry_0681) *e_nocarry_0681 {
	neg(z, x)
	return z
}

// Generic (no ADX instructions, no AMD64) versions of multiplication and squaring algorithms

func _mulGeneric(z, x, y *e_nocarry_0681) {

	var t [11]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd1(v, y[3], c[1])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd1(v, y[4], c[1])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd1(v, y[5], c[1])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd1(v, y[6], c[1])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd1(v, y[7], c[1])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd1(v, y[8], c[1])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd1(v, y[9], c[1])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd1(v, y[10], c[1])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 5
		v := x[5]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 6
		v := x[6]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 7
		v := x[7]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 8
		v := x[8]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 9
		v := x[9]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		t[10], t[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}
	{
		// round 10
		v := x[10]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 422641052619623689
		c[2] = madd0(m, 17931193701631274695, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 7126299503041834561, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], z[1] = madd2(m, 2469166506653162575, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], z[2] = madd2(m, 5598390390885236727, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], z[3] = madd2(m, 10478029348464258423, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], z[4] = madd2(m, 2742491024744349264, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], z[5] = madd2(m, 16135112756024780363, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], z[6] = madd2(m, 7025931262690089526, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], z[7] = madd2(m, 16201635012499224705, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], z[8] = madd2(m, 3983863241188942101, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		z[10], z[9] = madd3(m, 2173201886246, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[10] < 2173201886246 || (z[10] == 2173201886246 && (z[9] < 3983863241188942101 || (z[9] == 3983863241188942101 && (z[8] < 16201635012499224705 || (z[8] == 16201635012499224705 && (z[7] < 7025931262690089526 || (z[7] == 7025931262690089526 && (z[6] < 16135112756024780363 || (z[6] == 16135112756024780363 && (z[5] < 2742491024744349264 || (z[5] == 2742491024744349264 && (z[4] < 10478029348464258423 || (z[4] == 10478029348464258423 && (z[3] < 5598390390885236727 || (z[3] == 5598390390885236727 && (z[2] < 2469166506653162575 || (z[2] == 2469166506653162575 && (z[1] < 7126299503041834561 || (z[1] == 7126299503041834561 && (z[0] < 17931193701631274695))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17931193701631274695, 0)
		z[1], b = bits.Sub64(z[1], 7126299503041834561, b)
		z[2], b = bits.Sub64(z[2], 2469166506653162575, b)
		z[3], b = bits.Sub64(z[3], 5598390390885236727, b)
		z[4], b = bits.Sub64(z[4], 10478029348464258423, b)
		z[5], b = bits.Sub64(z[5], 2742491024744349264, b)
		z[6], b = bits.Sub64(z[6], 16135112756024780363, b)
		z[7], b = bits.Sub64(z[7], 7025931262690089526, b)
		z[8], b = bits.Sub64(z[8], 16201635012499224705, b)
		z[9], b = bits.Sub64(z[9], 3983863241188942101, b)
		z[10], _ = bits.Sub64(z[10], 2173201886246, b)
	}
}

func _mulWGeneric(z, x *e_nocarry_0681, y uint64) {

	var t [11]uint64
	{
		// round 0
		c1, c0 := bits.Mul64(y, x[0])
		m := c0 * 422641052619623689
		c2 := madd0(m, 17931193701631274695, c0)
		c1, c0 = madd1(y, x[1], c1)
		c2, t[0] = madd2(m, 7126299503041834561, c2, c0)
		c1, c0 = madd1(y, x[2], c1)
		c2, t[1] = madd2(m, 2469166506653162575, c2, c0)
		c1, c0 = madd1(y, x[3], c1)
		c2, t[2] = madd2(m, 5598390390885236727, c2, c0)
		c1, c0 = madd1(y, x[4], c1)
		c2, t[3] = madd2(m, 10478029348464258423, c2, c0)
		c1, c0 = madd1(y, x[5], c1)
		c2, t[4] = madd2(m, 2742491024744349264, c2, c0)
		c1, c0 = madd1(y, x[6], c1)
		c2, t[5] = madd2(m, 16135112756024780363, c2, c0)
		c1, c0 = madd1(y, x[7], c1)
		c2, t[6] = madd2(m, 7025931262690089526, c2, c0)
		c1, c0 = madd1(y, x[8], c1)
		c2, t[7] = madd2(m, 16201635012499224705, c2, c0)
		c1, c0 = madd1(y, x[9], c1)
		c2, t[8] = madd2(m, 3983863241188942101, c2, c0)
		c1, c0 = madd1(y, x[10], c1)
		t[10], t[9] = madd3(m, 2173201886246, c0, c2, c1)
	}
	{
		// round 1
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, t[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, t[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, t[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, t[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, t[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, t[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, t[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, t[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, t[8] = madd2(m, 3983863241188942101, c2, t[9])
		t[10], t[9] = madd2(m, 2173201886246, t[10], c2)
	}
	{
		// round 2
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, t[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, t[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, t[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, t[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, t[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, t[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, t[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, t[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, t[8] = madd2(m, 3983863241188942101, c2, t[9])
		t[10], t[9] = madd2(m, 2173201886246, t[10], c2)
	}
	{
		// round 3
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, t[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, t[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, t[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, t[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, t[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, t[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, t[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, t[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, t[8] = madd2(m, 3983863241188942101, c2, t[9])
		t[10], t[9] = madd2(m, 2173201886246, t[10], c2)
	}
	{
		// round 4
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, t[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, t[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, t[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, t[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, t[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, t[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, t[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, t[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, t[8] = madd2(m, 3983863241188942101, c2, t[9])
		t[10], t[9] = madd2(m, 2173201886246, t[10], c2)
	}
	{
		// round 5
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, t[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, t[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, t[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, t[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, t[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, t[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, t[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, t[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, t[8] = madd2(m, 3983863241188942101, c2, t[9])
		t[10], t[9] = madd2(m, 2173201886246, t[10], c2)
	}
	{
		// round 6
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, t[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, t[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, t[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, t[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, t[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, t[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, t[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, t[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, t[8] = madd2(m, 3983863241188942101, c2, t[9])
		t[10], t[9] = madd2(m, 2173201886246, t[10], c2)
	}
	{
		// round 7
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, t[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, t[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, t[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, t[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, t[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, t[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, t[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, t[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, t[8] = madd2(m, 3983863241188942101, c2, t[9])
		t[10], t[9] = madd2(m, 2173201886246, t[10], c2)
	}
	{
		// round 8
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, t[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, t[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, t[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, t[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, t[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, t[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, t[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, t[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, t[8] = madd2(m, 3983863241188942101, c2, t[9])
		t[10], t[9] = madd2(m, 2173201886246, t[10], c2)
	}
	{
		// round 9
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, t[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, t[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, t[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, t[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, t[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, t[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, t[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, t[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, t[8] = madd2(m, 3983863241188942101, c2, t[9])
		t[10], t[9] = madd2(m, 2173201886246, t[10], c2)
	}
	{
		// round 10
		m := t[0] * 422641052619623689
		c2 := madd0(m, 17931193701631274695, t[0])
		c2, z[0] = madd2(m, 7126299503041834561, c2, t[1])
		c2, z[1] = madd2(m, 2469166506653162575, c2, t[2])
		c2, z[2] = madd2(m, 5598390390885236727, c2, t[3])
		c2, z[3] = madd2(m, 10478029348464258423, c2, t[4])
		c2, z[4] = madd2(m, 2742491024744349264, c2, t[5])
		c2, z[5] = madd2(m, 16135112756024780363, c2, t[6])
		c2, z[6] = madd2(m, 7025931262690089526, c2, t[7])
		c2, z[7] = madd2(m, 16201635012499224705, c2, t[8])
		c2, z[8] = madd2(m, 3983863241188942101, c2, t[9])
		z[10], z[9] = madd2(m, 2173201886246, t[10], c2)
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[10] < 2173201886246 || (z[10] == 2173201886246 && (z[9] < 3983863241188942101 || (z[9] == 3983863241188942101 && (z[8] < 16201635012499224705 || (z[8] == 16201635012499224705 && (z[7] < 7025931262690089526 || (z[7] == 7025931262690089526 && (z[6] < 16135112756024780363 || (z[6] == 16135112756024780363 && (z[5] < 2742491024744349264 || (z[5] == 2742491024744349264 && (z[4] < 10478029348464258423 || (z[4] == 10478029348464258423 && (z[3] < 5598390390885236727 || (z[3] == 5598390390885236727 && (z[2] < 2469166506653162575 || (z[2] == 2469166506653162575 && (z[1] < 7126299503041834561 || (z[1] == 7126299503041834561 && (z[0] < 17931193701631274695))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17931193701631274695, 0)
		z[1], b = bits.Sub64(z[1], 7126299503041834561, b)
		z[2], b = bits.Sub64(z[2], 2469166506653162575, b)
		z[3], b = bits.Sub64(z[3], 5598390390885236727, b)
		z[4], b = bits.Sub64(z[4], 10478029348464258423, b)
		z[5], b = bits.Sub64(z[5], 2742491024744349264, b)
		z[6], b = bits.Sub64(z[6], 16135112756024780363, b)
		z[7], b = bits.Sub64(z[7], 7025931262690089526, b)
		z[8], b = bits.Sub64(z[8], 16201635012499224705, b)
		z[9], b = bits.Sub64(z[9], 3983863241188942101, b)
		z[10], _ = bits.Sub64(z[10], 2173201886246, b)
	}
}

func _fromMontGeneric(z *e_nocarry_0681) {
	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 422641052619623689
		C := madd0(m, 17931193701631274695, z[0])
		C, z[0] = madd2(m, 7126299503041834561, z[1], C)
		C, z[1] = madd2(m, 2469166506653162575, z[2], C)
		C, z[2] = madd2(m, 5598390390885236727, z[3], C)
		C, z[3] = madd2(m, 10478029348464258423, z[4], C)
		C, z[4] = madd2(m, 2742491024744349264, z[5], C)
		C, z[5] = madd2(m, 16135112756024780363, z[6], C)
		C, z[6] = madd2(m, 7025931262690089526, z[7], C)
		C, z[7] = madd2(m, 16201635012499224705, z[8], C)
		C, z[8] = madd2(m, 3983863241188942101, z[9], C)
		C, z[9] = madd2(m, 2173201886246, z[10], C)
		z[10] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[10] < 2173201886246 || (z[10] == 2173201886246 && (z[9] < 3983863241188942101 || (z[9] == 3983863241188942101 && (z[8] < 16201635012499224705 || (z[8] == 16201635012499224705 && (z[7] < 7025931262690089526 || (z[7] == 7025931262690089526 && (z[6] < 16135112756024780363 || (z[6] == 16135112756024780363 && (z[5] < 2742491024744349264 || (z[5] == 2742491024744349264 && (z[4] < 10478029348464258423 || (z[4] == 10478029348464258423 && (z[3] < 5598390390885236727 || (z[3] == 5598390390885236727 && (z[2] < 2469166506653162575 || (z[2] == 2469166506653162575 && (z[1] < 7126299503041834561 || (z[1] == 7126299503041834561 && (z[0] < 17931193701631274695))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17931193701631274695, 0)
		z[1], b = bits.Sub64(z[1], 7126299503041834561, b)
		z[2], b = bits.Sub64(z[2], 2469166506653162575, b)
		z[3], b = bits.Sub64(z[3], 5598390390885236727, b)
		z[4], b = bits.Sub64(z[4], 10478029348464258423, b)
		z[5], b = bits.Sub64(z[5], 2742491024744349264, b)
		z[6], b = bits.Sub64(z[6], 16135112756024780363, b)
		z[7], b = bits.Sub64(z[7], 7025931262690089526, b)
		z[8], b = bits.Sub64(z[8], 16201635012499224705, b)
		z[9], b = bits.Sub64(z[9], 3983863241188942101, b)
		z[10], _ = bits.Sub64(z[10], 2173201886246, b)
	}
}

func _addGeneric(z, x, y *e_nocarry_0681) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], _ = bits.Add64(x[10], y[10], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[10] < 2173201886246 || (z[10] == 2173201886246 && (z[9] < 3983863241188942101 || (z[9] == 3983863241188942101 && (z[8] < 16201635012499224705 || (z[8] == 16201635012499224705 && (z[7] < 7025931262690089526 || (z[7] == 7025931262690089526 && (z[6] < 16135112756024780363 || (z[6] == 16135112756024780363 && (z[5] < 2742491024744349264 || (z[5] == 2742491024744349264 && (z[4] < 10478029348464258423 || (z[4] == 10478029348464258423 && (z[3] < 5598390390885236727 || (z[3] == 5598390390885236727 && (z[2] < 2469166506653162575 || (z[2] == 2469166506653162575 && (z[1] < 7126299503041834561 || (z[1] == 7126299503041834561 && (z[0] < 17931193701631274695))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17931193701631274695, 0)
		z[1], b = bits.Sub64(z[1], 7126299503041834561, b)
		z[2], b = bits.Sub64(z[2], 2469166506653162575, b)
		z[3], b = bits.Sub64(z[3], 5598390390885236727, b)
		z[4], b = bits.Sub64(z[4], 10478029348464258423, b)
		z[5], b = bits.Sub64(z[5], 2742491024744349264, b)
		z[6], b = bits.Sub64(z[6], 16135112756024780363, b)
		z[7], b = bits.Sub64(z[7], 7025931262690089526, b)
		z[8], b = bits.Sub64(z[8], 16201635012499224705, b)
		z[9], b = bits.Sub64(z[9], 3983863241188942101, b)
		z[10], _ = bits.Sub64(z[10], 2173201886246, b)
	}
}

func _doubleGeneric(z, x *e_nocarry_0681) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], _ = bits.Add64(x[10], x[10], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[10] < 2173201886246 || (z[10] == 2173201886246 && (z[9] < 3983863241188942101 || (z[9] == 3983863241188942101 && (z[8] < 16201635012499224705 || (z[8] == 16201635012499224705 && (z[7] < 7025931262690089526 || (z[7] == 7025931262690089526 && (z[6] < 16135112756024780363 || (z[6] == 16135112756024780363 && (z[5] < 2742491024744349264 || (z[5] == 2742491024744349264 && (z[4] < 10478029348464258423 || (z[4] == 10478029348464258423 && (z[3] < 5598390390885236727 || (z[3] == 5598390390885236727 && (z[2] < 2469166506653162575 || (z[2] == 2469166506653162575 && (z[1] < 7126299503041834561 || (z[1] == 7126299503041834561 && (z[0] < 17931193701631274695))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17931193701631274695, 0)
		z[1], b = bits.Sub64(z[1], 7126299503041834561, b)
		z[2], b = bits.Sub64(z[2], 2469166506653162575, b)
		z[3], b = bits.Sub64(z[3], 5598390390885236727, b)
		z[4], b = bits.Sub64(z[4], 10478029348464258423, b)
		z[5], b = bits.Sub64(z[5], 2742491024744349264, b)
		z[6], b = bits.Sub64(z[6], 16135112756024780363, b)
		z[7], b = bits.Sub64(z[7], 7025931262690089526, b)
		z[8], b = bits.Sub64(z[8], 16201635012499224705, b)
		z[9], b = bits.Sub64(z[9], 3983863241188942101, b)
		z[10], _ = bits.Sub64(z[10], 2173201886246, b)
	}
}

func _subGeneric(z, x, y *e_nocarry_0681) {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 17931193701631274695, 0)
		z[1], c = bits.Add64(z[1], 7126299503041834561, c)
		z[2], c = bits.Add64(z[2], 2469166506653162575, c)
		z[3], c = bits.Add64(z[3], 5598390390885236727, c)
		z[4], c = bits.Add64(z[4], 10478029348464258423, c)
		z[5], c = bits.Add64(z[5], 2742491024744349264, c)
		z[6], c = bits.Add64(z[6], 16135112756024780363, c)
		z[7], c = bits.Add64(z[7], 7025931262690089526, c)
		z[8], c = bits.Add64(z[8], 16201635012499224705, c)
		z[9], c = bits.Add64(z[9], 3983863241188942101, c)
		z[10], _ = bits.Add64(z[10], 2173201886246, c)
	}
}

func _negGeneric(z, x *e_nocarry_0681) {
	if x.IsZero() {
		z.SetZero()
		return
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(17931193701631274695, x[0], 0)
	z[1], borrow = bits.Sub64(7126299503041834561, x[1], borrow)
	z[2], borrow = bits.Sub64(2469166506653162575, x[2], borrow)
	z[3], borrow = bits.Sub64(5598390390885236727, x[3], borrow)
	z[4], borrow = bits.Sub64(10478029348464258423, x[4], borrow)
	z[5], borrow = bits.Sub64(2742491024744349264, x[5], borrow)
	z[6], borrow = bits.Sub64(16135112756024780363, x[6], borrow)
	z[7], borrow = bits.Sub64(7025931262690089526, x[7], borrow)
	z[8], borrow = bits.Sub64(16201635012499224705, x[8], borrow)
	z[9], borrow = bits.Sub64(3983863241188942101, x[9], borrow)
	z[10], _ = bits.Sub64(2173201886246, x[10], borrow)
}

func _reduceGeneric(z *e_nocarry_0681) {

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[10] < 2173201886246 || (z[10] == 2173201886246 && (z[9] < 3983863241188942101 || (z[9] == 3983863241188942101 && (z[8] < 16201635012499224705 || (z[8] == 16201635012499224705 && (z[7] < 7025931262690089526 || (z[7] == 7025931262690089526 && (z[6] < 16135112756024780363 || (z[6] == 16135112756024780363 && (z[5] < 2742491024744349264 || (z[5] == 2742491024744349264 && (z[4] < 10478029348464258423 || (z[4] == 10478029348464258423 && (z[3] < 5598390390885236727 || (z[3] == 5598390390885236727 && (z[2] < 2469166506653162575 || (z[2] == 2469166506653162575 && (z[1] < 7126299503041834561 || (z[1] == 7126299503041834561 && (z[0] < 17931193701631274695))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17931193701631274695, 0)
		z[1], b = bits.Sub64(z[1], 7126299503041834561, b)
		z[2], b = bits.Sub64(z[2], 2469166506653162575, b)
		z[3], b = bits.Sub64(z[3], 5598390390885236727, b)
		z[4], b = bits.Sub64(z[4], 10478029348464258423, b)
		z[5], b = bits.Sub64(z[5], 2742491024744349264, b)
		z[6], b = bits.Sub64(z[6], 16135112756024780363, b)
		z[7], b = bits.Sub64(z[7], 7025931262690089526, b)
		z[8], b = bits.Sub64(z[8], 16201635012499224705, b)
		z[9], b = bits.Sub64(z[9], 3983863241188942101, b)
		z[10], _ = bits.Sub64(z[10], 2173201886246, b)
	}
}

func mulByConstant(z *e_nocarry_0681, c uint8) {
	switch c {
	case 0:
		z.SetZero()
		return
	case 1:
		return
	case 2:
		z.Double(z)
		return
	case 3:
		_z := *z
		z.Double(z).Add(z, &_z)
	case 5:
		_z := *z
		z.Double(z).Double(z).Add(z, &_z)
	default:
		var y e_nocarry_0681
		y.SetUint64(uint64(c))
		z.Mul(z, &y)
	}
}

// BatchInvert returns a new slice with every element inverted.
// Uses Montgomery batch inversion trick
func BatchInvert(a []e_nocarry_0681) []e_nocarry_0681 {
	res := make([]e_nocarry_0681, len(a))
	if len(a) == 0 {
		return res
	}

	zeroes := make([]bool, len(a))
	accumulator := One()

	for i := 0; i < len(a); i++ {
		if a[i].IsZero() {
			zeroes[i] = true
			continue
		}
		res[i] = accumulator
		accumulator.Mul(&accumulator, &a[i])
	}

	accumulator.Inverse(&accumulator)

	for i := len(a) - 1; i >= 0; i-- {
		if zeroes[i] {
			continue
		}
		res[i].Mul(&res[i], &accumulator)
		accumulator.Mul(&accumulator, &a[i])
	}

	return res
}

func _butterflyGeneric(a, b *e_nocarry_0681) {
	t := *a
	a.Add(a, b)
	b.Sub(&t, b)
}

// BitLen returns the minimum number of bits needed to represent z
// returns 0 if z == 0
func (z *e_nocarry_0681) BitLen() int {
	if z[10] != 0 {
		return 640 + bits.Len64(z[10])
	}
	if z[9] != 0 {
		return 576 + bits.Len64(z[9])
	}
	if z[8] != 0 {
		return 512 + bits.Len64(z[8])
	}
	if z[7] != 0 {
		return 448 + bits.Len64(z[7])
	}
	if z[6] != 0 {
		return 384 + bits.Len64(z[6])
	}
	if z[5] != 0 {
		return 320 + bits.Len64(z[5])
	}
	if z[4] != 0 {
		return 256 + bits.Len64(z[4])
	}
	if z[3] != 0 {
		return 192 + bits.Len64(z[3])
	}
	if z[2] != 0 {
		return 128 + bits.Len64(z[2])
	}
	if z[1] != 0 {
		return 64 + bits.Len64(z[1])
	}
	return bits.Len64(z[0])
}

// Exp z = x^exponent mod q
func (z *e_nocarry_0681) Exp(x e_nocarry_0681, exponent *big.Int) *e_nocarry_0681 {
	var bZero big.Int
	if exponent.Cmp(&bZero) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	for i := exponent.BitLen() - 2; i >= 0; i-- {
		z.Square(z)
		if exponent.Bit(i) == 1 {
			z.Mul(z, &x)
		}
	}

	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *e_nocarry_0681) ToMont() *e_nocarry_0681 {
	return z.Mul(z, &rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z e_nocarry_0681) ToRegular() e_nocarry_0681 {
	return *z.FromMont()
}

// String returns the string form of an e_nocarry_0681 in Montgomery form
func (z *e_nocarry_0681) String() string {
	zz := *z
	zz.FromMont()
	if zz.IsUint64() {
		return strconv.FormatUint(zz[0], 10)
	} else {
		var zzNeg e_nocarry_0681
		zzNeg.Neg(z)
		zzNeg.FromMont()
		if zzNeg.IsUint64() {
			return "-" + strconv.FormatUint(zzNeg[0], 10)
		}
	}
	vv := bigIntPool.Get().(*big.Int)
	defer bigIntPool.Put(vv)
	return zz.ToBigInt(vv).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *e_nocarry_0681) ToBigInt(res *big.Int) *big.Int {
	var b [Limbs * 8]byte
	binary.BigEndian.PutUint64(b[80:88], z[0])
	binary.BigEndian.PutUint64(b[72:80], z[1])
	binary.BigEndian.PutUint64(b[64:72], z[2])
	binary.BigEndian.PutUint64(b[56:64], z[3])
	binary.BigEndian.PutUint64(b[48:56], z[4])
	binary.BigEndian.PutUint64(b[40:48], z[5])
	binary.BigEndian.PutUint64(b[32:40], z[6])
	binary.BigEndian.PutUint64(b[24:32], z[7])
	binary.BigEndian.PutUint64(b[16:24], z[8])
	binary.BigEndian.PutUint64(b[8:16], z[9])
	binary.BigEndian.PutUint64(b[0:8], z[10])

	return res.SetBytes(b[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z e_nocarry_0681) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	return z.ToBigInt(res)
}

// Bytes returns the regular (non montgomery) value
// of z as a big-endian byte array.
func (z *e_nocarry_0681) Bytes() (res [Limbs * 8]byte) {
	_z := z.ToRegular()
	binary.BigEndian.PutUint64(res[80:88], _z[0])
	binary.BigEndian.PutUint64(res[72:80], _z[1])
	binary.BigEndian.PutUint64(res[64:72], _z[2])
	binary.BigEndian.PutUint64(res[56:64], _z[3])
	binary.BigEndian.PutUint64(res[48:56], _z[4])
	binary.BigEndian.PutUint64(res[40:48], _z[5])
	binary.BigEndian.PutUint64(res[32:40], _z[6])
	binary.BigEndian.PutUint64(res[24:32], _z[7])
	binary.BigEndian.PutUint64(res[16:24], _z[8])
	binary.BigEndian.PutUint64(res[8:16], _z[9])
	binary.BigEndian.PutUint64(res[0:8], _z[10])

	return
}

// Marshal returns the regular (non montgomery) value
// of z as a big-endian byte slice.
func (z *e_nocarry_0681) Marshal() []byte {
	b := z.Bytes()
	return b[:]
}

// SetBytes interprets e as the bytes of a big-endian unsigned integer,
// sets z to that value (in Montgomery form), and returns z.
func (z *e_nocarry_0681) SetBytes(e []byte) *e_nocarry_0681 {
	// get a big int from our pool
	vv := bigIntPool.Get().(*big.Int)
	vv.SetBytes(e)

	// set big int
	z.SetBigInt(vv)

	// put temporary object back in pool
	bigIntPool.Put(vv)

	return z
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *e_nocarry_0681) SetBigInt(v *big.Int) *e_nocarry_0681 {
	z.SetZero()

	var zero big.Int

	// fast path
	c := v.Cmp(&_modulus)
	if c == 0 {
		// v == 0
		return z
	} else if c != 1 && v.Cmp(&zero) != -1 {
		// 0 < v < q
		return z.setBigInt(v)
	}

	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	// copy input + modular reduction
	vv.Set(v)
	vv.Mod(v, &_modulus)

	// set big int byte value
	z.setBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)
	return z
}

// setBigInt assumes 0 <= v < q
func (z *e_nocarry_0681) setBigInt(v *big.Int) *e_nocarry_0681 {
	vBits := v.Bits()

	if bits.UintSize == 64 {
		for i := 0; i < len(vBits); i++ {
			z[i] = uint64(vBits[i])
		}
	} else {
		for i := 0; i < len(vBits); i++ {
			if i%2 == 0 {
				z[i/2] = uint64(vBits[i])
			} else {
				z[i/2] |= uint64(vBits[i]) << 32
			}
		}
	}

	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *e_nocarry_0681) SetString(s string) *e_nocarry_0681 {
	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	if _, ok := vv.SetString(s, 10); !ok {
		panic("e_nocarry_0681.SetString failed -> can't parse number in base10 into a big.Int")
	}
	z.SetBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)

	return z
}

var (
	_bLegendreExponente_nocarry_0681 *big.Int
	_bSqrtExponente_nocarry_0681     *big.Int
)

func init() {
	_bLegendreExponente_nocarry_0681, _ = new(big.Int).SetString("fcfe7696131ba4c3415666d08af06be29a1a461c40b0c08fa1147a2d1b6ff5b7c834dd93259307a48740cabf2848b4b816b6aa36bba6d8bd3311565ffb91221eed842d4e27b172d9d214ecf720fc6c32d5843a1763", 16)
	const sqrtExponente_nocarry_0681 = "7e7f3b4b098dd261a0ab3368457835f14d0d230e20586047d08a3d168db7fadbe41a6ec992c983d243a0655f94245a5c0b5b551b5dd36c5e9988ab2ffdc8910f76c216a713d8b96ce90a767b907e36196ac21d0bb2"
	_bSqrtExponente_nocarry_0681, _ = new(big.Int).SetString(sqrtExponente_nocarry_0681, 16)
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *e_nocarry_0681) Legendre() int {
	var l e_nocarry_0681
	// z^((q-1)/2)
	l.Exp(*z, _bLegendreExponente_nocarry_0681)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[10] == 139925407805) && (l[9] == 4271754622427174662) && (l[8] == 2155360879238672975) && (l[7] == 543350178001715041) && (l[6] == 6791929269810545660) && (l[5] == 5731488491816677617) && (l[4] == 5115859618514447016) && (l[3] == 13159762450725673426) && (l[2] == 13496436581568793828) && (l[1] == 9791549783648328768) && (l[0] == 14300148107414845279) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *e_nocarry_0681) Sqrt(x *e_nocarry_0681) *e_nocarry_0681 {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square e_nocarry_0681
	y.Exp(*x, _bSqrtExponente_nocarry_0681)
	// as we didn't compute the legendre symbol, ensure we found y such that y * y = x
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	}
	return nil
}

// Inverse z = x^-1 mod q
// Algorithm 16 in "Efficient Software-Implementation of Finite Fields with Applications to Cryptography"
// if x == 0, sets and returns z = x
func (z *e_nocarry_0681) InverseOld(x *e_nocarry_0681) *e_nocarry_0681 {
	if x.IsZero() {
		z.SetZero()
		return z
	}

	// initialize u = q
	var u = e_nocarry_0681{
		17931193701631274695,
		7126299503041834561,
		2469166506653162575,
		5598390390885236727,
		10478029348464258423,
		2742491024744349264,
		16135112756024780363,
		7025931262690089526,
		16201635012499224705,
		3983863241188942101,
		2173201886246,
	}

	// initialize s = r^2
	var s = e_nocarry_0681{
		18160023512380379849,
		13367128496227533720,
		3690859096059015214,
		5712877570559960755,
		10051251796866247457,
		1667343680933041170,
		7033592504193253042,
		12903877289495641271,
		5555954591159865766,
		8925793126023348755,
		146037798105,
	}

	// r = 0
	r := e_nocarry_0681{}

	v := *x

	var carry, borrow uint64
	var bigger bool

	for {
		for v[0]&1 == 0 {

			// v = v >> 1

			v[0] = v[0]>>1 | v[1]<<63
			v[1] = v[1]>>1 | v[2]<<63
			v[2] = v[2]>>1 | v[3]<<63
			v[3] = v[3]>>1 | v[4]<<63
			v[4] = v[4]>>1 | v[5]<<63
			v[5] = v[5]>>1 | v[6]<<63
			v[6] = v[6]>>1 | v[7]<<63
			v[7] = v[7]>>1 | v[8]<<63
			v[8] = v[8]>>1 | v[9]<<63
			v[9] = v[9]>>1 | v[10]<<63
			v[10] >>= 1

			if s[0]&1 == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 17931193701631274695, 0)
				s[1], carry = bits.Add64(s[1], 7126299503041834561, carry)
				s[2], carry = bits.Add64(s[2], 2469166506653162575, carry)
				s[3], carry = bits.Add64(s[3], 5598390390885236727, carry)
				s[4], carry = bits.Add64(s[4], 10478029348464258423, carry)
				s[5], carry = bits.Add64(s[5], 2742491024744349264, carry)
				s[6], carry = bits.Add64(s[6], 16135112756024780363, carry)
				s[7], carry = bits.Add64(s[7], 7025931262690089526, carry)
				s[8], carry = bits.Add64(s[8], 16201635012499224705, carry)
				s[9], carry = bits.Add64(s[9], 3983863241188942101, carry)
				s[10], _ = bits.Add64(s[10], 2173201886246, carry)

			}

			// s = s >> 1

			s[0] = s[0]>>1 | s[1]<<63
			s[1] = s[1]>>1 | s[2]<<63
			s[2] = s[2]>>1 | s[3]<<63
			s[3] = s[3]>>1 | s[4]<<63
			s[4] = s[4]>>1 | s[5]<<63
			s[5] = s[5]>>1 | s[6]<<63
			s[6] = s[6]>>1 | s[7]<<63
			s[7] = s[7]>>1 | s[8]<<63
			s[8] = s[8]>>1 | s[9]<<63
			s[9] = s[9]>>1 | s[10]<<63
			s[10] >>= 1

		}
		for u[0]&1 == 0 {

			// u = u >> 1

			u[0] = u[0]>>1 | u[1]<<63
			u[1] = u[1]>>1 | u[2]<<63
			u[2] = u[2]>>1 | u[3]<<63
			u[3] = u[3]>>1 | u[4]<<63
			u[4] = u[4]>>1 | u[5]<<63
			u[5] = u[5]>>1 | u[6]<<63
			u[6] = u[6]>>1 | u[7]<<63
			u[7] = u[7]>>1 | u[8]<<63
			u[8] = u[8]>>1 | u[9]<<63
			u[9] = u[9]>>1 | u[10]<<63
			u[10] >>= 1

			if r[0]&1 == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 17931193701631274695, 0)
				r[1], carry = bits.Add64(r[1], 7126299503041834561, carry)
				r[2], carry = bits.Add64(r[2], 2469166506653162575, carry)
				r[3], carry = bits.Add64(r[3], 5598390390885236727, carry)
				r[4], carry = bits.Add64(r[4], 10478029348464258423, carry)
				r[5], carry = bits.Add64(r[5], 2742491024744349264, carry)
				r[6], carry = bits.Add64(r[6], 16135112756024780363, carry)
				r[7], carry = bits.Add64(r[7], 7025931262690089526, carry)
				r[8], carry = bits.Add64(r[8], 16201635012499224705, carry)
				r[9], carry = bits.Add64(r[9], 3983863241188942101, carry)
				r[10], _ = bits.Add64(r[10], 2173201886246, carry)

			}

			// r = r >> 1

			r[0] = r[0]>>1 | r[1]<<63
			r[1] = r[1]>>1 | r[2]<<63
			r[2] = r[2]>>1 | r[3]<<63
			r[3] = r[3]>>1 | r[4]<<63
			r[4] = r[4]>>1 | r[5]<<63
			r[5] = r[5]>>1 | r[6]<<63
			r[6] = r[6]>>1 | r[7]<<63
			r[7] = r[7]>>1 | r[8]<<63
			r[8] = r[8]>>1 | r[9]<<63
			r[9] = r[9]>>1 | r[10]<<63
			r[10] >>= 1

		}

		// v >= u
		bigger = !(v[10] < u[10] || (v[10] == u[10] && (v[9] < u[9] || (v[9] == u[9] && (v[8] < u[8] || (v[8] == u[8] && (v[7] < u[7] || (v[7] == u[7] && (v[6] < u[6] || (v[6] == u[6] && (v[5] < u[5] || (v[5] == u[5] && (v[4] < u[4] || (v[4] == u[4] && (v[3] < u[3] || (v[3] == u[3] && (v[2] < u[2] || (v[2] == u[2] && (v[1] < u[1] || (v[1] == u[1] && (v[0] < u[0])))))))))))))))))))))

		if bigger {

			// v = v - u
			v[0], borrow = bits.Sub64(v[0], u[0], 0)
			v[1], borrow = bits.Sub64(v[1], u[1], borrow)
			v[2], borrow = bits.Sub64(v[2], u[2], borrow)
			v[3], borrow = bits.Sub64(v[3], u[3], borrow)
			v[4], borrow = bits.Sub64(v[4], u[4], borrow)
			v[5], borrow = bits.Sub64(v[5], u[5], borrow)
			v[6], borrow = bits.Sub64(v[6], u[6], borrow)
			v[7], borrow = bits.Sub64(v[7], u[7], borrow)
			v[8], borrow = bits.Sub64(v[8], u[8], borrow)
			v[9], borrow = bits.Sub64(v[9], u[9], borrow)
			v[10], _ = bits.Sub64(v[10], u[10], borrow)

			// s = s - r
			s[0], borrow = bits.Sub64(s[0], r[0], 0)
			s[1], borrow = bits.Sub64(s[1], r[1], borrow)
			s[2], borrow = bits.Sub64(s[2], r[2], borrow)
			s[3], borrow = bits.Sub64(s[3], r[3], borrow)
			s[4], borrow = bits.Sub64(s[4], r[4], borrow)
			s[5], borrow = bits.Sub64(s[5], r[5], borrow)
			s[6], borrow = bits.Sub64(s[6], r[6], borrow)
			s[7], borrow = bits.Sub64(s[7], r[7], borrow)
			s[8], borrow = bits.Sub64(s[8], r[8], borrow)
			s[9], borrow = bits.Sub64(s[9], r[9], borrow)
			s[10], borrow = bits.Sub64(s[10], r[10], borrow)

			if borrow == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 17931193701631274695, 0)
				s[1], carry = bits.Add64(s[1], 7126299503041834561, carry)
				s[2], carry = bits.Add64(s[2], 2469166506653162575, carry)
				s[3], carry = bits.Add64(s[3], 5598390390885236727, carry)
				s[4], carry = bits.Add64(s[4], 10478029348464258423, carry)
				s[5], carry = bits.Add64(s[5], 2742491024744349264, carry)
				s[6], carry = bits.Add64(s[6], 16135112756024780363, carry)
				s[7], carry = bits.Add64(s[7], 7025931262690089526, carry)
				s[8], carry = bits.Add64(s[8], 16201635012499224705, carry)
				s[9], carry = bits.Add64(s[9], 3983863241188942101, carry)
				s[10], _ = bits.Add64(s[10], 2173201886246, carry)

			}
		} else {

			// u = u - v
			u[0], borrow = bits.Sub64(u[0], v[0], 0)
			u[1], borrow = bits.Sub64(u[1], v[1], borrow)
			u[2], borrow = bits.Sub64(u[2], v[2], borrow)
			u[3], borrow = bits.Sub64(u[3], v[3], borrow)
			u[4], borrow = bits.Sub64(u[4], v[4], borrow)
			u[5], borrow = bits.Sub64(u[5], v[5], borrow)
			u[6], borrow = bits.Sub64(u[6], v[6], borrow)
			u[7], borrow = bits.Sub64(u[7], v[7], borrow)
			u[8], borrow = bits.Sub64(u[8], v[8], borrow)
			u[9], borrow = bits.Sub64(u[9], v[9], borrow)
			u[10], _ = bits.Sub64(u[10], v[10], borrow)

			// r = r - s
			r[0], borrow = bits.Sub64(r[0], s[0], 0)
			r[1], borrow = bits.Sub64(r[1], s[1], borrow)
			r[2], borrow = bits.Sub64(r[2], s[2], borrow)
			r[3], borrow = bits.Sub64(r[3], s[3], borrow)
			r[4], borrow = bits.Sub64(r[4], s[4], borrow)
			r[5], borrow = bits.Sub64(r[5], s[5], borrow)
			r[6], borrow = bits.Sub64(r[6], s[6], borrow)
			r[7], borrow = bits.Sub64(r[7], s[7], borrow)
			r[8], borrow = bits.Sub64(r[8], s[8], borrow)
			r[9], borrow = bits.Sub64(r[9], s[9], borrow)
			r[10], borrow = bits.Sub64(r[10], s[10], borrow)

			if borrow == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 17931193701631274695, 0)
				r[1], carry = bits.Add64(r[1], 7126299503041834561, carry)
				r[2], carry = bits.Add64(r[2], 2469166506653162575, carry)
				r[3], carry = bits.Add64(r[3], 5598390390885236727, carry)
				r[4], carry = bits.Add64(r[4], 10478029348464258423, carry)
				r[5], carry = bits.Add64(r[5], 2742491024744349264, carry)
				r[6], carry = bits.Add64(r[6], 16135112756024780363, carry)
				r[7], carry = bits.Add64(r[7], 7025931262690089526, carry)
				r[8], carry = bits.Add64(r[8], 16201635012499224705, carry)
				r[9], carry = bits.Add64(r[9], 3983863241188942101, carry)
				r[10], _ = bits.Add64(r[10], 2173201886246, carry)

			}
		}
		if (u[0] == 1) && (u[10]|u[9]|u[8]|u[7]|u[6]|u[5]|u[4]|u[3]|u[2]|u[1]) == 0 {
			z.Set(&r)
			return z
		}
		if (v[0] == 1) && (v[10]|v[9]|v[8]|v[7]|v[6]|v[5]|v[4]|v[3]|v[2]|v[1]) == 0 {
			z.Set(&s)
			return z
		}
	}

}

func max(a int, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a int, b int) int {
	if a < b {
		return a
	}
	return b
}

//Though we're defining k as a constant, this code "profoundly" assumes that the processor is 64 bit
const k = 32 // word size / 2
const signBitSelector = uint64(1) << 63
const approxLowBitsN = k - 1
const approxHighBitsN = k + 1

func approximate(x *e_nocarry_0681, n int) uint64 {

	if n <= 64 {
		return x[0]
	}

	const mask = (uint64(1) << (k - 1)) - 1 //k-1 ones
	lo := mask & x[0]

	hiWordIndex := (n - 1) / 64

	hiWordBitsAvailable := n - hiWordIndex*64
	hiWordBitsUsed := min(hiWordBitsAvailable, approxHighBitsN)

	mask_ := uint64(^((1 << (hiWordBitsAvailable - hiWordBitsUsed)) - 1))
	hi := (x[hiWordIndex] & mask_) << (64 - hiWordBitsAvailable)

	mask_ = ^(1<<(approxLowBitsN+hiWordBitsUsed) - 1)
	mid := (mask_ & x[hiWordIndex-1]) >> hiWordBitsUsed

	return lo | mid | hi
}

var inversionCorrectionFactor = e_nocarry_0681{
	12057681488755773342,
	2427517532631969027,
	3883033021502197327,
	13698227251688856973,
	5937100174628387689,
	4512509683504616875,
	3008640742034872731,
	8252412219823560131,
	16659172767521052615,
	17675715278057552516,
	176303693332,
}

func (z *e_nocarry_0681) Inverse(x *e_nocarry_0681) *e_nocarry_0681 {
	if x.IsZero() {
		z.SetZero()
		return z
	}

	var a = *x
	var b = qe_nocarry_0681
	var u = e_nocarry_0681{1}

	//Update factors: we get [u; v]:= [f0 g0; f1 g1] [u; v]
	var f0, g0, f1, g1 int64

	//Saved update factors to reduce the number of field multiplications
	var pf0, pg0, pf1, pg1 int64

	var i uint

	var v, s e_nocarry_0681

	const iterationN = 2 * ((2*Bits-2)/(2*k) + 1) // 2  ⌈ (2 * field size - 1) / 2k ⌉

	//Since u,v are updated every other iteration, we must make sure we terminate after evenly many iterations
	//This also lets us get away with half as many updates to u,v
	//To make this constant-time-ish, replace the condition with i < iterationN
	for i = 0; i&1 == 1 || !a.IsZero(); i++ {
		n := max(a.BitLen(), b.BitLen())
		aApprox, bApprox := approximate(&a, n), approximate(&b, n)

		// After 0 iterations, we have f₀ ≤ 2⁰ and f₁ < 2⁰
		f0, g0, f1, g1 = 1, 0, 0, 1

		for j := 0; j < approxLowBitsN; j++ {

			if aApprox&1 == 0 {
				aApprox /= 2
			} else {
				s, borrow := bits.Sub64(aApprox, bApprox, 0)
				if borrow == 1 {
					s = bApprox - aApprox
					bApprox = aApprox
					f0, f1 = f1, f0
					g0, g1 = g1, g0
				}

				aApprox = s / 2
				f0 -= f1
				g0 -= g1

				//Now |f₀| < 2ʲ + 2ʲ = 2ʲ⁺¹
				//|f₁| ≤ 2ʲ still
			}

			f1 *= 2
			g1 *= 2
			//|f₁| ≤ 2ʲ⁺¹
		}

		s = a
		aHi := a.linearCombNonModular(&s, f0, &b, g0)
		if aHi&signBitSelector != 0 {
			// if aHi < 0
			f0, g0 = -f0, -g0
			aHi = a.neg(&a, aHi)
		}
		//right-shift a by k-1 bits
		a[0] = (a[0] >> approxLowBitsN) | ((a[1]) << approxHighBitsN)
		a[1] = (a[1] >> approxLowBitsN) | ((a[2]) << approxHighBitsN)
		a[2] = (a[2] >> approxLowBitsN) | ((a[3]) << approxHighBitsN)
		a[3] = (a[3] >> approxLowBitsN) | ((a[4]) << approxHighBitsN)
		a[4] = (a[4] >> approxLowBitsN) | ((a[5]) << approxHighBitsN)
		a[5] = (a[5] >> approxLowBitsN) | ((a[6]) << approxHighBitsN)
		a[6] = (a[6] >> approxLowBitsN) | ((a[7]) << approxHighBitsN)
		a[7] = (a[7] >> approxLowBitsN) | ((a[8]) << approxHighBitsN)
		a[8] = (a[8] >> approxLowBitsN) | ((a[9]) << approxHighBitsN)
		a[9] = (a[9] >> approxLowBitsN) | ((a[10]) << approxHighBitsN)
		a[10] = (a[10] >> approxLowBitsN) | (aHi << approxHighBitsN)

		bHi := b.linearCombNonModular(&s, f1, &b, g1)
		if bHi&signBitSelector != 0 {
			// if bHi < 0
			f1, g1 = -f1, -g1
			bHi = b.neg(&b, bHi)
		}
		//right-shift b by k-1 bits
		b[0] = (b[0] >> approxLowBitsN) | ((b[1]) << approxHighBitsN)
		b[1] = (b[1] >> approxLowBitsN) | ((b[2]) << approxHighBitsN)
		b[2] = (b[2] >> approxLowBitsN) | ((b[3]) << approxHighBitsN)
		b[3] = (b[3] >> approxLowBitsN) | ((b[4]) << approxHighBitsN)
		b[4] = (b[4] >> approxLowBitsN) | ((b[5]) << approxHighBitsN)
		b[5] = (b[5] >> approxLowBitsN) | ((b[6]) << approxHighBitsN)
		b[6] = (b[6] >> approxLowBitsN) | ((b[7]) << approxHighBitsN)
		b[7] = (b[7] >> approxLowBitsN) | ((b[8]) << approxHighBitsN)
		b[8] = (b[8] >> approxLowBitsN) | ((b[9]) << approxHighBitsN)
		b[9] = (b[9] >> approxLowBitsN) | ((b[10]) << approxHighBitsN)
		b[10] = (b[10] >> approxLowBitsN) | (bHi << approxHighBitsN)

		if i&1 == 1 {
			//Combine current update factors with previously stored ones
			// [f₀, g₀; f₁, g₁] ← [f₀, g₀; f₁, g₀] [pf₀, pg₀; pf₀, pg₀]
			// We have |f₀|, |g₀|, |pf₀|, |pf₁| ≤ 2ᵏ⁻¹, and that |pf_i| < 2ᵏ⁻¹ for i ∈ {0, 1}
			// Then for the new value we get |f₀| < 2ᵏ⁻¹ × 2ᵏ⁻¹ + 2ᵏ⁻¹ × 2ᵏ⁻¹ = 2²ᵏ⁻¹
			// Which leaves us with an extra bit for the sign
			f0, g0, f1, g1 = f0*pf0+g0*pf1,
				f0*pg0+g0*pg1,
				f1*pf0+g1*pf1,
				f1*pg0+g1*pg1

			s = u
			u.linearCombSosSigned(&u, f0, &v, g0)
			v.linearCombSosSigned(&s, f1, &v, g1)

		} else {
			//Save update factors
			pf0, pg0, pf1, pg1 = f0, g0, f1, g1
		}
	}

	if i > iterationN {
		panic("more iterations than expected")
	}

	//For every iteration that we miss, v is not being multiplied by 2²ᵏ⁻²
	const pSq int64 = 1 << (2 * (k - 1))
	//If the function is constant-time ish, this loop will not run (probably no need to take it out explicitly)
	for ; i < iterationN; i += 2 {
		v.mulWSigned(&v, pSq)
	}

	z.Mul(&v, &inversionCorrectionFactor)
	return z
}

func (z *e_nocarry_0681) linearCombSosSigned(x *e_nocarry_0681, xC int64, y *e_nocarry_0681, yC int64) {
	hi := z.linearCombNonModular(x, xC, y, yC)
	z.montReduceSigned(z, hi)
}

//montReduceSigned SOS algorithm; xHi must be at most 63 bits long. Last bit of xHi may be used as a sign bit
func (z *e_nocarry_0681) montReduceSigned(x *e_nocarry_0681, xHi uint64) {

	const qInvNegLsw uint64 = 422641052619623689
	const signBitRemover = ^signBitSelector
	neg := xHi&signBitSelector != 0
	//the SOS implementation requires that most significant bit is 0
	// Let X be xHi*r + x
	// note that if X is negative we would have initially stored it as 2⁶⁴ r + X
	xHi &= signBitRemover
	// with this a negative X is now represented as 2⁶³ r + X

	var t [2*Limbs - 1]uint64
	var C uint64

	m := x[0] * qInvNegLsw

	C = madd0(m, qe_nocarry_0681[0], x[0])
	C, t[1] = madd2(m, qe_nocarry_0681[1], x[1], C)
	C, t[2] = madd2(m, qe_nocarry_0681[2], x[2], C)
	C, t[3] = madd2(m, qe_nocarry_0681[3], x[3], C)
	C, t[4] = madd2(m, qe_nocarry_0681[4], x[4], C)
	C, t[5] = madd2(m, qe_nocarry_0681[5], x[5], C)
	C, t[6] = madd2(m, qe_nocarry_0681[6], x[6], C)
	C, t[7] = madd2(m, qe_nocarry_0681[7], x[7], C)
	C, t[8] = madd2(m, qe_nocarry_0681[8], x[8], C)
	C, t[9] = madd2(m, qe_nocarry_0681[9], x[9], C)
	C, t[10] = madd2(m, qe_nocarry_0681[10], x[10], C)

	// the high word of m * qe_nocarry_0681[10] is at most 62 bits
	// x[10] + C is at most 65 bits (high word at most 1 bit)
	// Thus the resulting C will be at most 63 bits
	t[11] = xHi + C
	// xHi and C are 63 bits, therefore no overflow

	{
		const i = 1
		m = t[i] * qInvNegLsw

		//TODO: Is it better to hard-code the values of qe_nocarry_0681 as the "reduce" template does?
		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, t[i+1] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, t[i+2] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, t[i+3] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, t[i+4] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, t[i+5] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, t[i+6] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, t[i+7] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, t[i+8] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, t[i+9] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		C, t[i+10] = madd2(m, qe_nocarry_0681[10], t[i+10], C)

		t[i+Limbs] += C
	}
	{
		const i = 2
		m = t[i] * qInvNegLsw

		//TODO: Is it better to hard-code the values of qe_nocarry_0681 as the "reduce" template does?
		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, t[i+1] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, t[i+2] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, t[i+3] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, t[i+4] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, t[i+5] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, t[i+6] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, t[i+7] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, t[i+8] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, t[i+9] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		C, t[i+10] = madd2(m, qe_nocarry_0681[10], t[i+10], C)

		t[i+Limbs] += C
	}
	{
		const i = 3
		m = t[i] * qInvNegLsw

		//TODO: Is it better to hard-code the values of qe_nocarry_0681 as the "reduce" template does?
		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, t[i+1] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, t[i+2] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, t[i+3] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, t[i+4] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, t[i+5] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, t[i+6] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, t[i+7] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, t[i+8] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, t[i+9] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		C, t[i+10] = madd2(m, qe_nocarry_0681[10], t[i+10], C)

		t[i+Limbs] += C
	}
	{
		const i = 4
		m = t[i] * qInvNegLsw

		//TODO: Is it better to hard-code the values of qe_nocarry_0681 as the "reduce" template does?
		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, t[i+1] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, t[i+2] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, t[i+3] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, t[i+4] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, t[i+5] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, t[i+6] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, t[i+7] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, t[i+8] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, t[i+9] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		C, t[i+10] = madd2(m, qe_nocarry_0681[10], t[i+10], C)

		t[i+Limbs] += C
	}
	{
		const i = 5
		m = t[i] * qInvNegLsw

		//TODO: Is it better to hard-code the values of qe_nocarry_0681 as the "reduce" template does?
		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, t[i+1] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, t[i+2] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, t[i+3] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, t[i+4] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, t[i+5] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, t[i+6] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, t[i+7] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, t[i+8] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, t[i+9] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		C, t[i+10] = madd2(m, qe_nocarry_0681[10], t[i+10], C)

		t[i+Limbs] += C
	}
	{
		const i = 6
		m = t[i] * qInvNegLsw

		//TODO: Is it better to hard-code the values of qe_nocarry_0681 as the "reduce" template does?
		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, t[i+1] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, t[i+2] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, t[i+3] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, t[i+4] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, t[i+5] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, t[i+6] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, t[i+7] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, t[i+8] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, t[i+9] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		C, t[i+10] = madd2(m, qe_nocarry_0681[10], t[i+10], C)

		t[i+Limbs] += C
	}
	{
		const i = 7
		m = t[i] * qInvNegLsw

		//TODO: Is it better to hard-code the values of qe_nocarry_0681 as the "reduce" template does?
		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, t[i+1] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, t[i+2] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, t[i+3] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, t[i+4] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, t[i+5] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, t[i+6] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, t[i+7] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, t[i+8] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, t[i+9] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		C, t[i+10] = madd2(m, qe_nocarry_0681[10], t[i+10], C)

		t[i+Limbs] += C
	}
	{
		const i = 8
		m = t[i] * qInvNegLsw

		//TODO: Is it better to hard-code the values of qe_nocarry_0681 as the "reduce" template does?
		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, t[i+1] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, t[i+2] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, t[i+3] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, t[i+4] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, t[i+5] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, t[i+6] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, t[i+7] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, t[i+8] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, t[i+9] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		C, t[i+10] = madd2(m, qe_nocarry_0681[10], t[i+10], C)

		t[i+Limbs] += C
	}
	{
		const i = 9
		m = t[i] * qInvNegLsw

		//TODO: Is it better to hard-code the values of qe_nocarry_0681 as the "reduce" template does?
		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, t[i+1] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, t[i+2] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, t[i+3] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, t[i+4] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, t[i+5] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, t[i+6] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, t[i+7] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, t[i+8] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, t[i+9] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		C, t[i+10] = madd2(m, qe_nocarry_0681[10], t[i+10], C)

		t[i+Limbs] += C
	}
	{
		const i = 10
		m := t[i] * qInvNegLsw

		C = madd0(m, qe_nocarry_0681[0], t[i+0])
		C, z[0] = madd2(m, qe_nocarry_0681[1], t[i+1], C)
		C, z[1] = madd2(m, qe_nocarry_0681[2], t[i+2], C)
		C, z[2] = madd2(m, qe_nocarry_0681[3], t[i+3], C)
		C, z[3] = madd2(m, qe_nocarry_0681[4], t[i+4], C)
		C, z[4] = madd2(m, qe_nocarry_0681[5], t[i+5], C)
		C, z[5] = madd2(m, qe_nocarry_0681[6], t[i+6], C)
		C, z[6] = madd2(m, qe_nocarry_0681[7], t[i+7], C)
		C, z[7] = madd2(m, qe_nocarry_0681[8], t[i+8], C)
		C, z[8] = madd2(m, qe_nocarry_0681[9], t[i+9], C)
		z[10], z[9] = madd2(m, qe_nocarry_0681[10], t[i+10], C)
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[10] < 2173201886246 || (z[10] == 2173201886246 && (z[9] < 3983863241188942101 || (z[9] == 3983863241188942101 && (z[8] < 16201635012499224705 || (z[8] == 16201635012499224705 && (z[7] < 7025931262690089526 || (z[7] == 7025931262690089526 && (z[6] < 16135112756024780363 || (z[6] == 16135112756024780363 && (z[5] < 2742491024744349264 || (z[5] == 2742491024744349264 && (z[4] < 10478029348464258423 || (z[4] == 10478029348464258423 && (z[3] < 5598390390885236727 || (z[3] == 5598390390885236727 && (z[2] < 2469166506653162575 || (z[2] == 2469166506653162575 && (z[1] < 7126299503041834561 || (z[1] == 7126299503041834561 && (z[0] < 17931193701631274695))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 17931193701631274695, 0)
		z[1], b = bits.Sub64(z[1], 7126299503041834561, b)
		z[2], b = bits.Sub64(z[2], 2469166506653162575, b)
		z[3], b = bits.Sub64(z[3], 5598390390885236727, b)
		z[4], b = bits.Sub64(z[4], 10478029348464258423, b)
		z[5], b = bits.Sub64(z[5], 2742491024744349264, b)
		z[6], b = bits.Sub64(z[6], 16135112756024780363, b)
		z[7], b = bits.Sub64(z[7], 7025931262690089526, b)
		z[8], b = bits.Sub64(z[8], 16201635012499224705, b)
		z[9], b = bits.Sub64(z[9], 3983863241188942101, b)
		z[10], _ = bits.Sub64(z[10], 2173201886246, b)
	}
	if neg {
		//We have computed ( 2⁶³ r + X ) r⁻¹ = 2⁶³ + X r⁻¹ instead
		var b uint64
		z[0], b = bits.Sub64(z[0], signBitSelector, 0)
		z[1], b = bits.Sub64(z[1], 0, b)
		z[2], b = bits.Sub64(z[2], 0, b)
		z[3], b = bits.Sub64(z[3], 0, b)
		z[4], b = bits.Sub64(z[4], 0, b)
		z[5], b = bits.Sub64(z[5], 0, b)
		z[6], b = bits.Sub64(z[6], 0, b)
		z[7], b = bits.Sub64(z[7], 0, b)
		z[8], b = bits.Sub64(z[8], 0, b)
		z[9], b = bits.Sub64(z[9], 0, b)
		z[10], b = bits.Sub64(z[10], 0, b)

		//Occurs iff x == 0 && xHi < 0, i.e. X = rX' for -2⁶³ ≤ X' < 0
		if b != 0 {
			// z[10] = -1
			//negative: add q
			const neg1 = 0xFFFFFFFFFFFFFFFF

			b = 0
			z[0], b = bits.Add64(z[0], 17931193701631274695, b)
			z[1], b = bits.Add64(z[1], 7126299503041834561, b)
			z[2], b = bits.Add64(z[2], 2469166506653162575, b)
			z[3], b = bits.Add64(z[3], 5598390390885236727, b)
			z[4], b = bits.Add64(z[4], 10478029348464258423, b)
			z[5], b = bits.Add64(z[5], 2742491024744349264, b)
			z[6], b = bits.Add64(z[6], 16135112756024780363, b)
			z[7], b = bits.Add64(z[7], 7025931262690089526, b)
			z[8], b = bits.Add64(z[8], 16201635012499224705, b)
			z[9], b = bits.Add64(z[9], 3983863241188942101, b)
			z[10], _ = bits.Add64(neg1, 2173201886246, b)
		}
	}
}

// mulWSigned mul word signed (w/ montgomery reduction)
func (z *e_nocarry_0681) mulWSigned(x *e_nocarry_0681, y int64) {
	m := y >> 63
	_mulWGeneric(z, x, uint64((y^m)-m))
	//multiply by abs(y)
	if y < 0 {
		z.Neg(z)
	}
}

// regular multiplication by one word regular (non montgomery)
// Fewer additions than the branch-free for positive y. Could be faster on some architectures
func (z *e_nocarry_0681) mulWRegularBr(x *e_nocarry_0681, y int64) uint64 {

	// w := abs(y)
	m := y >> 63
	w := uint64((y ^ m) - m)

	var c uint64
	c, z[0] = bits.Mul64(x[0], w)
	c, z[1] = madd1(x[1], w, c)
	c, z[2] = madd1(x[2], w, c)
	c, z[3] = madd1(x[3], w, c)
	c, z[4] = madd1(x[4], w, c)
	c, z[5] = madd1(x[5], w, c)
	c, z[6] = madd1(x[6], w, c)
	c, z[7] = madd1(x[7], w, c)
	c, z[8] = madd1(x[8], w, c)
	c, z[9] = madd1(x[9], w, c)
	c, z[10] = madd1(x[10], w, c)

	if y < 0 {
		c = z.neg(z, c)
	}

	return c
}

func (z *e_nocarry_0681) neg(x *e_nocarry_0681, xHi uint64) uint64 {
	b := uint64(0)

	z[0], b = bits.Sub64(0, x[0], 0)
	z[1], b = bits.Sub64(0, x[1], b)
	z[2], b = bits.Sub64(0, x[2], b)
	z[3], b = bits.Sub64(0, x[3], b)
	z[4], b = bits.Sub64(0, x[4], b)
	z[5], b = bits.Sub64(0, x[5], b)
	z[6], b = bits.Sub64(0, x[6], b)
	z[7], b = bits.Sub64(0, x[7], b)
	z[8], b = bits.Sub64(0, x[8], b)
	z[9], b = bits.Sub64(0, x[9], b)
	z[10], b = bits.Sub64(0, x[10], b)
	xHi, _ = bits.Sub64(0, xHi, b)

	return xHi
}

// mulWRegular branch-free regular multiplication by one word (non montgomery)
func (z *e_nocarry_0681) mulWRegular(x *e_nocarry_0681, y int64) uint64 {

	w := uint64(y)
	allNeg := uint64(y >> 63) // -1 if y < 0, 0 o.w

	//s[0], s[1] so results are not stored immediately in z.
	//x[i] will be needed in the i+1 th iteration. We don't want to overwrite it in case x = z
	var s [2]uint64
	var h [2]uint64

	h[0], s[0] = bits.Mul64(x[0], w)

	c := uint64(0)
	b := uint64(0)

	{
		const curI = 1 % 2
		const prevI = 1 - curI
		const iMinusOne = 1 - 1

		h[curI], s[curI] = bits.Mul64(x[1], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}

	{
		const curI = 2 % 2
		const prevI = 1 - curI
		const iMinusOne = 2 - 1

		h[curI], s[curI] = bits.Mul64(x[2], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}

	{
		const curI = 3 % 2
		const prevI = 1 - curI
		const iMinusOne = 3 - 1

		h[curI], s[curI] = bits.Mul64(x[3], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}

	{
		const curI = 4 % 2
		const prevI = 1 - curI
		const iMinusOne = 4 - 1

		h[curI], s[curI] = bits.Mul64(x[4], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}

	{
		const curI = 5 % 2
		const prevI = 1 - curI
		const iMinusOne = 5 - 1

		h[curI], s[curI] = bits.Mul64(x[5], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}

	{
		const curI = 6 % 2
		const prevI = 1 - curI
		const iMinusOne = 6 - 1

		h[curI], s[curI] = bits.Mul64(x[6], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}

	{
		const curI = 7 % 2
		const prevI = 1 - curI
		const iMinusOne = 7 - 1

		h[curI], s[curI] = bits.Mul64(x[7], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}

	{
		const curI = 8 % 2
		const prevI = 1 - curI
		const iMinusOne = 8 - 1

		h[curI], s[curI] = bits.Mul64(x[8], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}

	{
		const curI = 9 % 2
		const prevI = 1 - curI
		const iMinusOne = 9 - 1

		h[curI], s[curI] = bits.Mul64(x[9], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}

	{
		const curI = 10 % 2
		const prevI = 1 - curI
		const iMinusOne = 10 - 1

		h[curI], s[curI] = bits.Mul64(x[10], w)
		s[curI], c = bits.Add64(s[curI], h[prevI], c)
		s[curI], b = bits.Sub64(s[curI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]
	}
	{
		const curI = 11 % 2
		const prevI = 1 - curI
		const iMinusOne = 10

		s[curI], _ = bits.Sub64(h[prevI], allNeg&x[iMinusOne], b)
		z[iMinusOne] = s[prevI]

		return s[curI] + c
	}
}

//Requires NoCarry
func (z *e_nocarry_0681) linearCombNonModular(x *e_nocarry_0681, xC int64, y *e_nocarry_0681, yC int64) uint64 {
	var yTimes e_nocarry_0681

	yHi := yTimes.mulWRegular(y, yC)
	xHi := z.mulWRegular(x, xC)

	carry := uint64(0)
	z[0], carry = bits.Add64(z[0], yTimes[0], carry)
	z[1], carry = bits.Add64(z[1], yTimes[1], carry)
	z[2], carry = bits.Add64(z[2], yTimes[2], carry)
	z[3], carry = bits.Add64(z[3], yTimes[3], carry)
	z[4], carry = bits.Add64(z[4], yTimes[4], carry)
	z[5], carry = bits.Add64(z[5], yTimes[5], carry)
	z[6], carry = bits.Add64(z[6], yTimes[6], carry)
	z[7], carry = bits.Add64(z[7], yTimes[7], carry)
	z[8], carry = bits.Add64(z[8], yTimes[8], carry)
	z[9], carry = bits.Add64(z[9], yTimes[9], carry)
	z[10], carry = bits.Add64(z[10], yTimes[10], carry)

	yHi, _ = bits.Add64(xHi, yHi, carry)

	return yHi
}
