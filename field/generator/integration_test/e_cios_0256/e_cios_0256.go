// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package integration

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

import (
	"crypto/rand"
	"encoding/binary"
	"errors"
	"io"
	"math/big"
	"math/bits"
	"reflect"
	"strconv"
	"sync"
)

// e_cios_0256 represents a field element stored on 4 words (uint64)
// e_cios_0256 are assumed to be in Montgomery form in all methods
// field modulus q =
//
// 101898352428907467239508173512194337879849931602214410136633327297641573241177
type e_cios_0256 [4]uint64

// Limbs number of 64 bits words needed to represent e_cios_0256
const Limbs = 4

// Bits number bits needed to represent e_cios_0256
const Bits = 256

// Bytes number bytes needed to represent e_cios_0256
const Bytes = Limbs * 8

// field modulus stored as big.Int
var _modulus big.Int

// Modulus returns q as a big.Int
// q =
//
// 101898352428907467239508173512194337879849931602214410136633327297641573241177
func Modulus() *big.Int {
	return new(big.Int).Set(&_modulus)
}

// q (modulus)
var qe_cios_0256 = e_cios_0256{
	13371396295412928857,
	1392410270021383019,
	2689739028129177048,
	16233344101221635743,
}

// rSquare
var rSquare = e_cios_0256{
	11246042860044467936,
	13809459138487052833,
	4003636571779033574,
	16126591259895288848,
}

var bigIntPool = sync.Pool{
	New: func() interface{} {
		return new(big.Int)
	},
}

func init() {
	_modulus.SetString("101898352428907467239508173512194337879849931602214410136633327297641573241177", 10)
}

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *e_cios_0256) SetUint64(v uint64) *e_cios_0256 {
	*z = e_cios_0256{v}
	return z.Mul(z, &rSquare) // z.ToMont()
}

// Set z = x
func (z *e_cios_0256) Set(x *e_cios_0256) *e_cios_0256 {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	return z
}

// SetInterface converts provided interface into e_cios_0256
// returns an error if provided type is not supported
// supported types: e_cios_0256, *e_cios_0256, uint64, int, string (interpreted as base10 integer),
// *big.Int, big.Int, []byte
func (z *e_cios_0256) SetInterface(i1 interface{}) (*e_cios_0256, error) {
	switch c1 := i1.(type) {
	case e_cios_0256:
		return z.Set(&c1), nil
	case *e_cios_0256:
		return z.Set(c1), nil
	case uint64:
		return z.SetUint64(c1), nil
	case int:
		return z.SetString(strconv.Itoa(c1)), nil
	case string:
		return z.SetString(c1), nil
	case *big.Int:
		return z.SetBigInt(c1), nil
	case big.Int:
		return z.SetBigInt(&c1), nil
	case []byte:
		return z.SetBytes(c1), nil
	default:
		return nil, errors.New("can't set integration.e_cios_0256 from type " + reflect.TypeOf(i1).String())
	}
}

// SetZero z = 0
func (z *e_cios_0256) SetZero() *e_cios_0256 {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *e_cios_0256) SetOne() *e_cios_0256 {
	z[0] = 5075347778296622759
	z[1] = 17054333803688168596
	z[2] = 15757005045580374567
	z[3] = 2213399972487915872
	return z
}

// Div z = x*y^-1 mod q
func (z *e_cios_0256) Div(x, y *e_cios_0256) *e_cios_0256 {
	var yInv e_cios_0256
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Bit returns the i'th bit, with lsb == bit 0.
// It is the responsability of the caller to convert from Montgomery to Regular form if needed
func (z *e_cios_0256) Bit(i uint64) uint64 {
	j := i / 64
	if j >= 4 {
		return 0
	}
	return uint64(z[j] >> (i % 64) & 1)
}

// Equal returns z == x
func (z *e_cios_0256) Equal(x *e_cios_0256) bool {
	return (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *e_cios_0256) IsZero() bool {
	return (z[3] | z[2] | z[1] | z[0]) == 0
}

// IsUint64 returns true if z[0] >= 0 and all other words are 0
func (z *e_cios_0256) IsUint64() bool {
	return (z[3] | z[2] | z[1]) == 0
}

// Cmp compares (lexicographic order) z and x and returns:
//
//   -1 if z <  x
//    0 if z == x
//   +1 if z >  x
//
func (z *e_cios_0256) Cmp(x *e_cios_0256) int {
	_z := *z
	_x := *x
	_z.FromMont()
	_x.FromMont()
	if _z[3] > _x[3] {
		return 1
	} else if _z[3] < _x[3] {
		return -1
	}
	if _z[2] > _x[2] {
		return 1
	} else if _z[2] < _x[2] {
		return -1
	}
	if _z[1] > _x[1] {
		return 1
	} else if _z[1] < _x[1] {
		return -1
	}
	if _z[0] > _x[0] {
		return 1
	} else if _z[0] < _x[0] {
		return -1
	}
	return 0
}

// LexicographicallyLargest returns true if this element is strictly lexicographically
// larger than its negation, false otherwise
func (z *e_cios_0256) LexicographicallyLargest() bool {
	// adapted from github.com/zkcrypto/bls12_381
	// we check if the element is larger than (q-1) / 2
	// if z - (((q -1) / 2) + 1) have no underflow, then z > (q-1) / 2

	_z := *z
	_z.FromMont()

	var b uint64
	_, b = bits.Sub64(_z[0], 15909070184561240237, 0)
	_, b = bits.Sub64(_z[1], 696205135010691509, b)
	_, b = bits.Sub64(_z[2], 10568241550919364332, b)
	_, b = bits.Sub64(_z[3], 8116672050610817871, b)

	return b == 0
}

// SetRandom sets z to a random element < q
func (z *e_cios_0256) SetRandom() (*e_cios_0256, error) {
	var bytes [32]byte
	if _, err := io.ReadFull(rand.Reader, bytes[:]); err != nil {
		return nil, err
	}
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[3] %= 16233344101221635743

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[3] < 16233344101221635743 || (z[3] == 16233344101221635743 && (z[2] < 2689739028129177048 || (z[2] == 2689739028129177048 && (z[1] < 1392410270021383019 || (z[1] == 1392410270021383019 && (z[0] < 13371396295412928857))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 13371396295412928857, 0)
		z[1], b = bits.Sub64(z[1], 1392410270021383019, b)
		z[2], b = bits.Sub64(z[2], 2689739028129177048, b)
		z[3], _ = bits.Sub64(z[3], 16233344101221635743, b)
	}

	return z, nil
}

// One returns 1 (in montgommery form)
func One() e_cios_0256 {
	var one e_cios_0256
	one.SetOne()
	return one
}

// Halve sets z to z / 2 (mod p)
func (z *e_cios_0256) Halve() {
	var twoInv e_cios_0256
	twoInv.SetOne().Double(&twoInv).Inverse(&twoInv)
	z.Mul(z, &twoInv)

}

// API with assembly impl

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *e_cios_0256) Mul(x, y *e_cios_0256) *e_cios_0256 {
	mul(z, x, y)
	return z
}

// Square z = x * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *e_cios_0256) Square(x *e_cios_0256) *e_cios_0256 {
	mul(z, x, x)
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *e_cios_0256) FromMont() *e_cios_0256 {
	fromMont(z)
	return z
}

// Add z = x + y mod q
func (z *e_cios_0256) Add(x, y *e_cios_0256) *e_cios_0256 {
	add(z, x, y)
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *e_cios_0256) Double(x *e_cios_0256) *e_cios_0256 {
	double(z, x)
	return z
}

// Sub  z = x - y mod q
func (z *e_cios_0256) Sub(x, y *e_cios_0256) *e_cios_0256 {
	sub(z, x, y)
	return z
}

// Neg z = q - x
func (z *e_cios_0256) Neg(x *e_cios_0256) *e_cios_0256 {
	neg(z, x)
	return z
}

// Generic (no ADX instructions, no AMD64) versions of multiplication and squaring algorithms

func _mulGeneric(z, x, y *e_cios_0256) {

	var t [5]uint64
	var D uint64
	var m, C uint64
	// -----------------------------------
	// First loop

	C, t[0] = bits.Mul64(y[0], x[0])
	C, t[1] = madd1(y[0], x[1], C)
	C, t[2] = madd1(y[0], x[2], C)
	C, t[3] = madd1(y[0], x[3], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 13027954996101421335

	// -----------------------------------
	// Second loop
	C = madd0(m, 13371396295412928857, t[0])

	C, t[0] = madd2(m, 1392410270021383019, t[1], C)

	C, t[1] = madd2(m, 2689739028129177048, t[2], C)

	C, t[2] = madd3(m, 16233344101221635743, t[3], C, t[4])

	t[3], t[4] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[1], x[0], t[0])
	C, t[1] = madd2(y[1], x[1], t[1], C)
	C, t[2] = madd2(y[1], x[2], t[2], C)
	C, t[3] = madd2(y[1], x[3], t[3], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 13027954996101421335

	// -----------------------------------
	// Second loop
	C = madd0(m, 13371396295412928857, t[0])

	C, t[0] = madd2(m, 1392410270021383019, t[1], C)

	C, t[1] = madd2(m, 2689739028129177048, t[2], C)

	C, t[2] = madd3(m, 16233344101221635743, t[3], C, t[4])

	t[3], t[4] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[2], x[0], t[0])
	C, t[1] = madd2(y[2], x[1], t[1], C)
	C, t[2] = madd2(y[2], x[2], t[2], C)
	C, t[3] = madd2(y[2], x[3], t[3], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 13027954996101421335

	// -----------------------------------
	// Second loop
	C = madd0(m, 13371396295412928857, t[0])

	C, t[0] = madd2(m, 1392410270021383019, t[1], C)

	C, t[1] = madd2(m, 2689739028129177048, t[2], C)

	C, t[2] = madd3(m, 16233344101221635743, t[3], C, t[4])

	t[3], t[4] = bits.Add64(D, C, 0)
	// -----------------------------------
	// First loop

	C, t[0] = madd1(y[3], x[0], t[0])
	C, t[1] = madd2(y[3], x[1], t[1], C)
	C, t[2] = madd2(y[3], x[2], t[2], C)
	C, t[3] = madd2(y[3], x[3], t[3], C)

	D = C

	// m = t[0]n'[0] mod W
	m = t[0] * 13027954996101421335

	// -----------------------------------
	// Second loop
	C = madd0(m, 13371396295412928857, t[0])

	C, t[0] = madd2(m, 1392410270021383019, t[1], C)

	C, t[1] = madd2(m, 2689739028129177048, t[2], C)

	C, t[2] = madd3(m, 16233344101221635743, t[3], C, t[4])

	t[3], t[4] = bits.Add64(D, C, 0)

	if t[4] != 0 {
		// we need to reduce, we have a result on 5 words
		var b uint64
		z[0], b = bits.Sub64(t[0], 13371396295412928857, 0)
		z[1], b = bits.Sub64(t[1], 1392410270021383019, b)
		z[2], b = bits.Sub64(t[2], 2689739028129177048, b)
		z[3], _ = bits.Sub64(t[3], 16233344101221635743, b)

		return

	}

	// copy t into z
	z[0] = t[0]
	z[1] = t[1]
	z[2] = t[2]
	z[3] = t[3]

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[3] < 16233344101221635743 || (z[3] == 16233344101221635743 && (z[2] < 2689739028129177048 || (z[2] == 2689739028129177048 && (z[1] < 1392410270021383019 || (z[1] == 1392410270021383019 && (z[0] < 13371396295412928857))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 13371396295412928857, 0)
		z[1], b = bits.Sub64(z[1], 1392410270021383019, b)
		z[2], b = bits.Sub64(z[2], 2689739028129177048, b)
		z[3], _ = bits.Sub64(z[3], 16233344101221635743, b)
	}
}

func _mulWGeneric(z, x *e_cios_0256, y uint64) {

	var t [4]uint64
	{
		// round 0
		c1, c0 := bits.Mul64(y, x[0])
		m := c0 * 13027954996101421335
		c2 := madd0(m, 13371396295412928857, c0)
		c1, c0 = madd1(y, x[1], c1)
		c2, t[0] = madd2(m, 1392410270021383019, c2, c0)
		c1, c0 = madd1(y, x[2], c1)
		c2, t[1] = madd2(m, 2689739028129177048, c2, c0)
		c1, c0 = madd1(y, x[3], c1)
		t[3], t[2] = madd3(m, 16233344101221635743, c0, c2, c1)
	}
	{
		// round 1
		m := t[0] * 13027954996101421335
		c2 := madd0(m, 13371396295412928857, t[0])
		c2, t[0] = madd2(m, 1392410270021383019, c2, t[1])
		c2, t[1] = madd2(m, 2689739028129177048, c2, t[2])
		t[3], t[2] = madd2(m, 16233344101221635743, t[3], c2)
	}
	{
		// round 2
		m := t[0] * 13027954996101421335
		c2 := madd0(m, 13371396295412928857, t[0])
		c2, t[0] = madd2(m, 1392410270021383019, c2, t[1])
		c2, t[1] = madd2(m, 2689739028129177048, c2, t[2])
		t[3], t[2] = madd2(m, 16233344101221635743, t[3], c2)
	}
	{
		// round 3
		m := t[0] * 13027954996101421335
		c2 := madd0(m, 13371396295412928857, t[0])
		c2, z[0] = madd2(m, 1392410270021383019, c2, t[1])
		c2, z[1] = madd2(m, 2689739028129177048, c2, t[2])
		z[3], z[2] = madd2(m, 16233344101221635743, t[3], c2)
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[3] < 16233344101221635743 || (z[3] == 16233344101221635743 && (z[2] < 2689739028129177048 || (z[2] == 2689739028129177048 && (z[1] < 1392410270021383019 || (z[1] == 1392410270021383019 && (z[0] < 13371396295412928857))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 13371396295412928857, 0)
		z[1], b = bits.Sub64(z[1], 1392410270021383019, b)
		z[2], b = bits.Sub64(z[2], 2689739028129177048, b)
		z[3], _ = bits.Sub64(z[3], 16233344101221635743, b)
	}
}

func _fromMontGeneric(z *e_cios_0256) {
	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13027954996101421335
		C := madd0(m, 13371396295412928857, z[0])
		C, z[0] = madd2(m, 1392410270021383019, z[1], C)
		C, z[1] = madd2(m, 2689739028129177048, z[2], C)
		C, z[2] = madd2(m, 16233344101221635743, z[3], C)
		z[3] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13027954996101421335
		C := madd0(m, 13371396295412928857, z[0])
		C, z[0] = madd2(m, 1392410270021383019, z[1], C)
		C, z[1] = madd2(m, 2689739028129177048, z[2], C)
		C, z[2] = madd2(m, 16233344101221635743, z[3], C)
		z[3] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13027954996101421335
		C := madd0(m, 13371396295412928857, z[0])
		C, z[0] = madd2(m, 1392410270021383019, z[1], C)
		C, z[1] = madd2(m, 2689739028129177048, z[2], C)
		C, z[2] = madd2(m, 16233344101221635743, z[3], C)
		z[3] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 13027954996101421335
		C := madd0(m, 13371396295412928857, z[0])
		C, z[0] = madd2(m, 1392410270021383019, z[1], C)
		C, z[1] = madd2(m, 2689739028129177048, z[2], C)
		C, z[2] = madd2(m, 16233344101221635743, z[3], C)
		z[3] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[3] < 16233344101221635743 || (z[3] == 16233344101221635743 && (z[2] < 2689739028129177048 || (z[2] == 2689739028129177048 && (z[1] < 1392410270021383019 || (z[1] == 1392410270021383019 && (z[0] < 13371396295412928857))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 13371396295412928857, 0)
		z[1], b = bits.Sub64(z[1], 1392410270021383019, b)
		z[2], b = bits.Sub64(z[2], 2689739028129177048, b)
		z[3], _ = bits.Sub64(z[3], 16233344101221635743, b)
	}
}

func _addGeneric(z, x, y *e_cios_0256) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 13371396295412928857, 0)
		z[1], carry = bits.Sub64(z[1], 1392410270021383019, carry)
		z[2], carry = bits.Sub64(z[2], 2689739028129177048, carry)
		z[3], carry = bits.Sub64(z[3], 16233344101221635743, carry)
		return
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[3] < 16233344101221635743 || (z[3] == 16233344101221635743 && (z[2] < 2689739028129177048 || (z[2] == 2689739028129177048 && (z[1] < 1392410270021383019 || (z[1] == 1392410270021383019 && (z[0] < 13371396295412928857))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 13371396295412928857, 0)
		z[1], b = bits.Sub64(z[1], 1392410270021383019, b)
		z[2], b = bits.Sub64(z[2], 2689739028129177048, b)
		z[3], _ = bits.Sub64(z[3], 16233344101221635743, b)
	}
}

func _doubleGeneric(z, x *e_cios_0256) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	// if we overflowed the last addition, z >= q
	// if z >= q, z = z - q
	if carry != 0 {
		// we overflowed, so z >= q
		z[0], carry = bits.Sub64(z[0], 13371396295412928857, 0)
		z[1], carry = bits.Sub64(z[1], 1392410270021383019, carry)
		z[2], carry = bits.Sub64(z[2], 2689739028129177048, carry)
		z[3], carry = bits.Sub64(z[3], 16233344101221635743, carry)
		return
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[3] < 16233344101221635743 || (z[3] == 16233344101221635743 && (z[2] < 2689739028129177048 || (z[2] == 2689739028129177048 && (z[1] < 1392410270021383019 || (z[1] == 1392410270021383019 && (z[0] < 13371396295412928857))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 13371396295412928857, 0)
		z[1], b = bits.Sub64(z[1], 1392410270021383019, b)
		z[2], b = bits.Sub64(z[2], 2689739028129177048, b)
		z[3], _ = bits.Sub64(z[3], 16233344101221635743, b)
	}
}

func _subGeneric(z, x, y *e_cios_0256) {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 13371396295412928857, 0)
		z[1], c = bits.Add64(z[1], 1392410270021383019, c)
		z[2], c = bits.Add64(z[2], 2689739028129177048, c)
		z[3], _ = bits.Add64(z[3], 16233344101221635743, c)
	}
}

func _negGeneric(z, x *e_cios_0256) {
	if x.IsZero() {
		z.SetZero()
		return
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(13371396295412928857, x[0], 0)
	z[1], borrow = bits.Sub64(1392410270021383019, x[1], borrow)
	z[2], borrow = bits.Sub64(2689739028129177048, x[2], borrow)
	z[3], _ = bits.Sub64(16233344101221635743, x[3], borrow)
}

func _reduceGeneric(z *e_cios_0256) {

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[3] < 16233344101221635743 || (z[3] == 16233344101221635743 && (z[2] < 2689739028129177048 || (z[2] == 2689739028129177048 && (z[1] < 1392410270021383019 || (z[1] == 1392410270021383019 && (z[0] < 13371396295412928857))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 13371396295412928857, 0)
		z[1], b = bits.Sub64(z[1], 1392410270021383019, b)
		z[2], b = bits.Sub64(z[2], 2689739028129177048, b)
		z[3], _ = bits.Sub64(z[3], 16233344101221635743, b)
	}
}

func mulByConstant(z *e_cios_0256, c uint8) {
	switch c {
	case 0:
		z.SetZero()
		return
	case 1:
		return
	case 2:
		z.Double(z)
		return
	case 3:
		_z := *z
		z.Double(z).Add(z, &_z)
	case 5:
		_z := *z
		z.Double(z).Double(z).Add(z, &_z)
	default:
		var y e_cios_0256
		y.SetUint64(uint64(c))
		z.Mul(z, &y)
	}
}

// BatchInvert returns a new slice with every element inverted.
// Uses Montgomery batch inversion trick
func BatchInvert(a []e_cios_0256) []e_cios_0256 {
	res := make([]e_cios_0256, len(a))
	if len(a) == 0 {
		return res
	}

	zeroes := make([]bool, len(a))
	accumulator := One()

	for i := 0; i < len(a); i++ {
		if a[i].IsZero() {
			zeroes[i] = true
			continue
		}
		res[i] = accumulator
		accumulator.Mul(&accumulator, &a[i])
	}

	accumulator.Inverse(&accumulator)

	for i := len(a) - 1; i >= 0; i-- {
		if zeroes[i] {
			continue
		}
		res[i].Mul(&res[i], &accumulator)
		accumulator.Mul(&accumulator, &a[i])
	}

	return res
}

func _butterflyGeneric(a, b *e_cios_0256) {
	t := *a
	a.Add(a, b)
	b.Sub(&t, b)
}

// BitLen returns the minimum number of bits needed to represent z
// returns 0 if z == 0
func (z *e_cios_0256) BitLen() int {
	if z[3] != 0 {
		return 192 + bits.Len64(z[3])
	}
	if z[2] != 0 {
		return 128 + bits.Len64(z[2])
	}
	if z[1] != 0 {
		return 64 + bits.Len64(z[1])
	}
	return bits.Len64(z[0])
}

// Exp z = x^exponent mod q
func (z *e_cios_0256) Exp(x e_cios_0256, exponent *big.Int) *e_cios_0256 {
	var bZero big.Int
	if exponent.Cmp(&bZero) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	for i := exponent.BitLen() - 2; i >= 0; i-- {
		z.Square(z)
		if exponent.Bit(i) == 1 {
			z.Mul(z, &x)
		}
	}

	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *e_cios_0256) ToMont() *e_cios_0256 {
	return z.Mul(z, &rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z e_cios_0256) ToRegular() e_cios_0256 {
	return *z.FromMont()
}

// String returns the string form of an e_cios_0256 in Montgomery form
func (z *e_cios_0256) String() string {
	zz := *z
	zz.FromMont()
	if zz.IsUint64() {
		return strconv.FormatUint(zz[0], 10)
	} else {
		var zzNeg e_cios_0256
		zzNeg.Neg(z)
		zzNeg.FromMont()
		if zzNeg.IsUint64() {
			return "-" + strconv.FormatUint(zzNeg[0], 10)
		}
	}
	vv := bigIntPool.Get().(*big.Int)
	defer bigIntPool.Put(vv)
	return zz.ToBigInt(vv).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *e_cios_0256) ToBigInt(res *big.Int) *big.Int {
	var b [Limbs * 8]byte
	binary.BigEndian.PutUint64(b[24:32], z[0])
	binary.BigEndian.PutUint64(b[16:24], z[1])
	binary.BigEndian.PutUint64(b[8:16], z[2])
	binary.BigEndian.PutUint64(b[0:8], z[3])

	return res.SetBytes(b[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z e_cios_0256) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	return z.ToBigInt(res)
}

// Bytes returns the regular (non montgomery) value
// of z as a big-endian byte array.
func (z *e_cios_0256) Bytes() (res [Limbs * 8]byte) {
	_z := z.ToRegular()
	binary.BigEndian.PutUint64(res[24:32], _z[0])
	binary.BigEndian.PutUint64(res[16:24], _z[1])
	binary.BigEndian.PutUint64(res[8:16], _z[2])
	binary.BigEndian.PutUint64(res[0:8], _z[3])

	return
}

// Marshal returns the regular (non montgomery) value
// of z as a big-endian byte slice.
func (z *e_cios_0256) Marshal() []byte {
	b := z.Bytes()
	return b[:]
}

// SetBytes interprets e as the bytes of a big-endian unsigned integer,
// sets z to that value (in Montgomery form), and returns z.
func (z *e_cios_0256) SetBytes(e []byte) *e_cios_0256 {
	// get a big int from our pool
	vv := bigIntPool.Get().(*big.Int)
	vv.SetBytes(e)

	// set big int
	z.SetBigInt(vv)

	// put temporary object back in pool
	bigIntPool.Put(vv)

	return z
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *e_cios_0256) SetBigInt(v *big.Int) *e_cios_0256 {
	z.SetZero()

	var zero big.Int

	// fast path
	c := v.Cmp(&_modulus)
	if c == 0 {
		// v == 0
		return z
	} else if c != 1 && v.Cmp(&zero) != -1 {
		// 0 < v < q
		return z.setBigInt(v)
	}

	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	// copy input + modular reduction
	vv.Set(v)
	vv.Mod(v, &_modulus)

	// set big int byte value
	z.setBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)
	return z
}

// setBigInt assumes 0 <= v < q
func (z *e_cios_0256) setBigInt(v *big.Int) *e_cios_0256 {
	vBits := v.Bits()

	if bits.UintSize == 64 {
		for i := 0; i < len(vBits); i++ {
			z[i] = uint64(vBits[i])
		}
	} else {
		for i := 0; i < len(vBits); i++ {
			if i%2 == 0 {
				z[i/2] = uint64(vBits[i])
			} else {
				z[i/2] |= uint64(vBits[i]) << 32
			}
		}
	}

	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *e_cios_0256) SetString(s string) *e_cios_0256 {
	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	if _, ok := vv.SetString(s, 10); !ok {
		panic("e_cios_0256.SetString failed -> can't parse number in base10 into a big.Int")
	}
	z.SetBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)

	return z
}

var (
	_bLegendreExponente_cios_0256 *big.Int
	_bSqrtExponente_cios_0256     *big.Int
)

func init() {
	_bLegendreExponente_cios_0256, _ = new(big.Int).SetString("70a43639deffcb4f92a9efb297126eec09a96ae1b31d79b5dcc85f0b0187e8ac", 16)
	const sqrtExponente_cios_0256 = "e1486c73bdff969f2553df652e24ddd81352d5c3663af36bb990be16030fd15"
	_bSqrtExponente_cios_0256, _ = new(big.Int).SetString(sqrtExponente_cios_0256, 16)
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *e_cios_0256) Legendre() int {
	var l e_cios_0256
	// z^((q-1)/2)
	l.Exp(*z, _bLegendreExponente_cios_0256)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[3] == 2213399972487915872) && (l[2] == 15757005045580374567) && (l[1] == 17054333803688168596) && (l[0] == 5075347778296622759) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *e_cios_0256) Sqrt(x *e_cios_0256) *e_cios_0256 {
	// q ≡ 1 (mod 4)
	// see modSqrtTonelliShanks in math/big/int.go
	// using https://www.maa.org/sites/default/files/pdf/upload_library/22/Polya/07468342.di020786.02p0470a.pdf

	var y, b, t, w e_cios_0256
	// w = x^((s-1)/2))
	w.Exp(*x, _bSqrtExponente_cios_0256)

	// y = x^((s+1)/2)) = w * x
	y.Mul(x, &w)

	// b = x^s = w * w * x = y * x
	b.Mul(&w, &y)

	// g = nonResidue ^ s
	var g = e_cios_0256{
		2725412894307720836,
		9009436911487237218,
		10105155396851215286,
		1730164563967327589,
	}
	r := uint64(3)

	// compute legendre symbol
	// t = x^((q-1)/2) = r-1 squaring of x^s
	t = b
	for i := uint64(0); i < r-1; i++ {
		t.Square(&t)
	}
	if t.IsZero() {
		return z.SetZero()
	}
	if !((t[3] == 2213399972487915872) && (t[2] == 15757005045580374567) && (t[1] == 17054333803688168596) && (t[0] == 5075347778296622759)) {
		// t != 1, we don't have a square root
		return nil
	}
	for {
		var m uint64
		t = b

		// for t != 1
		for !((t[3] == 2213399972487915872) && (t[2] == 15757005045580374567) && (t[1] == 17054333803688168596) && (t[0] == 5075347778296622759)) {
			t.Square(&t)
			m++
		}

		if m == 0 {
			return z.Set(&y)
		}
		// t = g^(2^(r-m-1)) mod q
		ge := int(r - m - 1)
		t = g
		for ge > 0 {
			t.Square(&t)
			ge--
		}

		g.Square(&t)
		y.Mul(&y, &t)
		b.Mul(&b, &g)
		r = m
	}
}

//Fake InverseOld just for the tests to work
func (z *e_cios_0256) InverseOld(x *e_cios_0256) *e_cios_0256 {
	return z.Inverse(x)
}

// Inverse z = x^-1 mod q
// note: allocates a big.Int (math/big)
func (z *e_cios_0256) Inverse(x *e_cios_0256) *e_cios_0256 {
	var _xNonMont big.Int
	x.ToBigIntRegular(&_xNonMont)
	_xNonMont.ModInverse(&_xNonMont, Modulus())
	z.SetBigInt(&_xNonMont)
	return z
}
