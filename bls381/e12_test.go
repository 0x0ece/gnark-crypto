// Code generated by internal/tower DO NOT EDIT
package bls381

import (
	"reflect"
	"testing"
)

type E12TestPoint struct {
	in  [2]E12
	out [11]E12
}

var E12TestPoints []E12TestPoint

// TODO this method is the same everywhere. move it someplace central and call it "compare"
func E12compare(t *testing.T, got, want interface{}) {
	if !reflect.DeepEqual(got, want) {
		t.Fatal("\nexpect:\t", want, "\ngot:\t", got)
	}
}

func E12check(t *testing.T, f func(*E12, *E12, *E12) *E12, m int) {

	if len(E12TestPoints) < 1 {
		t.Log("no tests to run")
	}

	for i := range E12TestPoints {
		var receiver E12
		var out *E12
		var inCopies [len(E12TestPoints[i].in)]E12

		for j := range inCopies {
			inCopies[j].Set(&E12TestPoints[i].in[j])
		}

		// receiver, return value both set to result
		out = f(&receiver, &inCopies[0], &inCopies[1])

		E12compare(t, receiver, E12TestPoints[i].out[m]) // receiver correct
		E12compare(t, *out, E12TestPoints[i].out[m])     // return value correct
		for j := range inCopies {
			E12compare(t, inCopies[j], E12TestPoints[i].in[j]) // inputs unchanged
		}

		// receiver == one of the inputs
		for j := range inCopies {
			out = f(&inCopies[j], &inCopies[0], &inCopies[1])

			E12compare(t, inCopies[j], E12TestPoints[i].out[m]) // receiver correct
			E12compare(t, *out, E12TestPoints[i].out[m])        // return value correct
			for k := range inCopies {
				if k == j {
					continue
				}
				E12compare(t, inCopies[k], E12TestPoints[i].in[k]) // other inputs unchanged
			}
			inCopies[j].Set(&E12TestPoints[i].in[j]) // reset input for next tests
		}
	}
}

//--------------------//
//     tests		  //
//--------------------//

func TestE12Add(t *testing.T) {
	E12check(t, (*E12).Add, 0)
}

func TestE12Sub(t *testing.T) {
	E12check(t, (*E12).Sub, 1)
}

func TestE12Mul(t *testing.T) {
	E12check(t, (*E12).Mul, 2)
}

func TestE12Square(t *testing.T) {
	E12check(t, (*E12).SquareBinary, 3)
}

func TestE12Inverse(t *testing.T) {
	E12check(t, (*E12).InverseBinary, 4)
}

func TestE12Conjugate(t *testing.T) {
	E12check(t, (*E12).ConjugateBinary, 5)
}

func TestE12Frobenius(t *testing.T) {
	E12check(t, (*E12).FrobeniusBinary, 6)
}

func TestE12FrobeniusSquare(t *testing.T) {
	E12check(t, (*E12).FrobeniusSquareBinary, 7)
}

func TestE12FrobeniusCube(t *testing.T) {
	E12check(t, (*E12).FrobeniusCubeBinary, 8)
}

func TestE12Expt(t *testing.T) {
	E12check(t, (*E12).ExptBinary, 9)
}

func TestE12FinalExponentiation(t *testing.T) {
	E12check(t, (*E12).FinalExponentiationBinary, 10)
}

//--------------------//
//     benches		  //
//--------------------//

var E12BenchIn1, E12BenchIn2, E12BenchOut E12

func BenchmarkE12Add(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.Add(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12Sub(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.Sub(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12Mul(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.Mul(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12Square(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.SquareBinary(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12Inverse(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.InverseBinary(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12Conjugate(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.ConjugateBinary(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12Frobenius(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.FrobeniusBinary(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12FrobeniusSquare(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.FrobeniusSquareBinary(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12FrobeniusCube(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.FrobeniusCubeBinary(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12Expt(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.ExptBinary(&E12BenchIn1, &E12BenchIn2)
	}
}

func BenchmarkE12FinalExponentiation(b *testing.B) {
	for i := 0; i < b.N; i++ {
		E12BenchOut.FinalExponentiationBinary(&E12BenchIn1, &E12BenchIn2)
	}
}

//-------------------------------------//
// unary helpers for E12 methods
//-------------------------------------//

// SquareBinary a binary wrapper for Square
func (z *E12) SquareBinary(x, y *E12) *E12 {
	return z.Square(x)
}

// InverseBinary a binary wrapper for Inverse
func (z *E12) InverseBinary(x, y *E12) *E12 {
	return z.Inverse(x)
}

// ConjugateBinary a binary wrapper for Conjugate
func (z *E12) ConjugateBinary(x, y *E12) *E12 {
	return z.Conjugate(x)
}

// FrobeniusBinary a binary wrapper for Frobenius
func (z *E12) FrobeniusBinary(x, y *E12) *E12 {
	return z.Frobenius(x)
}

// FrobeniusSquareBinary a binary wrapper for FrobeniusSquare
func (z *E12) FrobeniusSquareBinary(x, y *E12) *E12 {
	return z.FrobeniusSquare(x)
}

// FrobeniusCubeBinary a binary wrapper for FrobeniusCube
func (z *E12) FrobeniusCubeBinary(x, y *E12) *E12 {
	return z.FrobeniusCube(x)
}

// FinalExponentiationBinary a binary wrapper for FinalExponentiation
func (z *E12) FinalExponentiationBinary(x, y *E12) *E12 {
	return z.FinalExponentiation(x)
}

//-------------------------------------//
// custom helpers for E12 methods
//-------------------------------------//

// ExptBinary a binary wrapper for Expt
func (z *E12) ExptBinary(x, y *E12) *E12 {
	z.Expt(x)

	// if tAbsVal is negative then need to undo the conjugation in order to match the test point
	z.Conjugate(z) // because tAbsVal is negative

	return z
}
