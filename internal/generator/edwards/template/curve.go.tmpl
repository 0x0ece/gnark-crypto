
import (
	"math/big"
	"sync"

	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/fr"
)

// CurveParams curve parameters: ax^2 + y^2 = 1 + d*x^2*y^2
type CurveParams struct {
	A, D     fr.Element
	Cofactor fr.Element
	Order    big.Int
	Base     PointAffine
}

// GetEdwardsCurve returns the twisted Edwards curve on {{.Name}}/Fr
func GetEdwardsCurve() CurveParams {
	initOnce.Do(initCurveParams)
	// copy to keep Order private
	var res CurveParams

	res.A.Set(&curveParams.A)
	res.D.Set(&curveParams.D)
	res.Cofactor.Set(&curveParams.Cofactor)
	res.Order.Set(&curveParams.Order)
	res.Base.Set(&curveParams.Base)

	return res
}


var (
	initOnce sync.Once
	curveParams CurveParams
)


func initCurveParams() {
	curveParams.A.SetString("{{.A}}")
	curveParams.D.SetString("{{.D}}")
	curveParams.Cofactor.SetString("{{.Cofactor}}")
	curveParams.Order.SetString("{{.Order}}", 10)

	curveParams.Base.X.SetString("{{.BaseX}}")
	curveParams.Base.Y.SetString("{{.BaseY}}")
}

// mulByA multiplies fr.Element by curveParams.A
func mulByA(x *fr.Element) {
	{{- if eq .A "-1"}}
		x.Neg(x)
	{{- else if eq .A "-5"}}
		x.Neg(x)
		fr.MulBy5(x)
	{{- else }}
		NOT IMPLEMENTED
		panic("not implementeed")
	{{- end}}
}
