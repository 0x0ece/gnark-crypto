
import (
	"io"
	"github.com/consensys/gnark-crypto/ecc/{{ .Name }}"
)

// WriteTo writes binary encoding of the SRS
func (srs *SRS) WriteTo(w io.Writer) (int64, error) {
	// encode the SRS
	enc := {{ .CurvePackage }}.NewEncoder(w)

	toEncode := []interface{}{
		&srs.G2[0],
		&srs.G2[1],
		srs.G1,
	}

	for _, v := range toEncode {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}

	return enc.BytesWritten(), nil
}

// ReadFrom decodes SRS data from reader.
func (srs *SRS) ReadFrom(r io.Reader) (int64, error) {
	// decode the SRS
	dec := {{ .CurvePackage }}.NewDecoder(r)

	toDecode := []interface{}{
		&srs.G2[0],
		&srs.G2[1],
		&srs.G1,
	}

	for _, v := range toDecode {
		if err := dec.Decode(v); err != nil {
			return  dec.BytesRead(), err
		}
	}

	return dec.BytesRead(), nil
}



// WriteTo writes binary encoding of a Proof
func (proof *Proof) WriteTo(w io.Writer) (int64, error) {
	enc := {{ .CurvePackage }}.NewEncoder(w)

	toEncode := []interface{}{
		&proof.H,
		&proof.Point,
		&proof.ClaimedValue,
	}

	for _, v := range toEncode {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}

	return enc.BytesWritten(), nil
}

// ReadFrom decodes Proof data from reader.
func (proof *Proof) ReadFrom(r io.Reader) (int64, error) {
	dec := {{ .CurvePackage }}.NewDecoder(r)

	toDecode := []interface{}{
		&proof.H,
		&proof.Point,
		&proof.ClaimedValue,
	}

	for _, v := range toDecode {
		if err := dec.Decode(v); err != nil {
			return  dec.BytesRead(), err
		}
	}

	return dec.BytesRead(), nil
}

// WriteTo writes binary encoding of a BatchProofsSinglePoint
func (proof *BatchProofsSinglePoint) WriteTo(w io.Writer) (int64, error) {
	enc := {{ .CurvePackage }}.NewEncoder(w)

	toEncode := []interface{}{
		&proof.H,
		&proof.Point,
		&proof.ClaimedValues,
	}

	for _, v := range toEncode {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}

	return enc.BytesWritten(), nil
}

// ReadFrom decodes BatchProofsSinglePoint data from reader.
func (proof *BatchProofsSinglePoint) ReadFrom(r io.Reader) (int64, error) {
	dec := {{ .CurvePackage }}.NewDecoder(r)

	toDecode := []interface{}{
		&proof.H,
		&proof.Point,
		&proof.ClaimedValues,
	}

	for _, v := range toDecode {
		if err := dec.Decode(v); err != nil {
			return  dec.BytesRead(), err
		}
	}

	return dec.BytesRead(), nil
}
